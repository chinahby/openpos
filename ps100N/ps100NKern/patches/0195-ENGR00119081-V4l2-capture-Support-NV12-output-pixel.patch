_MCLK_RAW, false, false);
	tasklet_kill(&g_dma_tasklet);

      exit2:
	mxc_dma_free(g_dma_channel);

      exit1:
	dma_free_coherent(0, PAGE_ALIGN(CSI_MEM_SIZE),
			  cam->still_buf_vaddr, cam->still_buf);
	cam->still_buf = 0;

      exit0:
	up(&cam->busy_lock);
	if (err < 0)
		return err;
	else
		return g_user_count;
}
#else
/*!
 * V4L interface - read function
 *
 * @param file       struct file *
 * @param read buf   char *
 * @param count      size_t
 * @param ppos       structure loff_t *
 *
 * @return           bytes read
 */
static ssize_t
mxc_v4l_read(struct file *file, char *buf, size_t count, loff_t *ppos)
{
	int err = 0;
	u8 *v_address;
	struct video_device *dev = video_devdata(file);
	cam_data *cam = video_get_drvdata(dev);

	if (down_interruptible(&cam->busy_lock))
		return -EINTR;

	/* Video capture and still image capture are exclusive */
	if (cam->capture_on == true) {
		err = -EBUSY;
		goto exit0;
	}

	v_address = dma_alloc_coherent(0,
				       PAGE_ALIGN(cam->v2f.fmt.pix.sizeimage),
				       &cam->still_buf, GFP_DMA | GFP_KERNEL);

	if (!v_address) {
		pr_info("mxc_v4l_rea