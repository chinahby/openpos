:100000000C040B0000004000000040001000000342
:10001000000000000000000D0000000D3C1D00016C
:100020008FBD5C5403A0F0213C100000261040005E
:100030000C00100C000000000000000D27BDFFD8D0
:100040003C1CC0003C1B0013377BD8000000D021B3
:100050003C17001336F7541802E02021340583E8DA
:10006000AFBF00240C002488AFB000200C0023E8B0
:10007000000000003C040001248451A42405000178
:1000800002E03021000038213C10000126107E5093
:10009000AFB000100C002403AFBB00143C02000FF3
:1000A0003442FFFF020210240362102B10400009AB
:1000B000240500033C040001248451B002003021D7
:1000C000036038213C020010AFA200100C00240392
:1000D000AFA00014000020213405C0003C01000145
:1000E00000370821A02083B03C010001003708211F
:1000F000A02083B23C01000100370821A02083B377
:100100003C01000100370821AC2083B4A2E004D8F0
:10011000000418C02484000100771021AC40727CD8
:1001200000771021AC40728002E31021A445727C5C
:100130002C8200201440FFF7000418C0000020218A
:100140003405C000000418C0248400010077102189
:10015000AC40737C00771021AC40738002E3102127
:10016000A445737C2C8200805440FFF7000418C023
:10017000AF800054AF80011C8F82004434420040A5
:10018000AF8200448F82004434420020AF8200449A
:100190008F420218304200021040000900000000A7
:1001A0008F4202203C030002346300040043102508
:1001B000AEE204C48F42021C0800107434420004F2
:1001C0008F4202203C0300023463000600431025E6
:1001D000AEE204C48F42021C34420006AEE204CCFC
:1001E0008F420218304200101040000A0000000048
:1001F0008F42021C34420004AEE204C88F42022047
:100200003C03000A34630004004310250800108AF0
:10021000AEE204C08F4202203C03000A34630006B1
:1002200000431025AEE204C08F42021C3442000697
:10023000AEE204C88F4202183042020010400003B0
:100240002402000108001091A2E27248A2E0724864
:1002500024020001AF8200A0AF8200B08F8300545F
:100260008F82005408001099246300648F82005428
:10027000006210232C4200651440FFFC00000000C7
:10028000AF8000448F4202088F43020CAEE20010A0
:10029000AEE300148EE400108EE5001426E2003078
:1002A000AEE2002824020490AEE20018AF84009071
:1002B000AF8500948EE20028AF8200B496E2001A67
:1002C000AF82009C8F8200B08EE304CC00431025E7
:1002D000AF8200B08F8200B0304200041440FFFDB6
:1002E000000000008EE204508EE30454AEE304FCF0
:1002F0008EE204FC2442E0002C4220011440000D58
:1003000026E400308EE204508EE304543C040001E5
:10031000248451BC3C050001AFA00010AFA0001424
:100320008EE704FC34A5F0000C00240300603021AB
:1003300026E400300C0024882405040027440080B3
:100340000C0024882405008026E4777C0C00248897
:10035000240504008F42025C26E40094AEE20060B3
:100360008F4202602745020024060008AEE20068C2
:10037000240200060C00249AAEE200643C023B9A80
:100380003442CA000000202124030002AEE30074BE
:10039000AEE30070AEE2006C240203E8AEE20104BA
:1003A00024020001AEE30100AEE2010C3C030001B7
:1003B0000064182190635C2002E410212484000171
:1003C000A043009C2C82000F1440FFF800000000A6
:1003D0008F82004002E418212484000100021702E9
:1003E00024420030A062009C02E41021A040009C46
:1003F00096E2046A30420003144000090000000045
:1004000096E2047A30420003504001313C03080078
:1004100096E2046A304200031040002A3C020700C2
:1004200096E2047A30420003104000263C020700A6
:1004300096E3047A96E2046A146200223C02070002
:100440008EE204C024030001A2E34E2034420E00D9
:10045000AEE204C08F420218304201001040000595
:10046000000000003C0200012442E1680800111D68
:10047000000211003C0200012442D35C0002110082
:10048000000211823C030800004310253C010001DA
:10049000AC2212383C0200012442F6800002110016
:1004A000000211823C030800004310253C010001BA
:1004B000AC2212788EE2000034424000080012386C
:1004C000AEE2000034423000AFA200188EE206080F
:1004D0008F43022824420001304900FF512300E2EB
:1004E000AFA000108EE20608000210C000571021D5
:1004F0008FA300188FA4001CAC43060CAC4406105C
:100500008F8701202762380024E800200102102B89
:1005100050400001276830008F820128110200043A
:10052000000000008F820124150200070000102146
:100530008EE201A40000302124420001AEE201A4B9
:10054000080011A08EE201A48EE40608000420C079
:10055000008018218EE404308EE5043400A32821A5
:1005600000A3302B0082202100862021ACE4000073
:10057000ACE500048EE3060824020008A4E2000EA5
:100580002402000DACE20018ACE9001C000318C006
:100590002463060C02E31021ACE200088EE204C4DE
:1005A000ACE20010AF88012092E24E2014400037E8
:1005B000240600018EE24E30000210C02442503862
:1005C00002E220218C830000240200071462001F35
:1005D000000000008EE34E308EE24E341062001BAD
:1005E000240300408C82000424420001AC820004F9
:1005F0008EE24E348EE54E30244200011043000757
:10060000000000008EE24E342442000110A20005DA
:10061000000000000800118A0000000014A000057E
:10062000000000008F82012824420020AF820128B0
:100630008F8201288C8200042C420011504000134C
:10064000AC800000080011A0000000008EE24E30D7
:100650002403004024420001504300030000102105
:100660008EE24E3024420001AEE24E308EE24E3039
:10067000000210C02442503802E220212402000768
:10068000AC82000024020001AC82000454C0000CC3
:10069000AEE906083C040001248451C8AFA0001054
:1006A000AFA000148EE606088F4702283C0500091B
:1006B0000C00240334A5F000080012230000000001
:1006C0008F830120276238002466002000C2102B8F
:1006D00050400001276630008F82012810C20004BC
:1006E000000000008F82012414C2000700000000F7
:1006F0008EE201A40000302124420001AEE201A4F8
:10070000080012078EE201A48EE20608AC62001C0B
:100710008EE404A08EE504A42462001CAC620008F0
:1007200024020008A462000E24020011AC6200182A
:10073000AC640000AC6500048EE204C4AC6200103E
:10074000AF86012092E24E201440003724060001BB
:100750008EE24E30000210C02442503802E22021C6
:100760008C830000240200121462001F00000000AD
:100770008EE34E308EE24E341062001B24030040A4
:100780008C82000424420001AC8200048EE24E34CC
:100790008EE54E30244200011043000700000000A7
:1007A0008EE24E342442000110A200050000000039
:1007B000080011F10000000014A000050000000076
:1007C0008F82012824420020AF8201288F820128D5
:1007D0008C8200042C42001150400013AC800000B9
:1007E00008001207000000008EE24E302403004093
:1007F0002442000150430003000010218EE24E30DD
:1008000024420001AEE24E308EE24E30000210C0B3
:100810002442503802E2202124020012AC8200005F
:1008200024020001AC82000414C0001B0000000080
:100830003C040001248451D0AFA00010AFA00014EC
:100840008EE606088F4702283C0500090C002403A9
:1008500034A5F0018EE201B024420001AEE201B005
:10086000080012238EE201B03C040001248451DC14
:10087000AFA000148EE606088F4702283C05000949
:100880000C00240334A5F0058EE201AC24420001E3
:10089000AEE201AC8EE201AC8EE201603C040001EC
:1008A000248451E83405F00124420001AEE20160E5
:1008B0008EE201600000302100003821AFA000105E
:1008C0000C002403AFA00014080012380000000040
:1008D0003C0200012442F5A800021100000211822E
:1008E000004310253C010001AC22127896E2045A24
:1008F00030420003104000253C050FFF8EE204C883
:1009000034A5FFFF34420A00AEE204C88EE304C8F7
:100910003C040001248451F424020001A2E204EC0E
:10092000A2E204ED3C020002006218253C02000134
:100930002442A3900045102400021082AEE304C8B4
:100940003C030800004310253C010001AC221220AA
:100950003C0200012442ADD4004510240002108264
:10096000004310253C010001AC22128096E6045A97
:100970000000382124050011AFA000100C00240352
:10098000AFA0001408001268000000003C02000143
:100990002442A9D400021100000211823C03080085
:1009A000004310253C010001AC22128096E2046A4B
:1009B00030420010144000090000000096E2047A62
:1009C00030420010104001120000000096E2046A5C
:1009D00030420010104000053C02070096E2047A05
:1009E00030420010144001023C0207003442300043
:1009F000AFA200188EE206088F43022824420001AD
:100A0000304900FF512300E2AFA000108EE206083B
:100A1000000210C0005710218FA300188FA4001CE3
:100A2000AC43060CAC4406108F87012027623800C7
:100A300024E800200102102B5040000127683000FC
:100A40008F82012811020004000000008F8201241F
:100A500015020007000010218EE201A400003021E1
:100A600024420001AEE201A4080012EA8EE201A4D1
:100A70008EE40608000420C0008018218EE40430B3
:100A80008EE5043400A3282100A3302B008220210E
:100A900000862021ACE40000ACE500048EE30608EB
:100AA00024020008A4E2000E2402000DACE20018AB
:100AB000ACE9001C000318C02463060C02E31021FB
:100AC000ACE200088EE204C4ACE20010AF88012062
:100AD00092E24E2014400037240600018EE24E3090
:100AE000000210C02442503802E220218C83000012
:100AF000240200071462001F000000008EE34E3045
:100B00008EE24E341062001B240300408C820004ED
:100B100024420001AC8200048EE24E348EE54E3059
:100B20002442000110430007000000008EE24E3412
:100B30002442000110A2000500000000080012D4A9
:100B40000000000014A00005000000008F820128B2
:100B500024420020AF8201288F8201288C82000469
:100B60002C42001150400013AC800000080012EA33
:100B7000000000008EE24E302403004024420001B9
:100B800050430003000010218EE24E302442000149
:100B9000AEE24E308EE24E30000210C02442503899
:100BA00002E2202124020007AC820000240200019E
:100BB000AC82000454C0000CAEE906083C040001FD
:100BC000248451C8AFA00010AFA000148EE6060820
:100BD0008F4702283C0500090C00240334A5F000CF
:100BE0000800136D000000008F8301202762380089
:100BF0002466002000C2102B504000012766300000
:100C00008F82012810C20004000000008F8201249E
:100C100014C20007000000008EE201A40000302191
:100C200024420001AEE201A4080013518EE201A4A7
:100C30008EE20608AC62001C8EE404A08EE504A4DB
:100C40002462001CAC62000824020008A462000EAA
:100C500024020011AC620018AC640000AC65000412
:100C60008EE204C4AC620010AF86012092E24E20F6
:100C700014400037240600018EE24E30000210C0FE
:100C80002442503802E220218C830000240200120A
:100C90001462001F000000008EE34E308EE24E34DE
:100CA0001062001B240300408C82000424420001D7
:100CB000AC8200048EE24E348EE54E3024420001B8
:100CC00010430007000000008EE24E342442000171
:100CD00010A20005000000000800133B0000000007
:100CE00014A00005000000008F820128244200208B
:100CF000AF8201288F8201288C8200042C420011CF
:100D000050400013AC8000000800135100000000A8
:100D10008EE24E3024030040244200015043000381
:100D2000000010218EE24E3024420001AEE24E302F
:100D30008EE24E30000210C02442503802E22021E0
:100D400024020012AC82000024020001AC820004E4
:100D500014C0001B000000003C040001248451D09A
:100D6000AFA00010AFA000148EE606088F4702283F
:100D70003C0500090C00240334A5F0018EE201B00B
:100D800024420001AEE201B00800136D8EE201B012
:100D90003C040001248451DCAFA000148EE6060858
:100DA0008F4702283C0500090C00240334A5F005F8
:100DB0008EE201AC24420001AEE201AC8EE201AC55
:100DC0008EE201603C040001248451E83405F00205
:100DD00024420001AEE201608EE201600000302199
:100DE00000003821AFA000100C002403AFA00014B5
:100DF00096E6047A96E7046A3C04000124845200D3
:100E000024050012AFA000100C002403AFA00014B2
:100E10000C004500000000000C002318000000003A
:100E20003C06000134C63800AEE00608AF40022898
:100E3000AF40022C96E304588EE400003C0512D823
:100E400034A5C35827623800AEE2725827623800D2
:100E5000AEE2726027623800AEE27264036610216F
:100E6000AEE272702402FFFFAEE004D4AEE004E014
:100E7000AEE004E4AEE004F0A2E004F4AEE00E0C58
:100E8000AEE00E18AEE00E10AEE00E14AEE00E1C9A
:100E9000AEE0724CAEE05244AEE05240AEE0523CA6
:100EA000AEE07250AEE07254AEE0725CAEE07268DA
:100EB000AEE004D02463FFFF00852025AEE304F8F4
:100EC000AEE40000AF800060AF8200643C0201002D
:100ED000AFA200188EE206088F43022824420001C8
:100EE000304900FF512300E2AFA000108EE2060857
:100EF000000210C0005710218FA300188FA4001CFF
:100F0000AC43060CAC4406108F87012027623800E2
:100F100024E800200102102B504000012768300017
:100F20008F82012811020004000000008F8201243A
:100F300015020007000010218EE201A400003021FC
:100F400024420001AEE201A4080014228EE201A4B2
:100F50008EE40608000420C0008018218EE40430CE
:100F60008EE5043400A3282100A3302B0082202129
:100F700000862021ACE40000ACE500048EE3060806
:100F800024020008A4E2000E2402000DACE20018C6
:100F9000ACE9001C000318C02463060C02E3102116
:100FA000ACE200088EE204C4ACE20010AF8801207D
:100FB00092E24E2014400037240600018EE24E30AB
:100FC000000210C02442503802E220218C8300002D
:100FD000240200071462001F000000008EE34E3060
:100FE0008EE24E341062001B240300408C82000409
:100FF00024420001AC8200048EE24E348EE54E3075
:101000002442000110430007000000008EE24E342D
:101010002442000110A20005000000000800140C8A
:101020000000000014A00005000000008F820128CD
:1010300024420020AF8201288F8201288C82000484
:101040002C42001150400013AC8000000800142214
:10105000000000008EE24E302403004024420001D4
:1010600050430003000010218EE24E302442000164
:10107000AEE24E308EE24E30000210C024425038B4
:1010800002E2202124020007AC82000024020001B9
:10109000AC82000454C0000CAEE906083C04000118
:1010A000248451C8AFA00010AFA000148EE606083B
:1010B0008F4702283C0500090C00240334A5F000EA
:1010C000080014A5000000008F830120276238006B
:1010D0002466002000C2102B50400001276630001B
:1010E0008F82012810C20004000000008F820124BA
:1010F00014C20007000000008EE201A400003021AD
:1011000024420001AEE201A4080014898EE201A489
:101110008EE20608AC62001C8EE404A08EE504A4F6
:101120002462001CAC62000824020008A462000EC5
:1011300024020011AC620018AC640000AC6500042D
:101140008EE204C4AC620010AF86012092E24E2011
:1011500014400037240600018EE24E30000210C019
:101160002442503802E220218C8300002402001225
:101170001462001F000000008EE34E308EE24E34F9
:101180001062001B240300408C82000424420001F2
:10119000AC8200048EE24E348EE54E3024420001D3
:1011A00010430007000000008EE24E34244200018C
:1011B00010A20005000000000800147300000000E9
:1011C00014A00005000000008F82012824420020A6
:1011D000AF8201288F8201288C8200042C420011EA
:1011E00050400013AC80000008001489000000008B
:1011F0008EE24E302403004024420001504300039D
:10120000000010218EE24E3024420001AEE24E304A
:101210008EE24E30000210C02442503802E22021FB
:1012200024020012AC82000024020001AC820004FF
:1012300014C0001B000000003C040001248451D0B5
:10124000AFA00010AFA000148EE606088F4702285A
:101250003C0500090C00240334A5F0018EE201B026
:1012600024420001AEE201B0080014A58EE201B0F4
:101270003C040001248451DCAFA000148EE6060873
:101280008F4702283C0500090C00240334A5F00513
:101290008EE201AC24420001AEE201AC8EE201AC70
:1012A0008EE2015424420001AEE201540C0014DC31
:1012B0008EE201548F8200A0304200041440FFFDF2
:1012C000000000008F8200403042000114400008FE
:1012D000000000008F43010424020001106200049A
:1012E000000000008F420264104000060000000071
:1012F0008EE2017C24420001AEE2017C080014C5AC
:101300008EE2017C8F82004434420004AF820044AC
:101310008EE2017824420001AEE201788EE201788B
:101320008F8200D88F8300D400431023AEE2726C0A
:101330008EE2726C1C4000033C030001004310214C
:10134000AEE2726C0C004064000000000C004440EF
:10135000AF8002288FBF00248FB0002003E0000878
:1013600027BD002803E000080000000003E000089B
:101370000000000000000000000000002402002C1B
:10138000AF820050AEE072748F420238AEE27278E3
:101390008F82005424420067AF820058AEE07B8801
:1013A000AEE07B8CAEE07B843C010001003708217D
:1013B000AC2083BC3C0100010037082103E0000899
:1013C000A02083B927BDFFD8AFBF0024AFB0002055
:1013D0008F8200543C0300018C635CD82442006778
:1013E0001060000DAF8200583C0200010057102130
:1013F000904283B8104000053C0302003C0100010C
:101400000037082108001503A02083B88EE20000F1
:1014100000431025AEE200008F4202183042010066
:10142000104000C6000000008F8200B0304200046F
:10143000104000C2000000003C03000100771821AA
:101440008C6383D08F820104146200B4000000001A
:101450003C030001007718218C6383D48F8200B491
:10146000146200AE000000008F8200B03C030080D8
:10147000004310241040000D000000008F82011C6A
:1014800034420002AF82011C8F8200B02403FFFBB4
:1014900000431024AF8200B08F82011C2403FFFDA3
:1014A00000431024080015CCAF82011C3C0300014E
:1014B000007718218C6383D08F820104146200822C
:1014C000000000003C030001007718218C6383D4E6
:1014D0008F8200B41462007C000000003C07000111
:1014E00000F738218CE783D08F8200B03C040001E4
:1014F00024845270AFA00014AFA200108F8600B0F9
:101500003C0500050C00240334A509008F82011C52
:1015100034420002AF82011C8F8301048F8200B02D
:1015200034420001AF8200B0AF8301048F830120F9
:10153000276238002466002000C2102B50400001B2
:10154000276630008F82012810C2000400000000CE
:101550008F82012414C20006000000008EE201A464
:1015600024420001AEE201A4080015A08EE201A40D
:101570008F4402088F45020C26E20030AC6200085E
:1015800024020400A462000E2402000FAC620018C2
:10159000AC60001CAC640000AC6500048EE204C4C6
:1015A000AC620010AF86012092E24E20144000375A
:1015B000000000008EE24E30000210C0244250387D
:1015C00002E220218C830000240200071462001F25
:1015D000000000008EE34E308EE24E341062001B9D
:1015E000240300408C82000424420001AC820004E9
:1015F0008EE24E348EE54E30244200011043000747
:10160000000000008EE24E342442000110A20005CA
:10161000000000000800158A0000000014A000056A
:10162000000000008F82012824420020AF820128A0
:101630008F8201288C8200042C420011504000133C
:10164000AC800000080015A0000000008EE24E30C3
:1016500024030040244200015043000300001021F5
:101660008EE24E3024420001AEE24E308EE24E3029
:10167000000210C02442503802E220212402000758
:10168000AC82000024020001AC8200048F82011CA5
:101690002403FFFD00431024AF82011C8EE201E40D
:1016A0003C07000100F738218CE783D02442000179
:1016B000AEE201E48EE201E43C0400012484527CA9
:1016C000080015BDAFA000108F8201043C0100018D
:1016D00000370821AC2283D08F8200B43C07000180
:1016E00000F738218CE783D03C0400012484528425
:1016F0003C01000100370821AC2283D4AFA00010C8
:10170000AFA000148F8600B03C0500050C00240338
:1017100034A50900080015CC000000008F820104E8
:101720003C01000100370821AC2283D08F8200B435
:101730003C01000100370821AC2283D48EE2727490
:1017400092E304F42442006714600006AEE272746F
:101750008EE272748F4302340043102B1440007BDE
:10176000000000008EE304E48EE204F8146200043A
:101770000000000092E204F450400074A2E004F47F
:101780008F830120276238002466002000C2102BBE
:1017900050400001276630008F82012810C20004EB
:1017A000000000008F82012414C200070000000026
:1017B0008EE201A40000802124420001AEE201A4D7
:1017C000080016378EE201A48EE204E4AC62001C2D
:1017D0008EE404B08EE504B42462001CAC62000800
:1017E00024020008A462000E24020011AC6200185A
:1017F000AC640000AC6500048EE204C4AC6200106E
:10180000AF86012092E24E201440003724100001E0
:101810008EE24E30000210C02442503802E22021F5
:101820008C830000240200121462001F00000000DC
:101830008EE34E308EE24E341062001B24030040D3
:101840008C82000424420001AC8200048EE24E34FB
:101850008EE54E30244200011043000700000000D6
:101860008EE24E342442000110A200050000000068
:10187000080016210000000014A000050000000070
:101880008F82012824420020AF8201288F82012804
:101890008C8200042C42001150400013AC800000E8
:1018A00008001637000000008EE24E30240300408E
:1018B0002442000150430003000010218EE24E300C
:1018C00024420001AEE24E308EE24E30000210C0E3
:1018D0002442503802E2202124020012AC8200008F
:1018E00024020001AC8200045600000B2410000109
:1018F0008EE204E43C0400012484528CAFA0001466
:10190000AFA200108EE606088F4702283C050009AA
:101910000C00240334A5F006160000032402000185
:1019200008001650A2E204F48EE201702442000185
:10193000AEE201708EE201708EE204E4A2E004F4F3
:10194000AEE004F0AEE07274AEE204F88EE20E1C7B
:101950001040006D000000008F83012027623800D6
:101960002466002000C2102B504000012766300082
:101970008F82012810C20004000000008F82012421
:1019800014C20007000000008EE201A400008021C4
:1019900024420001AEE201A4080016AD8EE201A4CB
:1019A0008EE2724CAC62001C8EE404A88EE504AC9E
:1019B0002462001CAC62000824020008A462000E2D
:1019C00024020011AC620018AC640000AC65000495
:1019D0008EE204C4AC620010AF86012092E24E2079
:1019E00014400037241000018EE24E30000210C077
:1019F0002442503802E220218C830000240200128D
:101A00001462001F000000008EE34E308EE24E3460
:101A10001062001B240300408C8200042442000159
:101A2000AC8200048EE24E348EE54E30244200013A
:101A300010430007000000008EE24E3424420001F3
:101A400010A200050000000008001697000000002A
:101A500014A00005000000008F820128244200200D
:101A6000AF8201288F8201288C8200042C42001151
:101A700050400013AC800000080016AD00000000CC
:101A80008EE24E3024030040244200015043000304
:101A9000000010218EE24E3024420001AEE24E30B2
:101AA0008EE24E30000210C02442503802E2202163
:101AB00024020012AC82000024020001AC82000467
:101AC0005600000B241000018EE2724C3C04000111
:101AD00024845298AFA00014AFA200108EE6724C7E
:101AE0008F4702803C0500090C00240334A5F00850
:101AF00056000001AEE00E1C8EE20174244200018B
:101B0000AEE201748EE201748EE24E2410400019A0
:101B100000000000AEE04E248F8200403042000101
:101B200014400008000000008F430104240200015B
:101B300010620004000000008F42026410400006A2
:101B4000000000008EE2017C24420001AEE2017C34
:101B5000080016DA8EE2017C8F82004434420004D1
:101B6000AF8200448EE2017824420001AEE20178A7
:101B70008EE201788EE272782442FF99AEE27278AA
:101B80008EE272781C4002AD000000008F420238E5
:101B9000104002AA000000003C0200010057102182
:101BA000904283E0144002A5000000008F420080B4
:101BB000AEE2004C8F4200C0AEE200488F4200848B
:101BC000AEE200388F420084AEE202448F420088C9
:101BD000AEE202488F42008CAEE2024C8F4200908F
:101BE000AEE202508F420094AEE202548F4200985F
:101BF000AEE202588F42009CAEE2025C8F4200A02F
:101C0000AEE202608F4200A4AEE202648F4200A8FE
:101C1000AEE202688F4200ACAEE2026C8F4200B0CE
:101C2000AEE202708F4200B4AEE202748F4200B89E
:101C3000AEE202788F4200BC24040001AEE2027CD6
:101C4000AEE0003C00041080005710218EE3003C01
:101C50008C42024424840001006218212C82000F6F
:101C6000AEE3003C1440FFF8000410808F4200CC2B
:101C7000AEE200508F4200D0AEE200548F830120CC
:101C8000276238002466002000C2102B504000015B
:101C9000276630008F82012810C200040000000077
:101CA0008F82012414C20007000000008EE201A40C
:101CB0000000802124420001AEE201A40800177553
:101CC0008EE201A48F4402088F45020C26E2003008
:101CD000AC62000824020400A462000E2402000F7B
:101CE000AC620018AC60001CAC640000AC65000481
:101CF0008EE204C4AC620010AF86012092E24E2056
:101D000014400037241000018EE24E30000210C053
:101D10002442503802E220218C8300002402000774
:101D20001462001F000000008EE34E308EE24E343D
:101D30001062001B240300408C8200042442000136
:101D4000AC8200048EE24E348EE54E302442000117
:101D500010430007000000008EE24E3424420001D0
:101D600010A20005000000000800175F000000003E
:101D700014A00005000000008F82012824420020EA
:101D8000AF8201288F8201288C8200042C4200112E
:101D900050400013AC8000000800177500000000E0
:101DA0008EE24E30240300402442000150430003E1
:101DB000000010218EE24E3024420001AEE24E308F
:101DC0008EE24E30000210C02442503802E2202140
:101DD00024020007AC82000024020001AC8200044F
:101DE000120002123C020400AFA200183C020001E3
:101DF00000571021904283B01040010B00000000FA
:101E00008EE206088F43022824420001304A00FF78
:101E1000514300FDAFA000108EE20608000210C082
:101E2000005710218FA300188FA4001CAC43060C90
:101E3000AC4406108F8300548F8200542469003212
:101E4000012210232C4200331040006A0000582168
:101E500024180008240F000D240D0007240C004056
:101E6000240E00018F8701202762380024E800201B
:101E70000102102B50400001276830008F8201289A
:101E800011020004000000008F82012415020007E7
:101E9000000010218EE201A40000802124420001F4
:101EA000AEE201A4080017F38EE201A48EE4060856
:101EB000000420C0008018218EE404308EE5043434
:101EC00000A3282100A3302B00822021008620219E
:101ED000ACE40000ACE500048EE20608A4F8000EB5
:101EE000ACEF0018ACEA001C000210C02442060C43
:101EF00002E21021ACE200088EE204C4ACE2001061
:101F0000AF88012092E24E201440003324100001DB
:101F10008EE24E30000210C02442503802E22021EE
:101F20008C820000144D001F000000008EE34E3034
:101F30008EE24E341062001B000000008C82000410
:101F400024420001AC8200048EE24E348EE34E3017
:101F500024420001104C0007000000008EE24E34C5
:101F6000244200011062000500000000080017E094
:101F70000000000014600005000000008F820128AE
:101F800024420020AF8201288F8201288C82000425
:101F90002C42001150400010AC800000080017F3E4
:101FA000000000008EE24E3024420001504C00033D
:101FB000000010218EE24E3024420001AEE24E308D
:101FC0008EE24E30000210C02442503802E220213E
:101FD000AC8D0000AC8E000456000006240B0001FE
:101FE0008F820054012210232C4200331440FF9DA5
:101FF00000000000316300FF24020001146200773A
:102000003C050009AEEA06088F8300548F82005415
:1020100024690032012210232C4200331040006159
:1020200000005821240D0008240C0011240800127F
:1020300024070040240A00018F8301202762380012
:102040002466002000C2102B50400001276630009B
:102050008F82012810C20004000000008F8201243A
:1020600014C20007000000008EE201A400008021DD
:1020700024420001AEE201A40800185F8EE201A430
:102080008EE20608AC62001C8EE404A08EE504A477
:102090002462001CAC620008A46D000EAC6C001839
:1020A000AC640000AC6500048EE204C4AC620010B5
:1020B000AF86012092E24E2014400033241000012C
:1020C0008EE24E30000210C02442503802E220213D
:1020D0008C8200001448001F000000008EE34E3088
:1020E0008EE24E341062001B000000008C8200045F
:1020F00024420001AC8200048EE24E348EE34E3066
:102100002442000110470007000000008EE24E3418
:102110002442000110620005000000000800184C75
:102120000000000014600005000000008F820128FC
:1021300024420020AF8201288F8201288C82000473
:102140002C42001150400010AC8000000800185FC5
:10215000000000008EE24E30244200015047000390
:10216000000010218EE24E3024420001AEE24E30DB
:102170008EE24E30000210C02442503802E220218C
:10218000AC880000AC8A000456000006240B000155
:102190008F820054012210232C4200331440FFA6EA
:1021A00000000000316300FF2402000114620003FC
:1021B0003C0500090800197C241000013C040001C2
:1021C000248452A4AFA00010AFA000148F86012079
:1021D0008F8701240800187B34A5F0113C0400010E
:1021E000248452B0AFA00010AFA000148F8601204D
:1021F0008F87012434A5F0100C00240300008021F7
:102200000800197C000000003C040001248452BC3A
:10221000AFA000148EE606088F4702283C0500098F
:102220000800197534A5F00F8EE206088F430228C6
:1022300024420001304900FF512300E2AFA000100A
:102240008EE20608000210C0005710218FA300186C
:102250008FA4001CAC43060CAC4406108F870120F1
:102260002762380024E800200102102B50400001B2
:10227000276830008F82012811020004000000004E
:102280008F82012415020007000010218EE201A4B4
:102290000000802124420001AEE201A4080018F7EA
:1022A0008EE201A48EE40608000420C000801821FC
:1022B0008EE404308EE5043400A3282100A3302BE3
:1022C0000082202100862021ACE40000ACE500045F
:1022D0008EE3060824020008A4E2000E2402000D8A
:1022E000ACE20018ACE9001C000318C02463060C23
:1022F00002E31021ACE200088EE204C4ACE200105C
:10230000AF88012092E24E201440003724100001D3
:102310008EE24E30000210C02442503802E22021EA
:102320008C830000240200071462001F00000000DC
:102330008EE34E308EE24E341062001B24030040C8
:102340008C82000424420001AC8200048EE24E34F0
:102350008EE54E30244200011043000700000000CB
:102360008EE24E342442000110A20005000000005D
:10237000080018E10000000014A0000500000000A3
:102380008F82012824420020AF8201288F820128F9
:102390008C8200042C42001150400013AC800000DD
:1023A000080018F7000000008EE24E3024030040C1
:1023B0002442000150430003000010218EE24E3001
:1023C00024420001AEE24E308EE24E30000210C0D8
:1023D0002442503802E2202124020007AC8200008F
:1023E00024020001AC8200045600000CAEE906088D
:1023F0003C040001248452C8AFA00010AFA0001418
:102400008EE606088F4702283C0500090C002403CD
:1024100034A5F0000800197C000000008F83012023
:10242000276238002466002000C2102B50400001B3
:10243000276630008F82012810C2000400000000CF
:102440008F82012414C20007000000008EE201A464
:102450000000802124420001AEE201A40800195EC0
:102460008EE201A48EE20608AC62001C8EE404A099
:102470008EE504A42462001CAC620008240200085B
:10248000A462000E24020011AC620018AC640000CB
:10249000AC6500048EE204C4AC620010AF8601207B
:1024A00092E24E2014400037241000018EE24E309C
:1024B000000210C02442503802E220218C83000028
:1024C000240200121462001F000000008EE34E3050
:1024D0008EE24E341062001B240300408C82000404
:1024E00024420001AC8200048EE24E348EE54E3070
:1024F0002442000110430007000000008EE24E3429
:102500002442000110A20005000000000800194844
:102510000000000014A00005000000008F820128C8
:1025200024420020AF8201288F8201288C8200047F
:102530002C42001150400013AC8000000800195ECE
:10254000000000008EE24E302403004024420001CF
:1025500050430003000010218EE24E30244200015F
:10256000AEE24E308EE24E30000210C024425038AF
:1025700002E2202124020012AC82000024020001A9
:10258000AC8200045600001D241000013C04000130
:10259000248452D0AFA00010AFA000148EE606082D
:1025A0008F4702283C0500090C00240334A5F001E4
:1025B0008EE201B024420001AEE201B00800197CB5
:1025C0008EE201B03C040001248452DCAFA0001470
:1025D0008EE606088F4702283C05000934A5F00561
:1025E0000C002403000000008EE201AC00008021FA
:1025F00024420001AEE201AC8EE201AC1200000CFC
:10260000240200013C01000100370821A02083B012
:102610008F4202388EE3015824630001AEE3015873
:102620008EE301580800198CAEE272782402000192
:102630003C01000100370821A02283B03C020001C8
:102640008C425CD810400187000000008EE27B8441
:1026500024430001284200C9144001A4AEE37B8456
:102660008EE204D43042000214400119AEE07B84B3
:102670008EE204D43C0306003463100034420002AE
:10268000AEE204D4AFA300188EE206088F430228FE
:1026900024420001304A00FF514300FDAFA000106A
:1026A0008EE20608000210C0005710218FA3001808
:1026B0008FA4001CAC43060CAC4406108F8300545E
:1026C0008F82005424690032012210232C420033EF
:1026D0001040006A0000582124180008240F000D43
:1026E000240D0007240C0040240E00018F870120D8
:1026F0002762380024E800200102102B504000011E
:10270000276830008F8201281102000400000000B9
:102710008F82012415020007000010218EE201A41F
:102720000000802124420001AEE201A408001A1535
:102730008EE201A48EE40608000420C00080182167
:102740008EE404308EE5043400A3282100A3302B4E
:102750000082202100862021ACE40000ACE50004CA
:102760008EE20608A4F8000EACEF0018ACEA001CDC
:10277000000210C02442060C02E21021ACE2000864
:102780008EE204C4ACE20010AF88012092E24E2039
:1027900014400033241000018EE24E30000210C0BD
:1027A0002442503802E220218C820000144D001F88
:1027B000000000008EE34E308EE24E341062001BAB
:1027C000000000008C82000424420001AC8200045E
:1027D0008EE24E348EE34E3024420001104C00074E
:1027E000000000008EE24E34244200011062000519
:1027F0000000000008001A0200000000146000053C
:10280000000000008F82012824420020AF820128AE
:102810008F8201288C8200042C420011504000104D
:10282000AC80000008001A15000000008EE24E3057
:1028300024420001504C0003000010218EE24E3073
:1028400024420001AEE24E308EE24E30000210C053
:102850002442503802E22021AC8D0000AC8E0004EE
:1028600056000006240B00018F8200540122102321
:102870002C4200331440FF9D00000000316300FF34
:102880002402000154620078AFA00010AEEA0608EE
:102890008F8300548F820054246900320122102358
:1028A0002C4200331040006100005821240D000824
:1028B000240C00112408001224070040240A0001FF
:1028C0008F830120276238002466002000C2102B6D
:1028D00050400001276630008F82012810C200049A
:1028E000000000008F82012414C2000700000000D5
:1028F0008EE201A40000802124420001AEE201A486
:1029000008001A818EE201A48EE20608AC62001C67
:102910008EE404A08EE504A42462001CAC620008CE
:10292000A46D000EAC6C0018AC640000AC65000433
:102930008EE204C4AC620010AF86012092E24E2009
:1029400014400033241000018EE24E30000210C00B
:102950002442503802E220218C8200001448001FDB
:10296000000000008EE34E308EE24E341062001BF9
:10297000000000008C82000424420001AC820004AC
:102980008EE24E348EE34E302442000110470007A1
:10299000000000008EE24E34244200011062000567
:1029A0000000000008001A6E00000000146000051E
:1029B000000000008F82012824420020AF820128FD
:1029C0008F8201288C8200042C420011504000109C
:1029D000AC80000008001A81000000008EE24E303A
:1029E0002442000150470003000010218EE24E30C7
:1029F00024420001AEE24E308EE24E30000210C0A2
:102A00002442503802E22021AC880000AC8A000445
:102A100056000006240B00018F820054012210236F
:102A20002C4200331440FFA600000000316300FF79
:102A30002402000110620022000000003C0400019A
:102A4000248452A4AFA00010AFA000148F860120F0
:102A50008F8701243C0500090C00240334A5F011E4
:102A600008001AAD000000003C040001248452B0AC
:102A7000AFA000148F8601208F8701243C05000938
:102A80000C00240334A5F01008001AAD000000006B
:102A90003C040001248452BCAFA000148EE606085A
:102AA0008F4702283C0500090C00240334A5F00FD1
:102AB0008EE201AC24420001AEE201AC8EE201AC38
:102AC0008EE2015C24420001AEE2015C8EE2015C18
:102AD0008EE204D430420001104000550000000096
:102AE0008F42021830420080104000290000000090
:102AF0008F82004434420040AF8200448EE27B7CEF
:102B0000004028218EE200C08EE300C424060000AD
:102B10002407FFFF00002021004610241444000D6C
:102B2000006718241465000B000000008EE27B8013
:102B3000004028218EE200E08EE300E40000202126
:102B40000046102414440003006718241065000B8D
:102B5000000000008EE200C08EE300C48EE400E0BE
:102B60008EE500E4AEE37B7CAEE57B808F820044A3
:102B70003842002008001B38AF8200448F82004496
:102B80002403FFDF0043102408001B38AF820044F9
:102B90008F8200442403FFDF00431024AF820044EF
:102BA0008EE27B7C004028218EE200C08EE300C4D0
:102BB000240600002407FFFF000020210046102407
:102BC0001444000D006718241465000B0000000079
:102BD0008EE27B80004028218EE200E08EE300E45C
:102BE000000020210046102414440003006718242C
:102BF0001065000B000000008EE200C08EE300C4F0
:102C00008EE400E08EE500E4AEE37B7CAEE57B8005
:102C10008F8200443842004008001B38AF820044D5
:102C20008F8200443442004008001B38AF820044C9
:102C30008F82004434420040AF8200448EE27B8C9D
:102C4000244300012842001514400028AEE37B8C89
:102C50008F82004438420020AF82004408001B38B5
:102C6000AEE07B8C8EE204D43042000110400011B3
:102C7000000000008F42021830420080104000091E
:102C8000000000008F82004434420020AF820044E4
:102C90008F8200442403FFBF0043102408001B362A
:102CA000AF8200448F8200443442006008001B362B
:102CB000AF8200448F82004434420040AF8200441F
:102CC0008EE27B88244300012842138914400005CA
:102CD000AEE37B888F82004438420020AF820044FC
:102CE000AEE07B880C004603000000008FBF00248C
:102CF0008FB0002003E0000827BD002827BDFFB8E3
:102D0000AFBF0044AFB60040AFB5003CAFB4003831
:102D1000AFB30034AFB20030AFB1002CAFB0002879
:102D20008F96006432C200041040000C240200049C
:102D3000AF8200648F420114AEE204E08F82006033
:102D400034420008AF8200608EE2016C2442000130
:102D5000AEE2016C080022F48EE2016C32C2000186
:102D60001040000424020001AF820064080022F435
:102D70000000000032C200021440000C3C050003B9
:102D80003C0400012484535434A5000102C03021C6
:102D900000003821AFA000100C002403AFA00014E5
:102DA0002402FFF8080022F4AF8200648F43022C53
:102DB0008F42010C5062000CAFA000108F42022C19
:102DC00000021080005A10218C420300AFA20020A4
:102DD0008F42022C24070001244200013042003FB0
:102DE00008001B80AF42022C3C0400012484536085
:102DF000AFA000148F46022C8F47010C3C05000346
:102E00000C00240334A5F01F0000382114E0000357
:102E100000000000080022EDAF96006493A200209D
:102E20002443FFFF2C62001110400658000310805D
:102E30003C010001002208218C22541800400008A7
:102E4000000000008FA2002030420FFFAEE20E0C07
:102E50008F82006034420200AF8200608EE201186F
:102E600024420001AEE20118080022E88EE20118B7
:102E70008FA20020240300013C010001003708213B
:102E8000A02383B130420FFFAEE252388F82006040
:102E900034420100AF8200608EE20144244200010E
:102EA000AEE20144080022E88EE201448FA2002035
:102EB0000002120000022502240200011082000517
:102EC00024020002108200092402FFFE08001BC930
:102ED000AFA000108EE204D4AEE40070AEE4007443
:102EE0003442000108001BBDAEE204D48EE304D4DA
:102EF000AEE40070AEE4007400621824AEE304D4C3
:102F00008F8400540004144200041C8200431021EA
:102F100000041CC20043102300041D0200431021C2
:102F200000041D420043102308001BD0AEE20078CD
:102F30003C0400012484536CAFA000148FA6002031
:102F40003C0500030C00240334A500048EE20110AC
:102F500024420001AEE20110080022E88EE20110D6
:102F6000274402120C0022FE240500063049001FEF
:102F7000000920C002E410219442727C30424000DB
:102F80001040000A0097102197430212A443727E5A
:102F90008F43021400971021AC43728002E4182181
:102FA0003402800008001C79A462727C9443727E13
:102FB000974202121462000602E4102100971021C9
:102FC0008C4372808F4202141062009F02E4102131
:102FD0009442727C304280001040002A2406FFFF99
:102FE00000002021000410C002E210219442737CF2
:102FF000304240005440000500803021248400010C
:103000002C8200801440FFF8000410C004C100109E
:10301000000618C0000610C0005718218C63737C8E
:1030200000571021AFA300108C4273803C040001B4
:1030300024845378AFA200148F4702143C05000388
:103040000C00240334A5001308001C903C02080067
:103050009744021200771021A444737E8F44021417
:103060000077102102E31821AC4473803402800001
:10307000A462737C000910C002E2102108001C79D0
:10308000A446727C02E410219445727C08001C2E38
:10309000000510C09443737E97420212146200062A
:1030A000000510C0009710218C4373808F420214DA
:1030B00010620065000510C002E210219445737C87
:1030C000000510C002E210219442737C304280005F
:1030D0001040FFF000971021000520C0009710213C
:1030E0009443737E97420212146200062406FFFF87
:1030F000009710218C4373808F420214106200539A
:103100003C02080000002021000410C002E210214F
:103110009442737C304240005440000500803021CE
:10312000248400012C8200801440FFF8000410C0A9
:1031300004C10023000618C0000910C00057182160
:103140008C63727C00571021AFA300108C427280F8
:103150003C04000124845384AFA200148F4702145E
:103160003C0500030C00240334A5F01708001C9054
:103170003C0208008F43021000B71021AC43777C5B
:103180008F43021400B71021AC4377803C0200014A
:10319000005710218C4283B4244200013C010001FD
:1031A00000370821AC2283B43C03000100771821CA
:1031B0008C6383B402E5102108001C82A443777C51
:1031C0009744021200771021A444737E8F440214A6
:1031D0000077102102E31821AC4473803402800090
:1031E000A462737C000510C002E21021A446737C27
:1031F00000002021000428C002E510219442777CC1
:103200001040FFDC248400012C8200805440FFFA2F
:10321000000428C092E204D81040000624020001F5
:103220008EE304DC012210040062182508001C8FC4
:10323000AEE304DC8F830228240200010122100483
:1032400000621825AF8302283C02080034421000B7
:10325000AFA200188EE206088F4302282442000124
:10326000304A00FF514300FDAFA000108EE2060877
:10327000000210C0005710218FA300188FA4001C5B
:10328000AC43060CAC4406108F8300548F8200546C
:1032900024690032012210232C4200331040006ABE
:1032A0000000582124100008240F000D240D0007F1
:1032B000240C0040240E00018F8701202762380073
:1032C00024E800200102102B504000012768300044
:1032D0008F82012811020004000000008F82012467
:1032E00015020007000010218EE201A40000382121
:1032F00024420001AEE201A408001D088EE201A4F0
:103300008EE40608000420C0008018218EE40430FA
:103310008EE5043400A3282100A3302B0082202155
:1033200000862021ACE40000ACE500048EE2060833
:10333000A4F0000EACEF0018ACEA001C000210C0B4
:103340002442060C02E21021ACE200088EE204C422
:10335000ACE20010AF88012092E24E20144000330E
:10336000240700018EE24E30000210C02442503883
:1033700002E220218C820000144D001F000000009A
:103380008EE34E308EE24E341062001B00000000CF
:103390008C82000424420001AC8200048EE24E3490
:1033A0008EE34E3024420001104C00070000000064
:1033B0008EE24E342442000110620005000000003D
:1033C00008001CF50000000014600005000000006B
:1033D0008F82012824420020AF8201288F82012899
:1033E0008C8200042C42001150400010AC80000080
:1033F00008001D08000000008EE24E30244200014B
:10340000504C0003000010218EE24E302442000197
:10341000AEE24E308EE24E30000210C024425038F0
:1034200002E22021AC8D0000AC8E000454E00006C6
:10343000240B00018F820054012210232C42003300
:103440001440FF9D00000000316300FF24020001D2
:1034500054620078AFA00010AEEA06088F830054D3
:103460008F82005424690032012210232C42003341
:103470001040006100005821240E0008240D0011A6
:10348000240A001224080040240C00018F8301202C
:10349000276238002466002000C2102B5040000133
:1034A000276630008F82012810C20004000000004F
:1034B0008F82012414C20007000000008EE201A4E4
:1034C0000000382124420001AEE201A408001D746E
:1034D0008EE201A48EE20608AC62001C8EE404A019
:1034E0008EE504A42462001CAC620008A46E000EE9
:1034F000AC6D0018AC640000AC6500048EE204C43E
:10350000AC620010AF86012092E24E2014400033DE
:10351000240700018EE24E30000210C024425038D1
:1035200002E220218C820000144A001F00000000EB
:103530008EE34E308EE24E341062001B000000001D
:103540008C82000424420001AC8200048EE24E34DE
:103550008EE34E30244200011048000700000000B6
:103560008EE24E342442000110620005000000008B
:1035700008001D610000000014600005000000004C
:103580008F82012824420020AF8201288F820128E7
:103590008C8200042C42001150400010AC800000CE
:1035A00008001D74000000008EE24E30244200012D
:1035B00050480003000010218EE24E3024420001EA
:1035C000AEE24E308EE24E30000210C0244250383F
:1035D00002E22021AC8A0000AC8C000454E000061A
:1035E000240B00018F820054012210232C4200334F
:1035F0001440FFA600000000316300FF2402000118
:1036000010620022000000003C040001248453905A
:10361000AFA00010AFA000148F8601208F87012477
:103620003C0500090C00240334A5F01108001DA07E
:10363000000000003C0400012484539CAFA000144F
:103640008F8601208F8701243C0500090C0024038C
:1036500034A5F01008001DA0000000003C0400018B
:10366000248453A8AFA000148EE606088F470228D2
:103670003C0500090C00240334A5F00F8EE201ACD8
:1036800024420001AEE201AC8EE201AC8EE20124E4
:1036900024420001AEE2012408001F978EE20124BB
:1036A000274402120C0022FE240500063049001FA8
:1036B000000928C002E510219442727C304280004B
:1036C0001040002F02E510219442727C30424000ED
:1036D0001440001C00B710219443727E97420212DE
:1036E0001462001800B710218C4372808F420214BC
:1036F00054620016AFA2001092E204D810400007F6
:10370000240200018EE304DC0122100400021027D1
:103710000062182408001DC9AEE304DC8F83022870
:10372000012210040002102700621824AF8302282F
:10373000000910C002E218213402C00008001E4E29
:10374000A462727C8F420214AFA20010000910C064
:10375000005710218C42727C3C040001248453B435
:103760003C050003AFA200148F47021034A5F01CE3
:103770000C0024030120302108001E833C020800B5
:1037800000B710219443727E97420212146200190E
:10379000000918C000B710218C4372808F420214B8
:1037A00014620014000918C002E510219447727CCD
:1037B000000720C0009710219443737E00B71021AA
:1037C000A443727E009710218C43738000B71021B0
:1037D000AC43728002E410219443737C02E5102113
:1037E000A443727C02E418213402C00008001E4E7B
:1037F000A462737C02E310219447727C00003021A4
:10380000000720C002E410219442737C0000402194
:10381000304280001440002500E028210060502143
:10382000340BC000009710219443737E974202121C
:103830005462001500E02821009710218C4373800A
:103840008F4202145462001000E02821110000068B
:1038500002E410219443737C000510C002E21021A1
:1038600008001E1AA443737C9443737C02EA10215F
:10387000A443727C000710C002E21021A44B737CA9
:1038800008001E2824060001000510C002E21021D5
:103890009447737C000720C002E410219442737C9B
:1038A000304280001040FFDF2508000130C200FFD9
:1038B0001440002500002021000720C0009710219F
:1038C0009443737E974202121462000F000910C0E5
:1038D000009710218C4373808F4202141462000AF7
:1038E000000910C002E418213402C00015000015C0
:1038F000A462737C000910C002E218213402800027
:1039000008001E4EA462727C005710218C42727C0B
:103910003C040001248453C03C050003AFA2001006
:10392000000710C0005710218C42737C34A5001E84
:10393000012030210C002403AFA2001408001E83D4
:103940003C02080000002021000428C000B710211C
:103950009443777E974202125462002B2484000124
:1039600000B710218C4377808F42021454620026E6
:10397000248400013C020001005710218C4283B4D2
:103980002442FFFF3C01000100370821AC2283B430
:103990003C020001005710218C4283B4008090212A
:1039A0000242102B1040000E24B1777C24B07784A3
:1039B00002F0202102F128210C00249024060008A6
:1039C000263100083C020001005710218C4283B4CC
:1039D000265200010242102B1440FFF52610000869
:1039E0003C040001009720218C8483B42405000846
:1039F000000420C02484777C0C00248802E4202169
:103A000008001E833C0208002C8200801440FFCF77
:103A1000000428C03C02080034422000AFA2001875
:103A20008EE206088F43022824420001304A00F/* $XConsortium: nv_driver.c /main/3 1996/10/28 05:13:37 kaleb $ */
/*
 * Copyright 1996-1997  David J. McKay
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * DAVID J. MCKAY BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
 * OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/*
 * GPL licensing note -- nVidia is allowing a liberal interpretation of
 * the documentation restriction above, to merely say that this nVidia's
 * copyright and disclaimer should be included with all code derived
 * from this source.  -- Jeff Garzik <jgarzik@pobox.com>, 01/Nov/99 
 */

/* Hacked together from mga driver and 3.3.4 NVIDIA driver by Jarno Paananen
   <jpaana@s2.org> */

/* $XFree86: xc/programs/Xserver/hw/xfree86/drivers/nv/nv_setup.c,v 1.18 2002/08/0
5 20:47:06 mvojkovi Exp $ */

#include <linux/delay.h>
#include <linux/pci.h>
#include <linux/pci_ids.h>
#include "nv_type.h"
#include "rivafb.h"
#include "nvreg.h"

#define PFX "rivafb: "

static inline unsigned char MISCin(struct riva_par *par)
{
	return (VGA_RD08(par->riva.PVIO, 0x3cc));
}

static Bool 
riva_is_connected(struct riva_par *par, Bool second)
{
	volatile U032 __iomem *PRAMDAC = par->riva.PRAMDAC0;
	U032 reg52C, reg608;
	Bool present;

	if(second) PRAMDAC += 0x800;

	reg52C = NV_RD32(PRAMDAC, 0x052C);
	reg608 = NV_RD32(PRAMDAC, 0x0608);

	NV_WR32(PRAMDAC, 0x0608, reg608 & ~0x00010000);

	NV_WR32(PRAMDAC, 0x052C, reg52C & 0x0000FEEE);
	mdelay(1); 
	NV_WR32(PRAMDAC, 0x052C, NV_RD32(PRAMDAC, 0x052C) | 1);

	NV_WR32(par->riva.PRAMDAC0, 0x0610, 0x94050140);
	NV_WR32(par->riva.PRAMDAC0, 0x0608, 0x00001000);

	mdelay(1);

	present = (NV_RD32(PRAMDAC, 0x0608) & (1 << 28)) ? TRUE : FALSE;

	NV_WR32(par->riva.PRAMDAC0, 0x0608,
		NV_RD32(par->riva.PRAMDAC0, 0x0608) & 0x0000EFFF);

	NV_WR32(PRAMDAC, 0x052C, reg52C);
	NV_WR32(PRAMDAC, 0x0608, reg608);

	return present;
}

static void
riva_override_CRTC(struct riva_par *par)
{
	printk(KERN_INFO PFX
		"Detected CRTC controller %i being used\n",
		par->SecondCRTC ? 1 : 0);

	if(par->forceCRTC != -1) {
		printk(KERN_INFO PFX
			"Forcing usage of CRTC %i\n", par->forceCRTC);
		par->SecondCRTC = par->forceCRTC;
	}
}

static void
riva_is_second(struct riva_par *par)
{
	if (par->FlatPanel == 1) {
		switch(par->Chipset & 0xffff) {
		case 0x0174:
		case 0x0175:
		case 0x0176:
		case 0x0177:
		case 0x0179:
		case 0x017C:
		case 0x017D:
		case 0x0186:
		case 0x0187:
		/* this might not be a good default for the chips below */
		case 0x0286:
		case 0x028C:
		case 0x0316:
		case 0x0317:
		case 0x031A:
		case 0x031B:
		case 0x031C:
		case 0x031D:
		case 0x031E:
		case 0x031F:
		case 0x0324:
		case 0x0325:
		case 0x0328:
		case 0x0329:
		case 0x032C:
		case 0x032D:
			par->SecondCRTC = TRUE;
			break;
		default:
			par->SecondCRTC = FALSE;
			break;
		}
	} else {
		if(riva_is_connected(par, 0)) {

			if (NV_RD32(par->riva.PRAMDAC0, 0x0000052C) & 0x100)
				par->SecondCRTC = TRUE;
			else
				par->SecondCRTC = FALSE;
		} else 
		if (riva_is_connected(par, 1)) {
			if(NV_RD32(par->riva.PRAMDAC0, 0x0000252C) & 0x100)
				par->SecondCRTC = TRUE;
			else
				par->SecondCRTC = FALSE;
		} else /* default */
			par->SecondCRTC = FALSE;
	}
	riva_override_CRTC(par);
}

unsigned long riva_get_memlen(struct riva_par *par)
{
	RIVA_HW_INST *chip = &par->riva;
	unsigned long memlen = 0;
	unsigned int chipset = par->Chipset;
	struct pci_dev* dev;
	u32 amt;

	switch (chip->Architecture) {
	case NV_ARCH_03:
		if (NV_RD32(chip->PFB, 0x00000000) & 0x00000020) {
			if (((NV_RD32(chip->PMC, 0x00000000) & 0xF0) == 0x20)
			    && ((NV_RD32(chip->PMC, 0x00000000)&0x0F)>=0x02)) {
				/*
				 * SDRAM 128 ZX.
				 */
				switch (NV_RD32(chip->PFB,0x00000000) & 0x03) {
				case 2:
					memlen = 1024 * 4;
					break;
				case 1:
					memlen = 1024 * 2;
					break;
				default:
					memlen = 1024 * 8;
					break;
				}
			} else {
				memlen = 1024 * 8;
			}            
		} else 	{
			/*
			 * SGRAM 128.
			 */
			switch (NV_RD32(chip->PFB, 0x00000000) & 0x00000003) {
			case 0:
				memlen = 1024 * 8;
				break;
			case 2:
				memlen = 1024 * 4;
				break;
			default:
				memlen = 1024 * 2;
				break;
			}
		}        
		break;
	case NV_ARCH_04:
		if (NV_RD32(chip->PFB, 0x00000000) & 0x00000100) {
			memlen = ((NV_RD32(chip->PFB, 0x00000000)>>12)&0x0F) *
				1024 * 2 + 1024 * 2;
		} else {
			switch (NV_RD32(chip->PFB, 0x00000000) & 0x00000003) {
			case 0:
				memlen = 1024 * 32;
				break;
			case 1:
				memlen = 1024 * 4;
				break;
			case 2:
				memlen = 1024 * 8;
				break;
			case 3:
			default:
				memlen = 1024 * 16;
				break;
			}
		}
		break;
	case NV_ARCH_10:
	case NV_ARCH_20:
	case NV_ARCH_30:
		if(chipset == NV_CHIP_IGEFORCE2) {

			dev = pci_get_bus_and_slot(0, 1);
			pci_read_config_dword(dev, 0x7C, &amt);
			pci_dev_put(dev);
			memlen = (((amt >> 6) & 31) + 1) * 1024;
		} else if (chipset == NV_CHIP_0x01F0) {
			dev = pci_get_bus_and_slot(0, 1);
			pci_read_config_dword(dev, 0x84, &amt);
			pci_dev_put(dev);
			memlen = (((amt >> 4) & 127) + 1) * 1024;
		} else {
			switch ((NV_RD32(chip->PFB, 0x0000020C) >> 20) &
				0x000000FF){
			case 0x02:
				memlen = 1024 * 2;
				break;
			case 0x04:
				memlen = 1024 * 4;
				break;
			case 0x08:
				memlen = 1024 * 8;
				break;
			case 0x10:
				memlen = 1024 * 16;
				break;
			case 0x20:
				memlen = 1024 * 32;
				break;
			case 0x40:
				memlen = 1024 * 64;
				break;
			case 0x80:
				memlen = 1024 * 128;
				break;
			default:
				memlen = 1024 * 16;
				break;
			}
		}
		break;
	}
	return memlen;
}

unsigned long riva_get_maxdclk(struct riva_par *par)
{
	RIVA_HW_INST *chip = &par->riva;
	unsigned long dclk = 0;

	switch (chip->Architecture) {
	case NV_ARCH_03:
		if (NV_RD32(chip->PFB, 0x00000000) & 0x00000020) {
			if (((NV_RD32(chip->PMC, 0x00000000) & 0xF0) == 0x20)
			    && ((NV_RD32(chip->PMC,0x00000000)&0x0F) >= 0x02)) {
				/*
				 * SDRAM 128 ZX.
				 */
				dclk = 800000;
			} else {
				dclk = 1000000;
			}            
		} else {
			/*
			 * SGRAM 128.
			 */
			dclk = 1000000;
		} 
		break;
	case NV_ARCH_04:
	case NV_ARCH_10:
	case NV_ARCH_20:
	case NV_ARCH_30:
		switch ((NV_RD32(chip->PFB, 0x00000000) >> 3) & 0x00000003) {
		case 3:
			dclk = 800000;
			break;
		default:
			dclk = 1000000;
			break;
		}
		break;
	}
	return dclk;
}

void
riva_common_setup(struct riva_par *par)
{
	par->riva.EnableIRQ = 0;
	par->riva.PRAMDAC0 =
		(volatile U032 __iomem *)(par->ctrl_base + 0x00680000);
	par->riva.PFB =
		(volatile U032 __iomem *)(par->ctrl_base + 0x00100000);
	par->riva.PFIFO =
		(volatile U032 __iomem *)(par->ctrl_base + 0x00002000);
	par->riva.PGRAPH =
		(volatile U032 __iomem *)(par->ctrl_base + 0x00400000);
	par->riva.PEXTDEV =
		(volatile U032 __iomem *)(par->ctrl_base + 0x00101000);
	par->riva.PTIMER =
		(volatile U032 __iomem *)(par->ctrl_base + 0x00009000);
	par->riva.PMC =
		(volatile U032 __iomem *)(par->ctrl_base + 0x00000000);
	par->riva.FIFO =
		(volatile U032 __iomem *)(par->ctrl_base + 0x00800000);
	par->riva.PCIO0 = par->ctrl_base + 0x00601000;
	par->riva.PDIO0 = par->ctrl_base + 0x00681000;
	par->riva.PVIO = par->ctrl_base + 0x000C0000;

	par->riva.IO = (MISCin(par) & 0x01) ? 0x3D0 : 0x3B0;
	
	if (par->FlatPanel == -1) {
		switch (par->Chipset & 0xffff) {
		case 0x0112:   /* known laptop chips */
		case 0x0174:
		case 0x0175:
		case 0x0176:
		case 0x0177:
		case 0x0179:
		case 0x017C:
		case 0x017D:
		case 0x0186:
		case 0x0187:
		case 0x0286:
		case 0x028C:
		case 0x0316:
		case 0x0317:
		case 0x031A:
		case 0x031B:
		case 0x031C:
		case 0x031D:
		case 0x031E:
		case 0x031F:
		case 0x0324:
		case 0x0325:
		case 0x0328:
		case 0x0329:
		case 0x032C:
		case 0x032D:
			printk(KERN_INFO PFX 
				"On a laptop.  Assuming Digital Flat Panel\n");
			par->FlatPanel = 1;
			break;
		default:
			break;
		}
	}
	
	switch (par->Chipset & 0x0ff0) {
	case 0x0110:
		if (par->Chipset == NV_CHIP_GEFORCE2_GO)
			par->SecondCRTC = TRUE; 
#if defined(__powerpc__)
		if (par->FlatPanel == 1)
			par->SecondCRTC = TRUE;
#endif
		riva_override_CRTC(par);
		break;
	case 0x0170:
	case 0x0180:
	case 0x01F0:
	case 0x0250:
	case 0x0280:
	case 0x0300:
	case 0x0310:
	case 0x0320:
	case 0x0330:
	case 0x0340:
		riva_is_second(par);
		break;
	default:
		break;
	}

	if (par->SecondCRTC) {
		par->riva.PCIO = par->riva.PCIO0 + 0x2000;
		par->riva.PCRTC = par->riva.PCRTC0 + 0x800;
		par->riva.PRAMDAC = par->riva.PRAMDAC0 + 0x800;
		par->riva.PDIO = par->riva.PDIO0 + 0x2000;
	} else {
		par->riva.PCIO = par->riva.PCIO0;
		par->riva.PCRTC = par->riva.PCRTC0;
		par->riva.PRAMDAC = par->riva.PRAMDAC0;
		par->riva.PDIO = par->riva.PDIO0;
	}

	if (par->FlatPanel == -1) {
		/* Fix me, need x86 DDC code */
		par->FlatPanel = 0;
	}
	par->riva.flatPanel = (par->FlatPanel > 0) ? TRUE : FALSE;

	RivaGetConfig(&par->riva, par->Chipset);
}

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        /*
 * Copyright (c) 2001-2004 by David Brownell
 * Copyright (c) 2003 Michal Sojka, for high-speed iso transfers
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the
 * Free Software Foundation; either version 2 of the License, or (at your
 * option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software Foundation,
 * Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

/* this file is part of ehci-hcd.c */

/*-------------------------------------------------------------------------*/

/*
 * EHCI scheduled transaction support:  interrupt, iso, split iso
 * These are called "periodic" transactions in the EHCI spec.
 *
 * Note that for interrupt transfers, the QH/QTD manipulation is shared
 * with the "asynchronous" transaction support (control/bulk transfers).
 * The only real difference is in how interrupt transfers are scheduled.
 *
 * For ISO, we make an "iso_stream" head to serve the same role as a QH.
 * It keeps track of every ITD (or SITD) that's linked, and holds enough
 * pre-calculated schedule data to make appending to the queue be quick.
 */

static int ehci_get_frame (struct usb_hcd *hcd);

/*-------------------------------------------------------------------------*/

/*
 * periodic_next_shadow - return "next" pointer on shadow list
 * @periodic: host pointer to qh/itd/sitd
 * @tag: hardware tag for type of this record
 */
static union ehci_shadow *
periodic_next_shadow(struct ehci_hcd *ehci, union ehci_shadow *periodic,
		__hc32 tag)
{
	switch (hc32_to_cpu(ehci, tag)) {
	case Q_TYPE_QH:
		return &periodic->qh->qh_next;
	case Q_TYPE_FSTN:
		return &periodic->fstn->fstn_next;
	case Q_TYPE_ITD:
		return &periodic->itd->itd_next;
	// case Q_TYPE_SITD:
	default:
		return &periodic->sitd->sitd_next;
	}
}

/* caller must hold ehci->lock */
static void periodic_unlink (struct ehci_hcd *ehci, unsigned frame, void *ptr)
{
	union ehci_shadow	*prev_p = &ehci->pshadow[frame];
	__hc32			*hw_p = &ehci->periodic[frame];
	union ehci_shadow	here = *prev_p;

	/* find predecessor of "ptr"; hw and shadow lists are in sync */
	while (here.ptr && here.ptr != ptr) {
		prev_p = periodic_next_shadow(ehci, prev_p,
				Q_NEXT_TYPE(ehci, *hw_p));
		hw_p = here.hw_next;
		here = *prev_p;
	}
	/* an interrupt entry (at list end) could have been shared */
	if (!here.ptr)
		return;

	/* update shadow and hardware lists ... the old "next" pointers
	 * from ptr may still be in use, the caller updates them.
	 */
	*prev_p = *periodic_next_shadow(ehci, &here,
			Q_NEXT_TYPE(ehci, *hw_p));
	*hw_p = *here.hw_next;
}

/* how many of the uframe's 125 usecs are allocated? */
static unsigned short
periodic_usecs (struct ehci_hcd *ehci, unsigned frame, unsigned uframe)
{
	__hc32			*hw_p = &ehci->periodic [frame];
	union ehci_shadow	*q = &ehci->pshadow [frame];
	unsigned		usecs = 0;

	while (q->ptr) {
		switch (hc32_to_cpu(ehci, Q_NEXT_TYPE(ehci, *hw_p))) {
		case Q_TYPE_QH:
			/* is it in the S-mask? */
			if (q->qh->hw_info2 & cpu_to_hc32(ehci, 1 << uframe))
				usecs += q->qh->usecs;
			/* ... or C-mask? */
			if (q->qh->hw_info2 & cpu_to_hc32(ehci,
					1 << (8 + uframe)))
				usecs += q->qh->c_usecs;
			hw_p = &q->qh->hw_next;
			q = &q->qh->qh_next;
			break;
		// case Q_TYPE_FSTN:
		default:
			/* for "save place" FSTNs, count the relevant INTR
			 * bandwidth from the previous frame
			 */
			if (q->fstn->hw_prev != EHCI_LIST_END(ehci)) {
				ehci_dbg (ehci, "ignoring FSTN cost ...\n");
			}
			hw_p = &q->fstn->hw_next;
			q = &q->fstn->fstn_next;
			break;
		case Q_TYPE_ITD:
			if (q->itd->hw_transaction[uframe])
				usecs += q->itd->stream->usecs;
			hw_p = &q->itd->hw_next;
			q = &q->itd->itd_next;
			break;
		case Q_TYPE_SITD:
			/* is it in the S-mask?  (count SPLIT, DATA) */
			if (q->sitd->hw_uframe & cpu_to_hc32(ehci,
					1 << uframe)) {
				if (q->sitd->hw_fullspeed_ep &
						cpu_to_hc32(ehci, 1<<31))
					usecs += q->sitd->stream->usecs;
				else	/* worst case for OUT start-split */
					usecs += HS_USECS_ISO (188);
			}

			/* ... C-mask?  (count CSPLIT, DATA) */
			if (q->sitd->hw_uframe &
					cpu_to_hc32(ehci, 1 << (8 + uframe))) {
				/* worst case for IN complete-split */
				usecs += q->sitd->stream->c_usecs;
			}

			hw_p = &q->sitd->hw_next;
			q = &q->sitd->sitd_next;
			break;
		}
	}
#ifdef	DEBUG
	if (usecs > 100)
		ehci_err (ehci, "uframe %d sched overrun: %d usecs\n",
			frame * 8 + uframe, usecs);
#endif
	return usecs;
}

/*-------------------------------------------------------------------------*/

static int same_tt (struct usb_device *dev1, struct usb_device *dev2)
{
	if (!dev1->tt || !dev2->tt)
		return 0;
	if (dev1->tt != dev2->tt)
		return 0;
	if (dev1->tt->multi)
		return dev1->ttport == dev2->ttport;
	else
		return 1;
}

#ifdef CONFIG_USB_EHCI_TT_NEWSCHED

/* Which uframe does the low/fullspeed transfer start in?
 *
 * The parameter is the mask of ssplits in "H-frame" terms
 * and this returns the transfer start uframe in "B-frame" terms,
 * which allows both to match, e.g. a ssplit in "H-frame" uframe 0
 * will cause a transfer in "B-frame" uframe 0.  "B-frames" lag
 * "H-frames" by 1 uframe.  See the EHCI spec sec 4.5 and figure 4.7.
 */
static inline unsigned char tt_start_uframe(struct ehci_hcd *ehci, __hc32 mask)
{
	unsigned char smask = QH_SMASK & hc32_to_cpu(ehci, mask);
	if (!smask) {
		ehci_err(ehci, "invalid empty smask!\n");
		/* uframe 7 can't have bw so this will indicate failure */
		return 7;
	}
	return ffs(smask) - 1;
}

static const unsigned char
max_tt_usecs[] = { 125, 125, 125, 125, 125, 125, 30, 0 };

/* carryover low/fullspeed bandwidth that crosses uframe boundries */
static inline void carryover_tt_bandwidth(unsigned short tt_usecs[8])
{
	int i;
	for (i=0; i<7; i++) {
		if (max_tt_usecs[i] < tt_usecs[i]) {
			tt_usecs[i+1] += tt_usecs[i] - max_tt_usecs[i];
			tt_usecs[i] = max_tt_usecs[i];
		}
	}
}

/* How many of the tt's periodic downstream 1000 usecs are allocated?
 *
 * While this measures the bandwidth in terms of usecs/uframe,
 * the low/fullspeed bus has no notion of uframes, so any particular
 * low/fullspeed transfer can "carry over" from one uframe to the next,
 * since the TT just performs downstream transfers in sequence.
 *
 * For example two separate 100 usec transfers can start in the same uframe,
 * and the second one would "carry over" 75 usecs into the next uframe.
 */
static void
periodic_tt_usecs (
	struct ehci_hcd *ehci,
	struct usb_device *dev,
	unsigned frame,
	unsigned short tt_usecs[8]
)
{
	__hc32			*hw_p = &ehci->periodic [frame];
	union ehci_shadow	*q = &ehci->pshadow [frame];
	unsigned char		uf;

	memset(tt_usecs, 0, 16);

	while (q->ptr) {
		switch (hc32_to_cpu(ehci, Q_NEXT_TYPE(ehci, *hw_p))) {
		case Q_TYPE_ITD:
			hw_p = &q->itd->hw_next;
			q = &q->itd->itd_next;
			continue;
		case Q_TYPE_QH:
			if (same_tt(dev, q->qh->dev)) {
				uf = tt_start_uframe(ehci, q->qh->hw_info2);
				tt_usecs[uf] += q->qh->tt_usecs;
			}
			hw_p = &q->qh->hw_next;
			q = &q->qh->qh_next;
			continue;
		case Q_TYPE_SITD:
			if (same_tt(dev, q->sitd->urb->dev)) {
				uf = tt_start_uframe(ehci, q->sitd->hw_uframe);
				tt_usecs[uf] += q->sitd->stream->tt_usecs;
			}
			hw_p = &q->sitd->hw_next;
			q = &q->sitd->sitd_next;
			continue;
		// case Q_TYPE_FSTN:
		default:
			ehci_dbg(ehci, "ignoring periodic frame %d FSTN\n",
					frame);
			hw_p = &q->fstn->hw_next;
			q = &q->fstn->fstn_next;
		}
	}

	carryover_tt_bandwidth(tt_usecs);

	if (max_tt_usecs[7] < tt_usecs[7])
		ehci_err(ehci, "frame %d tt sched overrun: %d usecs\n",
			frame, tt_usecs[7] - max_tt_usecs[7]);
}

/*
 * Return true if the device's tt's downstream bus is available for a
 * periodic transfer of the specified length (usecs), starting at the
 * specified frame/uframe.  Note that (as summarized in section 11.19
 * of the usb 2.0 spec) TTs can buffer multiple transactions for each
 * uframe.
 *
 * The uframe parameter is when the fullspeed/lowspeed transfer
 * should be executed in "B-frame" terms, which is the same as the
 * highspeed ssplit's uframe (which is in "H-frame" terms).  For example
 * a ssplit in "H-frame" 0 causes a transfer in "B-frame" 0.
 * See the EHCI spec sec 4.5 and fig 4.7.
 *
 * This checks if the full/lowspeed bus, at the specified starting uframe,
 * has the specified bandwidth available, according to rules listed
 * in USB 2.0 spec section 11.18.1 fig 11-60.
 *
 * This does not check if the transfer would exceed the max ssplit
 * limit of 16, specified in USB 2.0 spec section 11.18.4 requirement #4,
 * since proper scheduling limits ssplits to less than 16 per uframe.
 */
static int tt_available (
	struct ehci_hcd		*ehci,
	unsigned		period,
	struct usb_device	*dev,
	unsigned		frame,
	unsigned		uframe,
	u16			usecs
)
{
	if ((period == 0) || (uframe >= 7))	/* error */
		return 0;

	for (; frame < ehci->periodic_size; frame += period) {
		unsigned short tt_usecs[8];

		periodic_tt_usecs (ehci, dev, frame, tt_usecs);

		ehci_vdbg(ehci, "tt frame %d check %d usecs start uframe %d in"
			" schedule %d/%d/%d/%d/%d/%d/%d/%d\n",
			frame, usecs, uframe,
			tt_usecs[0], tt_usecs[1], tt_usecs[2], tt_usecs[3],
			tt_usecs[4], tt_usecs[5], tt_usecs[6], tt_usecs[7]);

		if (max_tt_usecs[uframe] <= tt_usecs[uframe]) {
			ehci_vdbg(ehci, "frame %d uframe %d fully scheduled\n",
				frame, uframe);
			return 0;
		}

		/* special case for isoc transfers larger than 125us:
		 * the first and each subsequent fully used uframe
		 * must be empty, so as to not illegally delay
		 * already scheduled transactions
		 */
		if (125 < usecs) {
			int ufs = (usecs / 125);
			int i;
			for (i = uframe; i < (uframe + ufs) && i < 8; i++)
				if (0 < tt_usecs[i]) {
					ehci_vdbg(ehci,
						"multi-uframe xfer can't fit "
						"in frame %d uframe %d\n",
						frame, i);
					return 0;
				}
		}

		tt_usecs[uframe] += usecs;

		carryover_tt_bandwidth(tt_usecs);

		/* fail if the carryover pushed bw past the last uframe's limit */
		if (max_tt_usecs[7] < tt_usecs[7]) {
			ehci_vdbg(ehci,
				"tt unavailable usecs %d frame %d uframe %d\n",
				usecs, frame, uframe);
			return 0;
		}
	}

	return 1;
}

#else

/* return true iff the device's transaction translator is available
 * for a periodic transfer starting at the specified frame, using
 * all the uframes in the mask.
 */
static int tt_no_collision (
	struct ehci_hcd		*ehci,
	unsigned		period,
	struct usb_device	*dev,
	unsigned		frame,
	u32			uf_mask
)
{
	if (period == 0)	/* error */
		return 0;

	/* note bandwidth wastage:  split never follows csplit
	 * (different dev or endpoint) until the next uframe.
	 * calling convention doesn't make that distinction.
	 */
	for (; frame < ehci->periodic_size; frame += period) {
		union ehci_shadow	here;
		__hc32			type;

		here = ehci->pshadow [frame];
		type = Q_NEXT_TYPE(ehci, ehci->periodic [frame]);
		while (here.ptr) {
			switch (hc32_to_cpu(ehci, type)) {
			case Q_TYPE_ITD:
				type = Q_NEXT_TYPE(ehci, here.itd->hw_next);
				here = here.itd->itd_next;
				continue;
			case Q_TYPE_QH:
				if (same_tt (dev, here.qh->dev)) {
					u32		mask;

					mask = hc32_to_cpu(ehci,
							here.qh->hw_info2);
					/* "knows" no gap is needed */
					mask |= mask >> 8;
					if (mask & uf_mask)
						break;
				}
				type = Q_NEXT_TYPE(ehci, here.qh->hw_next);
				here = here.qh->qh_next;
				continue;
			case Q_TYPE_SITD:
				if (same_tt (dev, here.sitd->urb->dev)) {
					u16		mask;

					mask = hc32_to_cpu(ehci, here.sitd
								->hw_uframe);
					/* FIXME assumes no gap for IN! */
					mask |= mask >> 8;
					if (mask & uf_mask)
						break;
				}
				type = Q_NEXT_TYPE(ehci, here.sitd->hw_next);
				here = here.sitd->sitd_next;
				continue;
			// case Q_TYPE_FSTN:
			default:
				ehci_dbg (ehci,
					"periodic frame %d bogus type %d\n",
					frame, type);
			}

			/* collision or error */
			return 0;
		}
	}

	/* no collision */
	return 1;
}

#endif /* CONFIG_USB_EHCI_TT_NEWSCHED */

/*-------------------------------------------------------------------------*/

static int enable_periodic (struct ehci_hcd *ehci)
{
	u32	cmd;
	int	status;

	if (ehci->periodic_sched++)
		return 0;

	/* did clearing PSE did take effect yet?
	 * takes effect only at frame boundaries...
	 */
	status = handshake_on_error_set_halt(ehci, &ehci->regs->status,
					     STS_PSS, 0, 9 * 125);
	if (status)
		return status;

	cmd = ehci_readl(ehci, &ehci->regs->command) | CMD_PSE;
	ehci_writel(ehci, cmd, &ehci->regs->command);
	/* posted write ... PSS happens later */
	ehci_to_hcd(ehci)->state = HC_STATE_RUNNING;

	/* make sure ehci_work scans these */
	ehci->next_uframe = ehci_readl(ehci, &ehci->regs->frame_index)
		% (ehci->periodic_size << 3);
	return 0;
}

static int disable_periodic (struct ehci_hcd *ehci)
{
	u32	cmd;
	int	status;

	if (--ehci->periodic_sched)
		return 0;

	/* did setting PSE not take effect yet?
	 * takes effect only at frame boundaries...
	 */
	status = handshake_on_error_set_halt(ehci, &ehci->regs->status,
					     STS_PSS, STS_PSS, 9 * 125);
	if (status)
		return status;

	cmd = ehci_readl(ehci, &ehci->regs->command) & ~CMD_PSE;
	ehci_writel(ehci, cmd, &ehci->regs->command);
	/* posted write ... */

	ehci->next_uframe = -1;
	return 0;
}

/*-------------------------------------------------------------------------*/

/* periodic schedule slots have iso tds (normal or split) first, then a
 * sparse tree for active interrupt transfers.
 *
 * this just links in a qh; caller guarantees uframe masks are set right.
 * no FSTN support (yet; ehci 0.96+)
 */
static int qh_link_periodic (struct ehci_hcd *ehci, struct ehci_qh *qh)
{
	unsigned	i;
	unsigned	period = qh->period;

	dev_dbg (&qh->dev->dev,
		"link qh%d-%04x/%p start %d [%d/%d us]\n",
		period, hc32_to_cpup(ehci, &qh->hw_info2) & (QH_CMASK | QH_SMASK),
		qh, qh->start, qh->usecs, qh->c_usecs);

	/* high bandwidth, or otherwise every microframe */
	if (period == 0)
		period = 1;

	for (i = qh->start; i < ehci->periodic_size; i += period) {
		union ehci_shadow	*prev = &ehci->pshadow[i];
		__hc32			*hw_p = &ehci->periodic[i];
		union ehci_shadow	here = *prev;
		__hc32			type = 0;

		/* skip the iso nodes at list head */
		while (here.ptr) {
			type = Q_NEXT_TYPE(ehci, *hw_p);
			if (type == cpu_to_hc32(ehci, Q_TYPE_QH))
				break;
			prev = periodic_next_shadow(ehci, prev, type);
			hw_p = &here.qh->hw_next;
			here = *prev;
		}

		/* sorting each branch by period (slow-->fast)
		 * enables sharing interior tree nodes
		 */
		while (here.ptr && qh != here.qh) {
			if (qh->period > here.qh->period)
				break;
			prev = &here.qh->qh_next;
			hw_p = &here.qh->hw_next;
			here = *prev;
		}
		/* link in this qh, unless some earlier pass did that */
		if (qh != here.qh) {
			qh->qh_next = here;
			if (here.qh)
				qh->hw_next = *hw_p;
			wmb ();
			prev->qh = qh;
			*hw_p = QH_NEXT (ehci, qh->qh_dma);
		}
	}
	qh->qh_state = QH_STATE_LINKED;
	qh->xacterrs = 0;
	qh_get (qh);

	/* update per-qh bandwidth for usbfs */
	ehci_to_hcd(ehci)->self.bandwidth_allocated += qh->period
		? ((qh->usecs + qh->c_usecs) / qh->period)
		: (qh->usecs * 8);

	/* maybe enable periodic schedule processing */
	return enable_periodic(ehci);
}

static int qh_unlink_periodic(struct ehci_hcd *ehci, struct ehci_qh *qh)
{
	unsigned	i;
	unsigned	period;

	// FIXME:
	// IF this isn't high speed
	//   and this qh is active in the current uframe
	//   (and overlay token SplitXstate is false?)
	// THEN
	//   qh->hw_info1 |= cpu_to_hc32(1 << 7 /* "ignore" */);

	/* high bandwidth, or otherwise part of every microframe */
	if ((period = qh->period) == 0)
		period = 1;

	for (i = qh->start; i < ehci->periodic_size; i += period)
		periodic_unlink (ehci, i, qh);

	/* update per-qh bandwidth for usbfs */
	ehci_to_hcd(ehci)->self.bandwidth_allocated -= qh->period
		? ((qh->usecs + qh->c_usecs) / qh->period)
		: (qh->usecs * 8);

	dev_dbg (&qh->dev->dev,
		"unlink qh%d-%04x/%p start %d [%d/%d us]\n",
		qh->period,
		hc32_to_cpup(ehci, &qh->hw_info2) & (QH_CMASK | QH_SMASK),
		qh, qh->start, qh->usecs, qh->c_usecs);

	/* qh->qh_next still "live" to HC */
	qh->qh_state = QH_STATE_UNLINK;
	qh->qh_next.ptr = NULL;
	qh_put (qh);

	/* maybe turn off periodic schedule */
	return disable_periodic(ehci);
}

static void intr_deschedule (struct ehci_hcd *ehci, struct ehci_qh *qh)
{
	unsigned	wait;

	qh_unlink_periodic (ehci, qh);

	/* simple/paranoid:  always delay, expecting the HC needs to read
	 * qh->hw_next or finish a writeback after SPLIT/CSPLIT ... and
	 * expect khubd to clean up after any CSPLITs we won't issue.
	 * active high speed queues may need bigger delays...
	 */
	if (list_empty (&qh->qtd_list)
			|| (cpu_to_hc32(ehci, QH_CMASK)
					& qh->hw_info2) != 0)
		wait = 2;
	else
		wait = 55;	/* worst case: 3 * 1024 */

	udelay (wait);
	qh->qh_state = QH_STATE_IDLE;
	qh->hw_next = EHCI_LIST_END(ehci);
	wmb ();
}

/*-------------------------------------------------------------------------*/

static int check_period (
	struct ehci_hcd *ehci,
	unsigned	frame,
	unsigned	uframe,
	unsigned	period,
	unsigned	usecs
) {
	int		claimed;

	/* complete split running into next frame?
	 * given FSTN support, we could sometimes check...
	 */
	if (uframe >= 8)
		return 0;

	/*
	 * 80% periodic == 100 usec/uframe available
	 * convert "usecs we need" to "max already claimed"
	 */
	usecs = 100 - usecs;

	/* we "know" 2 and 4 uframe intervals were rejected; so
	 * for period 0, check _every_ microframe in the schedule.
	 */
	if (unlikely (period == 0)) {
		do {
			for (uframe = 0; uframe < 7; uframe++) {
				claimed = periodic_usecs (ehci, frame, uframe);
				if (claimed > usecs)
					return 0;
			}
		} while ((frame += 1) < ehci->periodic_size);

	/* just check the specified uframe, at that period */
	} else {
		do {
			claimed = periodic_usecs (ehci, frame, uframe);
			if (claimed > usecs)
				return 0;
		} while ((frame += period) < ehci->periodic_size);
	}

	// success!
	return 1;
}

static int check_intr_schedule (
	struct ehci_hcd		*ehci,
	unsigned		frame,
	unsigned		uframe,
	const struct ehci_qh	*qh,
	__hc32			*c_maskp
)
{
	int		retval = -ENOSPC;
	u8		mask = 0;

	if (qh->c_usecs && uframe >= 6)		/* FSTN territory? */
		goto done;

	if (!check_period (ehci, frame, uframe, qh->period, qh->usecs))
		goto done;
	if (!qh->c_usecs) {
		retval = 0;
		*c_maskp = 0;
		goto done;
	}

#ifdef CONFIG_USB_EHCI_TT_NEWSCHED
	if (tt_available (ehci, qh->period, qh->dev, frame, uframe,
				qh->tt_usecs)) {
		unsigned i;

		/* TODO : this may need FSTN for SSPLIT in uframe 5. */
		for (i=uframe+1; i<8 && i<uframe+4; i++)
			if (!check_period (ehci, frame, i,
						qh->period, qh->c_usecs))
				goto done;
			else
				mask |= 1 << i;

		retval = 0;

		*c_maskp = cpu_to_hc32(ehci, mask << 8);
	}
#else
	/* Make sure this tt's buffer is also available for CSPLITs.
	 * We pessimize a bit; probably the typical full speed case
	 * doesn't need the second CSPLIT.
	 *
	 * NOTE:  both SPLIT and CSPLIT could be checked in just
	 * one smart pass...
	 */
	mask = 0x03 << (uframe + qh->gap_uf);
	*c_maskp = cpu_to_hc32(ehci, mask << 8);

	mask |= 1 << uframe;
	if (tt_no_collision (ehci, qh->period, qh->dev, frame, mask)) {
		if (!check_period (ehci, frame, uframe + qh->gap_uf + 1,
					qh->period, qh->c_usecs))
			goto done;
		if (!check_period (ehci, frame, uframe + qh->gap_uf,
					qh->period, qh->c_usecs))
			goto done;
		retval = 0;
	}
#endif
done:
	return retval;
}

/* "first fit" scheduling policy used the first time through,
 * or when the previous schedule slot can't be re-used.
 */
static int qh_schedule(struct ehci_hcd *ehci, struct ehci_qh *qh)
{
	int		status;
	unsigned	uframe;
	__hc32		c_mask;
	unsigned	frame;		/* 0..(qh->period - 1), or NO_FRAME */

	qh_refresh(ehci, qh);
	qh->hw_next = EHCI_LIST_END(ehci);
	frame = qh->start;

	/* reuse the previous schedule slots, if we can */
	if (frame < qh->period) {
		uframe = ffs(hc32_to_cpup(ehci, &qh->hw_info2) & QH_SMASK);
		status = check_intr_schedule (ehci, frame, --uframe,
				qh, &c_mask);
	} else {
		uframe = 0;
		c_mask = 0;
		status = -ENOSPC;
	}

	/* else scan the schedule to find a group of slots such that all
	 * uframes have enough periodic bandwidth available.
	 */
	if (status) {
		/* "normal" case, uframing flexible except with splits */
		if (qh->period) {
			int		i;

			for (i = qh->period; status && i > 0; --i) {
				frame = ++ehci->random_frame % qh->period;
				for (uframe = 0; uframe < 8; uframe++) {
					status = check_intr_schedule (ehci,
							frame, uframe, qh,
							&c_mask);
					if (status == 0)
						break;
				}
			}

		/* qh->period == 0 means every uframe */
		} else {
			frame = 0;
			status = check_intr_schedule (ehci, 0, 0, qh, &c_mask);
		}
		if (status)
			goto done;
		qh->start = frame;

		/* reset S-frame and (maybe) C-frame masks */
		qh->hw_info2 &= cpu_to_hc32(ehci, ~(QH_CMASK | QH_SMASK));
		qh->hw_info2 |= qh->period
			? cpu_to_hc32(ehci, 1 << uframe)
			: cpu_to_hc32(ehci, QH_SMASK);
		qh->hw_info2 |= c_mask;
	} else
		ehci_dbg (ehci, "reused qh %p schedule\n", qh);

	/* stuff into the periodic schedule */
	status = qh_link_periodic (ehci, qh);
done:
	return status;
}

static int intr_submit (
	struct ehci_hcd		*ehci,
	struct urb		*urb,
	struct list_head	*qtd_list,
	gfp_t			mem_flags
) {
	unsigned		epnum;
	unsigned long		flags;
	struct ehci_qh		*qh;
	int			status;
	struct list_head	empty;

	/* get endpoint and transfer/schedule data */
	epnum = urb->ep->desc.bEndpointAddress;

	spin_lock_irqsave (&ehci->lock, flags);

	if (unlikely(!test_bit(HCD_FLAG_HW_ACCESSIBLE,
			&ehci_to_hcd(ehci)->flags))) {
		status = -ESHUTDOWN;
		goto done_not_linked;
	}
	status = usb_hcd_link_urb_to_ep(ehci_to_hcd(ehci), urb);
	if (unlikely(status))
		goto done_not_linked;

	/* get qh and force any scheduling errors */
	INIT_LIST_HEAD (&empty);
	qh = qh_append_tds(ehci, urb, &empty, epnum, &urb->ep->hcpriv);
	if (qh == NULL) {
		status = -ENOMEM;
		goto done;
	}
	if (qh->qh_state == QH_STATE_IDLE) {
		if ((status = qh_schedule (ehci, qh)) != 0)
			goto done;
	}

	/* then queue the urb's tds to the qh */
	qh = qh_append_tds(ehci, urb, qtd_list, epnum, &urb->ep->hcpriv);
	BUG_ON (qh == NULL);

	/* ... update usbfs periodic stats */
	ehci_to_hcd(ehci)->self.bandwidth_int_reqs++;

done:
	if (unlikely(status))
		usb_hcd_unlink_urb_from_ep(ehci_to_hcd(ehci), urb);
done_not_linked:
	spin_unlock_irqrestore (&ehci->lock, flags);
	if (status)
		qtd_list_free (ehci, urb, qtd_list);

	return status;
}

/*-------------------------------------------------------------------------*/

/* ehci_iso_stream ops work with both ITD and SITD */

static struct ehci_iso_stream *
iso_stream_alloc (gfp_t mem_flags)
{
	struct ehci_iso_stream *stream;

	stream = kzalloc(sizeof *stream, mem_flags);
	if (likely (stream != NULL)) {
		INIT_LIST_HEAD(&stream->td_list);
		INIT_LIST_HEAD(&stream->free_list);
		stream->next_uframe = -1;
		stream->refcount = 1;
	}
	return stream;
}

static void
iso_stream_init (
	struct ehci_hcd		*ehci,
	struct ehci_iso_stream	*stream,
	struct usb_device	*dev,
	int			pipe,
	unsigned		interval
)
{
	static const u8 smask_out [] = { 0x01, 0x03, 0x07, 0x0f, 0x1f, 0x3f };

	u32			buf1;
	unsigned		epnum, maxp;
	int			is_input;
	long			bandwidth;

	/*
	 * this might be a "high bandwidth" highspeed endpoint,
	 * as encoded in the ep descriptor's wMaxPacket field
	 */
	epnum = usb_pipeendpoint (pipe);
	is_input = usb_pipein (pipe) ? USB_DIR_IN : 0;
	maxp = usb_maxpacket(dev, pipe, !is_input);
	if (is_input) {
		buf1 = (1 << 11);
	} else {
		buf1 = 0;
	}

	/* knows about ITD vs SITD */
	if (dev->speed == USB_SPEED_HIGH) {
		unsigned multi = hb_mult(maxp);

		stream->highspeed = 1;

		maxp = max_packet(maxp);
		buf1 |= maxp;
		maxp *= multi;

		stream->buf0 = cpu_to_hc32(ehci, (epnum << 8) | dev->devnum);
		stream->buf1 = cpu_to_hc32(ehci, buf1);
		stream->buf2 = cpu_to_hc32(ehci, multi);

		/* usbfs wants to report the average usecs per frame tied up
		 * when transfers on this endpoint are scheduled ...
		 */
		stream->usecs = HS_USECS_ISO (maxp);
		bandwidth = stream->usecs * 8;
		bandwidth /= interval;

	} else {
		u32		addr;
		int		think_time;
		int		hs_transfers;

		addr = dev->ttport << 24;
		if (!ehci_is_TDI(ehci)
				|| (dev->tt->hub !=
					ehci_to_hcd(ehci)->self.root_hub))
			addr |= dev->tt->hub->devnum << 16;
		addr |= epnum << 8;
		addr |= dev->devnum;
		stream->usecs = HS_USECS_ISO (maxp);
		think_time = dev->tt ? dev->tt->think_time : 0;
		stream->tt_usecs = NS_TO_US (think_time + usb_calc_bus_time (
				dev->speed, is_input, 1, maxp));
		hs_transfers = max (1u, (maxp + 187) / 188);
		if (is_input) {
			u32	tmp;

			addr |= 1 << 31;
			stream->c_usecs = stream->usecs;
			stream->usecs = HS_USECS_ISO (1);
			stream->raw_mask = 1;

			/* c-mask as specified in USB 2.0 11.18.4 3.c */
			tmp = (1 << (hs_transfers + 2)) - 1;
			stream->raw_mask |= tmp << (8 + 2);
		} else
			stream->raw_mask = smask_out [hs_transfers - 1];
		bandwidth = stream->usecs + stream->c_usecs;
		bandwidth /= interval << 3;

		/* stream->splits gets created from raw_mask later */
		stream->address = cpu_to_hc32(ehci, addr);
	}
	stream->bandwidth = bandwidth;

	stream->udev = dev;

	stream->bEndpointAddress = is_input | epnum;
	stream->interval = interval;
	stream->maxp = maxp;
}

static void
iso_stream_put(struct ehci_hcd *ehci, struct ehci_iso_stream *stream)
{
	stream->refcount--;

	/* free whenever just a dev->ep reference remains.
	 * not like a QH -- no persistent state (toggle, halt)
	 */
	if (stream->refcount == 1) {
		int		is_in;

		// BUG_ON (!list_empty(&stream->td_list));

		while (!list_empty (&stream->free_list)) {
			struct list_head	*entry;

			entry = stream->free_list.next;
			list_del (entry);

			/* knows about ITD vs SITD */
			if (stream->highspeed) {
				struct ehci_itd		*itd;

				itd = list_entry (entry, struct ehci_itd,
						itd_list);
				dma_pool_free (ehci->itd_pool, itd,
						itd->itd_dma);
			} else {
				struct ehci_sitd	*sitd;

				sitd = list_entry (entry, struct ehci_sitd,
						sitd_list);
				dma_pool_free (ehci->sitd_pool, sitd,
						sitd->sitd_dma);
			}
		}

		is_in = (stream->bEndpointAddress & USB_DIR_IN) ? 0x10 : 0;
		stream->bEndpointAddress &= 0x0f;
		if (stream->ep)
			stream->ep->hcpriv = NULL;

		if (stream->rescheduled) {
			ehci_info (ehci, "ep%d%s-iso rescheduled "
				"%lu times in %lu seconds\n",
				stream->bEndpointAddress, is_in ? "in" : "out",
				stream->rescheduled,
				((jiffies - stream->start)/HZ)
				);
		}

		kfree(stream);
	}
}

static inline struct ehci_iso_stream *
iso_stream_get (struct ehci_iso_stream *stream)
{
	if (likely (stream != NULL))
		stream->refcount++;
	return stream;
}

static struct ehci_iso_stream *
iso_stream_find (struct ehci_hcd *ehci, struct urb *urb)
{
	unsigned		epnum;
	struct ehci_iso_stream	*stream;
	struct usb_host_endpoint *ep;
	unsigned long		flags;

	epnum = usb_pipeendpoint (urb->pipe);
	if (usb_pipein(urb->pipe))
		ep = urb->dev->ep_in[epnum];
	else
		ep = urb->dev->ep_out[epnum];

	spin_lock_irqsave (&ehci->lock, flags);
	stream = ep->hcpriv;

	if (unlikely (stream == NULL)) {
		stream = iso_stream_alloc(GFP_ATOMIC);
		if (likely (stream != NULL)) {
			/* dev->ep owns the initial refcount */
			ep->hcpriv = stream;
			stream->ep = ep;
			iso_stream_init(ehci, stream, urb->dev, urb->pipe,
					urb->interval);
		}

	/* if dev->ep [epnum] is a QH, info1.maxpacket is nonzero */
	} else if (unlikely (stream->hw_info1 != 0)) {
		ehci_dbg (ehci, "dev %s ep%d%s, not iso??\n",
			urb->dev->devpath, epnum,
			usb_pipein(urb->pipe) ? "in" : "out");
		stream = NULL;
	}

	/* caller guarantees an eventual matching iso_stream_put */
	stream = iso_stream_get (stream);

	spin_unlock_irqrestore (&ehci->lock, flags);
	return stream;
}

/*-------------------------------------------------------------------------*/

/* ehci_iso_sched ops can be ITD-only or SITD-only */

static struct ehci_iso_sched *
iso_sched_alloc (unsigned packets, gfp_t mem_flags)
{
	struct ehci_iso_sched	*iso_sched;
	int			size = sizeof *iso_sched;

	size += packets * sizeof (struct ehci_iso_packet);
	iso_sched = kzalloc(size, mem_flags);
	if (likely (iso_sched != NULL)) {
		INIT_LIST_HEAD (&iso_sched->td_list);
	}
	return iso_sched;
}

static inline void
itd_sched_init(
	struct ehci_hcd		*ehci,
	struct ehci_iso_sched	*iso_sched,
	struct ehci_iso_stream	*stream,
	struct urb		*urb
)
{
	unsigned	i;
	dma_addr_t	dma = urb->transfer_dma;

	/* how many uframes are needed for these transfers */
	iso_sched->span = urb->number_of_packets * stream->interval;

	/* figure out per-uframe itd fields that we'll need later
	 * when we fit new itds into the schedule.
	 */
	for (i = 0; i < urb->number_of_packets; i++) {
		struct ehci_iso_packet	*uframe = &iso_sched->packet [i];
		unsigned		length;
		dma_addr_t		buf;
		u32			trans;

		length = urb->iso_frame_desc [i].length;
		buf = dma + urb->iso_frame_desc [i].offset;

		trans = EHCI_ISOC_ACTIVE;
		trans |= buf & 0x0fff;
		if (unlikely (((i + 1) == urb->number_of_packets))
				&& !(urb->transfer_flags & URB_NO_INTERRUPT))
			trans |= EHCI_ITD_IOC;
		trans |= length << 16;
		uframe->transaction = cpu_to_hc32(ehci, trans);

		/* might need to cross a buffer page within a uframe */
		uframe->bufp = (buf & ~(u64)0x0fff);
		buf += length;
		if (unlikely ((uframe->bufp != (buf & ~(u64)0x0fff))))
			uframe->cross = 1;
	}
}

static void
iso_sched_free (
	struct ehci_iso_stream	*stream,
	struct ehci_iso_sched	*iso_sched
)
{
	if (!iso_sched)
		return;
	// caller must hold ehci->lock!
	list_splice (&iso_sched->td_list, &stream->free_list);
	kfree (iso_sched);
}

static int
itd_urb_transaction (
	struct ehci_iso_stream	*stream,
	struct ehci_hcd		*ehci,
	struct urb		*urb,
	gfp_t			mem_flags
)
{
	struct ehci_itd		*itd;
	dma_addr_t		itd_dma;
	int			i;
	unsigned		num_itds;
	struct ehci_iso_sched	*sched;
	unsigned long		flags;

	sched = iso_sched_alloc (urb->number_of_packets, mem_flags);
	if (unlikely (sched == NULL))
		return -ENOMEM;

	itd_sched_init(ehci, sched, stream, urb);

	if (urb->interval < 8)
		num_itds = 1 + (sched->span + 7) / 8;
	else
		num_itds = urb->number_of_packets;

	/* allocate/init ITDs */
	spin_lock_irqsave (&ehci->lock, flags);
	for (i = 0; i < num_itds; i++) {

		/* free_list.next might be cache-hot ... but maybe
		 * the HC caches it too. avoid that issue for now.
		 */

		/* prefer previously-allocated itds */
		if (likely (!list_empty(&stream->free_list))) {
			itd = list_entry (stream->free_list.prev,
					struct ehci_itd, itd_list);
			list_del (&itd->itd_list);
			itd_dma = itd->itd_dma;
		} else {
			spin_unlock_irqrestore (&ehci->lock, flags);
			itd = dma_pool_alloc (ehci->itd_pool, mem_flags,
					&itd_dma);
			spin_lock_irqsave (&ehci->lock, flags);
			if (!itd) {
				iso_sched_free(stream, sched);
				spin_unlock_irqrestore(&ehci->lock, flags);
				return -ENOMEM;
			}
		}

		memset (itd, 0, sizeof *itd);
		itd->itd_dma = itd_dma;
		list_add (&itd->itd_list, &sched->td_list);
	}
	spin_unlock_irqrestore (&ehci->lock, flags);

	/* temporarily store schedule info in hcpriv */
	urb->hcpriv = sched;
	urb->error_count = 0;
	return 0;
}

/*-------------------------------------------------------------------------*/

static inline int
itd_slot_ok (
	struct ehci_hcd		*ehci,
	u32			mod,
	u32			uframe,
	u8			usecs,
	u32			period
)
{
	uframe %= period;
	do {
		/* can't commit more than 80% periodic == 100 usec */
		if (periodic_usecs (ehci, uframe >> 3, uframe & 0x7)
				> (100 - usecs))
			return 0;

		/* we know urb->interval is 2^N uframes */
		uframe += period;
	} while (uframe < mod);
	return 1;
}

static inline int
sitd_slot_ok (
	struct ehci_hcd		*ehci,
	u32			mod,
	struct ehci_iso_stream	*stream,
	u32			uframe,
	struct ehci_iso_sched	*sched,
	u32			period_uframes
)
{
	u32			mask, tmp;
	u32			frame, uf;

	mask = stream->raw_mask << (uframe & 7);

	/* for IN, don't wrap CSPLIT into the next frame */
	if (mask & ~0xffff)
		return 0;

	/* this multi-pass logic is simple, but performance may
	 * suffer when the schedule data isn't cached.
	 */

	/* check bandwidth */
	uframe %= period_uframes;
	do {
		u32		max_used;

		frame = uframe >> 3;
		uf = uframe & 7;

#ifdef CONFIG_USB_EHCI_TT_NEWSCHED
		/* The tt's fullspeed bus bandwidth must be available.
		 * tt_available scheduling guarantees 10+% for control/bulk.
		 */
		if (!tt_available (ehci, period_uframes << 3,
				stream->udev, frame, uf, stream->tt_usecs))
			return 0;
#else
		/* tt must be idle for start(s), any gap, and csplit.
		 * assume scheduling slop leaves 10+% for control/bulk.
		 */
		if (!tt_no_collision (ehci, period_uframes << 3,
				stream->udev, frame, mask))
			return 0;
#endif

		/* check starts (OUT uses more than one) */
		max_used = 100 - stream->usecs;
		for (tmp = stream->raw_mask & 0xff; tmp; tmp >>= 1, uf++) {
			if (periodic_usecs (ehci, frame, uf) > max_used)
				return 0;
		}

		/* for IN, check CSPLIT */
		if (stream->c_usecs) {
			uf = uframe & 7;
			max_used = 100 - stream->c_usecs;
			do {
				tmp = 1 << uf;
				tmp <<= 8;
				if ((stream->raw_mask & tmp) == 0)
					continue;
				if (periodic_usecs (ehci, frame, uf)
						> max_used)
					return 0;
			} while (++uf < 8);
		}

		/* we know urb->interval is 2^N uframes */
		uframe += period_uframes;
	} while (uframe < mod);

	stream->splits = cpu_to_hc32(ehci, stream->raw_mask << (uframe & 7));
	return 1;
}

/*
 * This scheduler plans almost as far into the future as it has actual
 * periodic schedule slots.  (Affected by TUNE_FLS, which defaults to
 * "as small as possible" to be cache-friendlier.)  That limits the size
 * transfers you can stream reliably; avoid more than 64 msec per urb.
 * Also avoid queue depths of less than ehci's worst irq latency (affected
 * by the per-urb URB_NO_INTERRUPT hint, the log2_irq_thresh module parameter,
 * and other factors); or more than about 230 msec total (for portability,
 * given EHCI_TUNE_FLS and the slop).  Or, write a smarter scheduler!
 */

#define SCHEDULE_SLOP	10	/* frames */

static int
iso_stream_schedule (
	struct ehci_hcd		*ehci,
	struct urb		*urb,
	struct ehci_iso_stream	*stream
)
{
	u32			now, start, max, period;
	int			status;
	unsigned		mod = ehci->periodic_size << 3;
	struct ehci_iso_sched	*sched = urb->hcpriv;

	if (sched->span > (mod - 8 * SCHEDULE_SLOP)) {
		ehci_dbg (ehci, "iso request %p too long\n", urb);
		status = -EFBIG;
		goto fail;
	}

	if ((stream->depth + sched->span) > mod) {
		ehci_dbg (ehci, "request %p would overflow (%d+%d>%d)\n",
			urb, stream->depth, sched->span, mod);
		status = -EFBIG;
		goto fail;
	}

	now = ehci_readl(ehci, &ehci->regs->frame_index) % mod;

	/* when's the last uframe this urb could start? */
	max = now + mod;

	/* Typical case: reuse current schedule, stream is still active.
	 * Hopefully there are no gaps from the host falling behind
	 * (irq delays etc), but if there are we'll take the next
	 * slot in the schedule, implicitly assuming URB_ISO_ASAP.
	 */
	if (likely (!list_empty (&stream->td_list))) {
		start = stream->next_uframe;
		if (start < now)
			start += mod;

		/* Fell behind (by up to twice the slop amount)? */
		if (start >= max - 2 * 8 * SCHEDULE_SLOP)
			start += stream->interval * DIV_ROUND_UP(
					max - start, stream->interval) - mod;

		/* Tried to schedule too far into the future? */
		if (unlikely((start + sched->span) >= max)) {
			status = -EFBIG;
			goto fail;
		}
		goto ready;
	}

	/* need to schedule; when's the next (u)frame we could start?
	 * this is bigger than ehci->i_thresh allows; scheduling itself
	 * isn't free, the slop should handle reasonably slow cpus.  it
	 * can also help high bandwidth if the dma and irq loads don't
	 * jump until after the queue is primed.
	 */
	start = SCHEDULE_SLOP * 8 + (now & ~0x07);
	start %= mod;
	stream->next_uframe = start;

	/* NOTE:  assumes URB_ISO_ASAP, to limit complexity/bugs */

	period = urb->interval;
	if (!stream->highspeed)
		period <<= 3;

	/* find a uframe slot with enough bandwidth */
	for (; start < (stream->next_uframe + period); start++) {
		int		enough_space;

		/* check schedule: enough space? */
		if (stream->highspeed)
			enough_space = itd_slot_ok (ehci, mod, start,
					stream->usecs, period);
		else {
			if ((start % 8) >= 6)
				continue;
			enough_space = sitd_slot_ok (ehci, mod, stream,
					start, sched, period);
		}

		/* schedule it here if there's enough bandwidth */
		if (enough_space) {
			stream->next_uframe = start % mod;
			goto ready;
		}
	}

	/* no room in the schedule */
	ehci_dbg (ehci, "iso %ssched full %p (now %d max %d)\n",
		list_empty (&stream->td_list) ? "" : "re",
		urb, now, max);
	status = -ENOSPC;

fail:
	iso_sched_free (stream, sched);
	urb->hcpriv = NULL;
	return status;

ready:
	/* report high speed start in uframes; full speed, in frames */
	urb->start_frame = stream->next_uframe;
	if (!stream->highspeed)
		urb->start_frame >>= 3;
	return 0;
}

/*-------------------------------------------------------------------------*/

static inline void
itd_init(struct ehci_hcd *ehci, struct ehci_iso_stream *stream,
		struct ehci_itd *itd)
{
	int i;

	/* it's been recently zeroed */
	itd->hw_next = EHCI_LIST_END(ehci);
	itd->hw_bufp [0] = stream->buf0;
	itd->hw_bufp [1] = stream->buf1;
	itd->hw_bufp [2] = stream->buf2;

	for (i = 0; i < 8; i++)
		itd->index[i] = -1;

	/* All other fields are filled when scheduling */
}

static inline void
itd_patch(
	struct ehci_hcd		*ehci,
	struct ehci_itd		*itd,
	struct ehci_iso_sched	*iso_sched,
	unsigned		index,
	u16			uframe
)
{
	struct ehci_iso_packet	*uf = &iso_sched->packet [index];
	unsigned		pg = itd->pg;

	// BUG_ON (pg == 6 && uf->cross);

	uframe &= 0x07;
	itd->index [uframe] = index;

	itd->hw_transaction[uframe] = uf->transaction;
	itd->hw_transaction[uframe] |= cpu_to_hc32(ehci, pg << 12);
	itd->hw_bufp[pg] |= cpu_to_hc32(ehci, uf->bufp & ~(u32)0);
	itd->hw_bufp_hi[pg] |= cpu_to_hc32(ehci, (u32)(uf->bufp >> 32));

	/* iso_frame_desc[].offset must be strictly increasing */
	if (unlikely (uf->cross)) {
		u64	bufp = uf->bufp + 4096;

		itd->pg = ++pg;
		itd->hw_bufp[pg] |= cpu_to_hc32(ehci, bufp & ~(u32)0);
		itd->hw_bufp_hi[pg] |= cpu_to_hc32(ehci, (u32)(bufp >> 32));
	}
}

static inline void
itd_link (struct ehci_hcd *ehci, unsigned frame, struct ehci_itd *itd)
{
	/* always prepend ITD/SITD ... only QH tree is order-sensitive */
	itd->itd_next = ehci->pshadow [frame];
	itd->hw_next = ehci->periodic [frame];
	ehci->pshadow [frame].itd = itd;
	itd->frame = frame;
	wmb ();
	ehci->periodic[frame] = cpu_to_hc32(ehci, itd->itd_dma | Q_TYPE_ITD);
}

/* fit urb's itds into the selected schedule slot; activate as needed */
static int
itd_link_urb (
	struct ehci_hcd		*ehci,
	struct urb		*urb,
	unsigned		mod,
	struct ehci_iso_stream	*stream
)
{
	int			packet;
	unsigned		next_uframe, uframe, frame;
	struct ehci_iso_sched	*iso_sched = urb->hcpriv;
	struct ehci_itd		*itd;

	next_uframe = stream->next_uframe % mod;

	if (unlikely (list_empty(&stream->td_list))) {
		ehci_to_hcd(ehci)->self.bandwidth_allocated
				+= stream->bandwidth;
		ehci_vdbg (ehci,
			"schedule devp %s ep%d%s-iso period %d start %d.%d\n",
			urb->dev->devpath, stream->bEndpointAddress & 0x0f,
			(stream->bEndpointAddress & USB_DIR_IN) ? "in" : "out",
			urb->interval,
			next_uframe >> 3, next_uframe & 0x7);
		stream->start = jiffies;
	}
	ehci_to_hcd(ehci)->self.bandwidth_isoc_reqs++;

	/* fill iTDs uframe by uframe */
	for (packet = 0, itd = NULL; packet < urb->number_of_packets; ) {
		if (itd == NULL) {
			/* ASSERT:  we have all necessary itds */
			// BUG_ON (list_empty (&iso_sched->td_list));

			/* ASSERT:  no itds for this endpoint in this uframe */

			itd = list_entry (iso_sched->td_list.next,
					struct ehci_itd, itd_list);
			list_move_tail (&itd->itd_list, &stream->td_list);
			itd->stream = iso_stream_get (stream);
			itd->urb = urb;
			itd_init (ehci, stream, itd);
		}

		uframe = next_uframe & 0x07;
		frame = next_uframe >> 3;

		itd_patch(ehci, itd, iso_sched, packet, uframe);

		next_uframe += stream->interval;
		stream->depth += stream->interval;
		next_uframe %= mod;
		packet++;

		/* link completed itds into the schedule */
		if (((next_uframe >> 3) != frame)
				|| packet == urb->number_of_packets) {
			itd_link (ehci, frame % ehci->periodic_size, itd);
			itd = NULL;
		}
	}
	stream->next_uframe = next_uframe;

	/* don't need that schedule data any more */
	iso_sched_free (stream, iso_sched);
	urb->hcpriv = NULL;

	timer_action (ehci, TIMER_IO_WATCHDOG);
	return enable_periodic(ehci);
}

#define	ISO_ERRS (EHCI_ISOC_BUF_ERR | EHCI_ISOC_BABBLE | EHCI_ISOC_XACTERR)

/* Process and recycle a completed ITD.  Return true iff its urb completed,
 * and hence its completion callback probably added things to the hardware
 * schedule.
 *
 * Note that we carefully avoid recycling this descriptor until after any
 * completion callback runs, so that it won't be reused quickly.  That is,
 * assuming (a) no more than two urbs per frame on this endpoint, and also
 * (b) only this endpoint's completions submit URBs.  It seems some silicon
 * corrupts things if you reuse completed descriptors very quickly...
 */
static unsigned
itd_complete (
	struct ehci_hcd	*ehci,
	struct ehci_itd	*itd
) {
	struct urb				*urb = itd->urb;
	struct usb_iso_packet_descriptor	*desc;
	u32					t;
	unsigned				uframe;
	int					urb_index = -1;
	struct ehci_iso_stream			*stream = itd->stream;
	struct usb_device			*dev;
	unsigned				retval = false;

	/* for each uframe with a packet */
	for (uframe = 0; uframe < 8; uframe++) {
		if (likely (itd->index[uframe] == -1))
			continue;
		urb_index = itd->index[uframe];
		desc = &urb->iso_frame_desc [urb_index];

		t = hc32_to_cpup(ehci, &itd->hw_transaction [uframe]);
		itd->hw_transaction [uframe] = 0;
		stream->depth -= stream->interval;

		/* report transfer status */
		if (unlikely (t & ISO_ERRS)) {
			urb->error_count++;
			if (t & EHCI_ISOC_BUF_ERR)
				desc->status = usb_pipein (urb->pipe)
					? -ENOSR  /* hc couldn't read */
					: -ECOMM; /* hc couldn't write */
			else if (t & EHCI_ISOC_BABBLE)
				desc->status = -EOVERFLOW;
			else /* (t & EHCI_ISOC_XACTERR) */
				desc->status = -EPROTO;

			/* HC need not update length with this error */
			if (!(t & EHCI_ISOC_BABBLE)) {
				desc->actual_length = EHCI_ITD_LENGTH(t);
				urb->actual_length += desc->actual_length;
			}
		} else if (likely ((t & EHCI_ISOC_ACTIVE) == 0)) {
			desc->status = 0;
			desc->actual_length = EHCI_ITD_LENGTH(t);
			urb->actual_length += desc->actual_length;
		} else {
			/* URB was too late */
			desc->status = -EXDEV;
		}
	}

	/* handle completion now? */
	if (likely ((urb_index + 1) != urb->number_of_packets))
		goto done;

	/* ASSERT: it's really the last itd for this urb
	list_for_each_entry (itd, &stream->td_list, itd_list)
		BUG_ON (itd->urb == urb);
	 */

	/* give urb back to the driver; completion often (re)submits */
	dev = urb->dev;
	ehci_urb_done(ehci, urb, 0);
	retval = true;
	urb = NULL;
	(void) disable_periodic(ehci);
	ehci_to_hcd(ehci)->self.bandwidth_isoc_reqs--;

	if (unlikely(list_is_singular(&stream->td_list))) {
		ehci_to_hcd(ehci)->self.bandwidth_allocated
				-= stream->bandwidth;
		ehci_vdbg (ehci,
			"deschedule devp %s ep%d%s-iso\n",
			dev->devpath, stream->bEndpointAddress & 0x0f,
			(stream->bEndpointAddress & USB_DIR_IN) ? "in" : "out");
	}
	iso_stream_put (ehci, stream);

done:
	itd->urb = NULL;
	if (ehci->clock_frame != itd->frame || itd->index[7] != -1) {
		/* OK to recycle this ITD now. */
		itd->stream = NULL;
		list_move(&itd->itd_list, &stream->free_list);
		iso_stream_put(ehci, stream);
	} else {
		/* HW might remember this ITD, so we can't recycle it yet.
		 * Move it to a safe place until a new frame starts.
		 */
		list_move(&itd->itd_list, &ehci->cached_itd_list);
		if (stream->refcount == 2) {
			/* If iso_stream_put() were called here, stream
			 * would be freed.  Instead, just prevent reuse.
			 */
			stream->ep->hcpriv = NULL;
			stream->ep = NULL;
		}
	}
	return retval;
}

/*-------------------------------------------------------------------------*/

static int itd_submit (struct ehci_hcd *ehci, struct urb *urb,
	gfp_t mem_flags)
{
	int			status = -EINVAL;
	unsigned long		flags;
	struct ehci_iso_stream	*stream;

	/* Get iso_stream head */
	stream = iso_stream_find (ehci, urb);
	if (unlikely (stream == NULL)) {
		ehci_dbg (ehci, "can't get iso stream\n");
		return -ENOMEM;
	}
	if (unlikely (urb->interval != stream->interval)) {
		ehci_dbg (ehci, "can't change iso interval %d --> %d\n",
			stream->interval, urb->interval);
		goto done;
	}

#ifdef EHCI_URB_TRACE
	ehci_dbg (ehci,
		"%s %s urb %p ep%d%s len %d, %d pkts %d uframes [%p]\n",
		__func__, urb->dev->devpath, urb,
		usb_pipeendpoint (urb->pipe),
		usb_pipein (urb->pipe) ? "in" : "out",
		urb->transfer_buffer_length,
		urb->number_of_packets, urb->interval,
		stream);
#endif

	/* allocate ITDs w/o locking anything */
	status = itd_urb_transaction (stream, ehci, urb, mem_flags);
	if (unlikely (status < 0)) {
		ehci_dbg (ehci, "can't init itds\n");
		goto done;
	}

	/* schedule ... need to lock */
	spin_lock_irqsave (&ehci->lock, flags);
	if (unlikely(!test_bit(HCD_FLAG_HW_ACCESSIBLE,
			       &ehci_to_hcd(ehci)->flags))) {
		status = -ESHUTDOWN;
		goto done_not_linked;
	}
	status = usb_hcd_link_urb_to_ep(ehci_to_hcd(ehci), urb);
	if (unlikely(status))
		goto done_not_linked;
	status = iso_stream_schedule(ehci, urb, stream);
	if (likely (status == 0))
		itd_link_urb (ehci, urb, ehci->periodic_size << 3, stream);
	else
		usb_hcd_unlink_urb_from_ep(ehci_to_hcd(ehci), urb);
done_not_linked:
	spin_unlock_irqrestore (&ehci->lock, flags);

done:
	if (unlikely (status < 0))
		iso_stream_put (ehci, stream);
	return status;
}

/*-------------------------------------------------------------------------*/

/*
 * "Split ISO TDs" ... used for USB 1.1 devices going through the
 * TTs in USB 2.0 hubs.  These need microframe scheduling.
 */

static inline void
sitd_sched_init(
	struct ehci_hcd		*ehci,
	struct ehci_iso_sched	*iso_sched,
	struct ehci_iso_stream	*stream,
	struct urb		*urb
)
{
	unsigned	i;
	dma_addr_t	dma = urb->transfer_dma;

	/* how many frames are needed for these transfers */
	iso_sched->span = urb->number_of_packets * stream->interval;

	/* figure out per-frame sitd fields that we'll need later
	 * when we fit new sitds into the schedule.
	 */
	for (i = 0; i < urb->number_of_packets; i++) {
		struct ehci_iso_packet	*packet = &iso_sched->packet [i];
		unsigned		length;
		dma_addr_t		buf;
		u32			trans;

		length = urb->iso_frame_desc [i].length & 0x03ff;
		buf = dma + urb->iso_frame_desc [i].offset;

		trans = SITD_STS_ACTIVE;
		if (((i + 1) == urb->number_of_packets)
				&& !(urb->transfer_flags & URB_NO_INTERRUPT))
			trans |= SITD_IOC;
		trans |= length << 16;
		packet->transaction = cpu_to_hc32(ehci, trans);

		/* might need to cross a buffer page within a td */
		packet->bufp = buf;
		packet->buf1 = (buf + length) & ~0x0fff;
		if (packet->buf1 != (buf & ~(u64)0x0fff))
			packet->cross = 1;

		/* OUT uses multiple start-splits */
		if (stream->bEndpointAddress & USB_DIR_IN)
			continue;
		length = (length + 187) / 188;
		if (length > 1) /* BEGIN vs ALL */
			length |= 1 << 3;
		packet->buf1 |= length;
	}
}

static int
sitd_urb_transaction (
	struct ehci_iso_stream	*stream,
	struct ehci_hcd		*ehci,
	struct urb		*urb,
	gfp_t			mem_flags
)
{
	struct ehci_sitd	*sitd;
	dma_addr_t		sitd_dma;
	int			i;
	struct ehci_iso_sched	*iso_sched;
	unsigned long		flags;

	iso_sched = iso_sched_alloc (urb->number_of_packets, mem_flags);
	if (iso_sched == NULL)
		return -ENOMEM;

	sitd_sched_init(ehci, iso_sched, stream, urb);

	/* allocate/init sITDs */
	spin_lock_irqsave (&ehci->lock, flags);
	for (i = 0; i < urb->number_of_packets; i++) {

		/* NOTE:  for now, we don't try to handle wraparound cases
		 * for IN (using sitd->hw_backpointer, like a FSTN), which
		 * means we never need two sitds for full speed packets.
		 */

		/* free_list.next might be cache-hot ... but maybe
		 * the HC caches it too. avoid that issue for now.
		 */

		/* prefer previously-allocated sitds */
		if (!list_empty(&stream->free_list)) {
			sitd = list_entry (stream->free_list.prev,
					 struct ehci_sitd, sitd_list);
			list_del (&sitd->sitd_list);
			sitd_dma = sitd->sitd_dma;
		} else {
			spin_unlock_irqrestore (&ehci->lock, flags);
			sitd = dma_pool_alloc (ehci->sitd_pool, mem_flags,
					&sitd_dma);
			spin_lock_irqsave (&ehci->lock, flags);
			if (!sitd) {
				iso_sched_free(stream, iso_sched);
				spin_unlock_irqrestore(&ehci->lock, flags);
				return -ENOMEM;
			}
		}

		memset (sitd, 0, sizeof *sitd);
		sitd->sitd_dma = sitd_dma;
		list_add (&sitd->sitd_li4FFFF8EE201CC006A1821026398213B
:109180000093202B108000033C02FFF534421000B6
:1091900002629821ADAB00008EE2724C24420001C5
:1091A000304207FFAEE2724C8F4202401040000492
:1091B0000283A0238EE20E1C24420001AEE20E1CAC
:1091C000A3A000271680FD290000000012800024C3
:1091D000000000003C01000100370821AC3483C4CA
:1091E0003C01000100370821AC3383C83C01000179
:1091F00000370821AC3283CC93A20037104000081E
:10920000000000003C020001005710218C4283CC7A
:10921000244200043C01000100370821AC2283CC29
:109220008EE2724C8F43028024420001304207FFDD
:1092300014620006000000008EE201C42442000116
:10924000AEE201C4080034CC8EE201C48EE201BC5F
:1092500024420001AEE201BC080034CC8EE201BC25
:1092600097A4001E2484FFFC008018218EE400C017
:109270008EE500C40000102100A3282100A3302B9C
:109280000082202100862021AEE400C0AEE500C4AB
:109290008FAF002C2402000211E2000F29E200032C
:1092A000144000172402000315E20015000000001E
:1092B0008EE200D08EE300D4246300012C64000110
:1092C00000441021AEE200D0AEE300D48EE200D024
:1092D000080034C68EE300D48EE200D88EE300DCB2
:1092E000246300012C64000100441021AEE200D888
:1092F000AEE300DC8EE200D8080034C68EE300DC6A
:109300008EE200C88EE300CC246300012C640001CF
:1093100000441021AEE200C8AEE300CC8EE200C8EB
:109320008EE300CC8F8300E48F8200E010620003A4
:1093300024630008AF8300E4AF8300E88FBF0070B0
:109340008FBE006C8FB600688FB500648FB400606C
:109350008FB3005C8FB200588FB100548FB00050B3
:1093600003E0000827BD007827BDFFB0AFB500447B
:109370000000A821AFB0003000008021AFBF004C3A
:10938000AFB60048AFB40040AFB3003CAFB2003856
:10939000AFB100348EE204D4241400013042000145
:1093A0001440002A0000B0218F8700E08F8800C49D
:1093B0008F8200E800E220232C8210005040000140
:1093C00024841000000420C2008018218EE400C80C
:1093D0008EE500CC0000102100A3282100A3302B33
:1093E0000082202100862021AEE400C8AEE500CC3A
:1093F0008F8300C83C02000A3442EFFF01032023A0
:109400000044102B104000033C02000A3442F000DC
:1094100000822021008018218EE400C08EE500C467
:109420000000102100A3282100A3302B008220215E
:1094300000862021AEE400C0AEE500C4AF8800C8BD
:10944000AF8700E408003850AF8700E83C02000115
:1094500000571021904283C01040000B0000000014
:109460003C130001027798218E7383C43C110001E4
:10947000023788218E3183C83C12000102579021A7
:10948000080036E88E5283CC8F8300E08F8200E4A0
:1094900010430007000048218F8200E424090001E6
:1094A0008C4300008C440004AFA30018AFA4001C40
:1094B0001520000E3C02FFFF8F8200C4AFA20010F7
:1094C0008F8200C83C04000124845870AFA20014AD
:1094D0008F8600E08F8700E43C0500060C00240323
:1094E00034A5F00008003850000000008FA3001CD5
:1094F0008FB200183073FFFF2673FFFC0062102448
:1095000010400058024088213C0200800062102474
:109510001040000A3C0400408EE2007C244200011E
:10952000AEE2007C8EE2007C8EE201FC244200016F
:10953000AEE201FC0800384A8EE201FC3C06000461
:109540003C0B00013C0A00023C0500103C090008ED
:109550008EE200803C080020340780002442000195
:10956000AEE200808EE200808FA2001C004418242E
:109570001066002100C3102B1440000700000000FB
:10958000106B001100000000106A001500000000C0
:1095900008003592000420421065002300A3102B20
:1095A00014400005000000001069001900000000D0
:1095B00008003592000420421068002100000000DD
:1095C00008003592000420428EE20034244200015B
:1095D000AEE200348EE200340800359200042042EE
:1095E0008EE201EC24420001AEE201EC8EE201ECDD
:1095F00008003592000420428EE201F0244200016E
:10960000AEE201F08EE201F0080035920004204243
:109610008EE201F424420001AEE201F48EE201F494
:1096200008003592000420428EE2003024420001FE
:10963000AEE200308EE20030080035920004204295
:109640008EE201F824420001AEE201F88EE201F858
:1096500000042042108702B70000000008003557C0
:10966000000000003C02000100571021904283B22C
:1096700014400084240200013C03000100771821FB
:10968000906383B31462007F3C0201008E430000AC
:10969000006210241040006F2402FFFF14620005D6
:1096A00024100001964300043402FFFF106200758D
:1096B0000000000092E204D8144000720000000094
:1096C0003C020001005710218C4283B4284200055F
:1096D00010400020000038213C02000100571021FA
:1096E0008C4283B418400016000028219626000002
:1096F000000520C0009710219442777E144600098F
:10970000009710219443778096220002146200058E
:10971000009710219443778296220004506200083B
:10972000240700013C020001005710218C4283B441
:1097300024A5000100A2102A5440FFEE000520C01D
:1097400030E200F		*dev;
	unsigned				retval = false;

	urb_index = sitd->index;
	desc = &urb->iso_frame_desc [urb_index];
	t = hc32_to_cpup(ehci, &sitd->hw_results);

	/* report transfer status */
	if (t & SITD_ERRS) {
		urb->error_count++;
		if (t & SITD_STS_DBE)
			desc->status = usb_pipein (urb->pipe)
				? -ENOSR  /* hc couldn't read */
				: -ECOMM; /* hc couldn't write */
		else if (t & SITD_STS_BABBLE)
			desc->status = -EOVERFLOW;
		else /* XACT, MMF, etc */
			desc->status = -EPROTO;
	} else {
		desc->status = 0;
		desc->actual_length = desc->length - SITD_LENGTH(t);
		urb->actual_length += desc->actual_length;
	}
	stream->depth -= stream->interval << 3;

	/* handle completion now? */
	if ((urb_index + 1) != urb->number_of_packets)
		goto done;

	/* ASSERT: it's really the last sitd for this urb
	list_for_each_entry (sitd, &stream->td_list, sitd_list)
		BUG_ON (sitd->urb == urb);
	 */

	/* give urb back to the driver; completion often (re)submits */
	dev = urb->dev;
	ehci_urb_done(ehci, urb, 0);
	retval = true;
	urb = NULL;
	(void) disable_periodic(ehci);
	ehci_to_hcd(ehci)->self.bandwidth_isoc_reqs--;

	if (list_is_singular(&stream->td_list)) {
		ehci_to_hcd(ehci)->self.bandwidth_allocated
				-= stream->bandwidth;
		ehci_vdbg (ehci,
			"deschedule devp %s ep%d%s-iso\n",
			dev->devpath, stream->bEndpointAddress & 0x0f,
			(stream->bEndpointAddress & USB_DIR_IN) ? "in" : "out");
	}
	iso_stream_put (ehci, stream);
	/* OK to recycle this SITD now that its completion callback ran. */
done:
	sitd->urb = NULL;
	sitd->stream = NULL;
	list_move(&sitd->sitd_list, &stream->free_list);
	iso_stream_put(ehci, stream);

	return retval;
}


static int sitd_submit (struct ehci_hcd *ehci, struct urb *urb,
	gfp_t mem_flags)
{
	int			status = -EINVAL;
	unsigned long		flags;
	struct ehci_iso_stream	*stream;

	/* Get iso_stream head */
	stream = iso_stream_find (ehci, urb);
	if (stream == NULL) {
		ehci_dbg (ehci, "can't get iso stream\n");
		return -ENOMEM;
	}
	if (urb->interval != stream->interval) {
		ehci_dbg (ehci, "can't change iso interval %d --> %d\n",
			stream->interval, urb->interval);
		goto done;
	}

#ifdef EHCI_URB_TRACE
	ehci_dbg (ehci,
		"submit %p dev%s ep%d%s-iso len %d\n",
		urb, urb->dev->devpath,
		usb_pipeendpoint (urb->pipe),
		usb_pipein (urb->pipe) ? "in" : "out",
		urb->transfer_buffer_length);
#endif

	/* allocate SITDs */
	status = sitd_urb_transaction (stream, ehci, urb, mem_flags);
	if (status < 0) {
		ehci_dbg (ehci, "can't init sitds\n");
		goto done;
	}

	/* schedule ... need to lock */
	spin_lock_irqsave (&ehci->lock, flags);
	if (unlikely(!test_bit(HCD_FLAG_HW_ACCESSIBLE,
			       &ehci_to_hcd(ehci)->flags))) {
		status = -ESHUTDOWN;
		goto done_not_linked;
	}
	status = usb_hcd_link_urb_to_ep(ehci_to_hcd(ehci), urb);
	if (unlikely(status))
		goto done_not_linked;
	status = iso_stream_schedule(ehci, urb, stream);
	if (status == 0)
		sitd_link_urb (ehci, urb, ehci->periodic_size << 3, stream);
	else
		usb_hcd_unlink_urb_from_ep(ehci_to_hcd(ehci), urb);
done_not_linked:
	spin_unlock_irqrestore (&ehci->lock, flags);

done:
	if (status < 0)
		iso_stream_put (ehci, stream);
	return status;
}

/*-------------------------------------------------------------------------*/

static void free_cached_itd_list(struct ehci_hcd *ehci)
{
	struct ehci_itd *itd, *n;

	list_for_each_entry_safe(itd, n, &ehci->cached_itd_list, itd_list) {
		struct ehci_iso_stream	*stream = itd->stream;
		itd->stream = NULL;
		list_move(&itd->itd_list, &stream->free_list);
		iso_stream_put(ehci, stream);
	}
}

/*-------------------------------------------------------------------------*/

static void
scan_periodic (struct ehci_hcd *ehci)
{
	unsigned	now_uframe, frame, clock, clock_frame, mod;
	unsigned	modified;

	mod = ehci->periodic_size << 3;

	/*
	 * When running, scan from last scan point up to "now"
	 * else clean up by scanning everything that's left.
	 * Touches as few pages as possible:  cache-friendly.
	 */
	now_uframe = ehci->next_uframe;
	if (HC_IS_RUNNING(ehci_to_hcd(ehci)->state)) {
		clock = ehci_readl(ehci, &ehci->regs->frame_index);
		clock_frame = (clock >> 3) % ehci->periodic_size;
	} else  {
		clock = now_uframe + mod - 1;
		clock_frame = -1;
	}
	if (ehci->clock_frame != clock_frame) {
		free_cached_itd_list(ehci);
		ehci->clock_frame = clock_frame;
	}
	clock %= mod;
	clock_frame = clock >> 3;

	for (;;) {
		union ehci_shadow	q, *q_p;
		__hc32			type, *hw_p;
		unsigned		incomplete = false;

		frame = now_uframe >> 3;

restart:
		/* scan each element in frame's queue for completions */
		q_p = &ehci->pshadow [frame];
		hw_p = &ehci->periodic [frame];
		q.ptr = q_p->ptr;
		type = Q_NEXT_TYPE(ehci, *hw_p);
		modified = 0;

		while (q.ptr != NULL) {
			unsigned		uf;
			union ehci_shadow	temp;
			int			live;

			live = HC_IS_RUNNING (ehci_to_hcd(ehci)->state);
			switch (hc32_to_cpu(ehci, type)) {
			case Q_TYPE_QH:
				/* handle any completions */
				temp.qh = qh_get (q.qh);
				type = Q_NEXT_TYPE(ehci, q.qh->hw_next);
				q = q.qh->qh_next;
				modified = qh_completions (ehci, temp.qh);
				if (unlikely (list_empty (&temp.qh->qtd_list)))
					intr_deschedule (ehci, temp.qh);
				qh_put (temp.qh);
				break;
			case Q_TYPE_FSTN:
				/* for "save place" FSTNs, look at QH entries
				 * in the previous frame for completions.
				 */
				if (q.fstn->hw_prev != EHCI_LIST_END(ehci)) {
					dbg ("ignoring completions from FSTNs");
				}
				type = Q_NEXT_TYPE(ehci, q.fstn->hw_next);
				q = q.fstn->fstn_next;
				break;
			case Q_TYPE_ITD:
				/* If this ITD is still active, leave it for
				 * later processing ... check the next entry.
				 * No need to check for activity unless the
				 * frame is current.
				 */
				if (frame == clock_frame && live) {
					rmb();
					for (uf = 0; uf < 8; uf++) {
						if (q.itd->hw_transaction[uf] &
							    ITD_ACTIVE(ehci))
							break;
					}
					if (uf < 8) {
						incomplete = true;
						q_p = &q.itd->itd_next;
						hw_p = &q.itd->hw_next;
						type = Q_NEXT_TYPE(ehci,
							q.itd->hw_next);
						q = *q_p;
						break;
					}
				}

				/* Take finished ITDs out of the schedule
				 * and process them:  recycle, maybe report
				 * URB completion.  HC won't cache the
				 * pointer for much longer, if at all.
				 */
				*q_p = q.itd->itd_next;
				*hw_p = q.itd->hw_next;
				type = Q_NEXT_TYPE(ehci, q.itd->hw_next);
				wmb();
				modified = itd_complete (ehci, q.itd);
				q = *q_p;
				break;
			case Q_TYPE_SITD:
				/* If this SITD is still active, leave it for
				 * later processing ... check the next entry.
				 * No need to check for activity unless the
				 * frame is current.
				 */
				if (frame == clock_frame && live &&
						(q.sitd->hw_results &
							SITD_ACTIVE(ehci))) {
					incomplete = true;
					q_p = &q.sitd->sitd_next;
					hw_p = &q.sitd->hw_next;
					type = Q_NEXT_TYPE(ehci,
							q.sitd->hw_next);
					q = *q_p;
					break;
				}

				/* Take finished SITDs out of the schedule
				 * and process them:  recycle, maybe report
				 * URB completion.
				 */
				*q_p = q.sitd->sitd_next;
				*hw_p = q.sitd->hw_next;
				type = Q_NEXT_TYPE(ehci, q.sitd->hw_next);
				wmb();
				modified = sitd_complete (ehci, q.sitd);
				q = *q_p;
				break;
			default:
				dbg ("corrupt type %d frame %d shadow %p",
					type, frame, q.ptr);
				// BUG ();
				q.ptr = NULL;
			}

			/* assume completion callbacks modify the queue */
			if (unlikely (modified)) {
				if (likely(ehci->periodic_sched > 0))
					goto restart;
				/* short-circuit this scan */
				now_uframe = clock;
				break;
			}
		}

		/* If we can tell we caught up to the hardware, stop now.
		 * We can't advance our scan without collecting the ISO
		 * transfers that are still pending in this frame.
		 */
		if (incomplete && HC_IS_RUNNING(ehci_to_hcd(ehci)->state)) {
			ehci->next_uframe = now_uframe;
			break;
		}

		// FIXME:  this assumes we won't get lapped when
		// latencies climb; that should be rare, but...
		// detect it, and just go all the way around.
		// FLR might help detect this case, so long as latencies
		// don't exceed periodic_size msec (default 1.024 sec).

		// FIXME:  likewise assumes HC doesn't halt mid-sc43C0500060C00240305
:10A2F00034A5F20008003C5B000000008FA3001CA6
:10A300008FB200183073FFFF2673FFFC0062102429
:10A3100010400058024080213C020080006210245E
:10A320001040000A3C0400408EE2007C2442000100
:10A33000AEE2007C8EE2007C8EE201FC2442000151
:10A34000AEE201FC08003C558EE201FC3C06000434
:10A350003C0B00013C0A00023C0500103C090008CF
:10A360008EE200803C080020340780002442000177
:10A37000AEE200808EE200808FA2001C0044182410
:10A380001066002100C3102B1440000700000000DD
:10A39000106B001100000000106A001500000000A2
:10A3A00008003916000420421065002300A3102B7A
:10A3B00014400005000000001069001900000000B2
:10A3C0000800391600042042106800210000000037
:10A3D00008003916000420428EE2003424420001B5
:10A3E000AEE200348EE20034080039160004204248
:10A3F0008EE201EC24420001AEE201EC8EE201ECBF
:10A4000008003916000420428EE201F024420001C7
:10A41000AEE201F08EE201F008003916000420429D
:10A420008EE201F424420001AEE201F48EE201F476
:10A4300008003916000420428EE200302442000158
:10A44000AEE200308EE200300800391600042042EF
:10A450008EE201F824420001AEE201F88EE201F83A
:10A46000000420421087033E00000000080038DB93
:10A47000000000003C02000100571021904283B20E
:10A4800014400084240200013C03000100771821DD
:10A49000906383B31462007F3C0201008E4300008E
:10A4A000006210241040006F2402FFFF14620005B8
:10A4B00024110001964300043402FFFF106200756E
:10A4C0000000000092E204D8144000720000000076
:10A4D0003C020001005710218C4283B42842000541
:10A4E00010400020000038213C02000100571021DC
:10A4F0008C4283B418400016000028219606000004
:10A50000000520C0009710219442777E1446000970
:10A510000097102194437780960200021462000590
:10A52000009710219443778296020004506200083D
:10A53000240700013C020001005710218C4283B423
:10A5400024A5000100A2102A5440FFEE000520C0FF
:10A5500030E200FF1040030200000000080039A2B2
:10A5600000000000024020210C0022FE240500060D
:10A570003044001F000428C002E510219442727C80
:10A5800030424000144002F600B710219443727E1E
:10A59000960200001462000B000418C000B71021DE
:10A5A000944372809602000214620006000418C0F0
:10A5B00000B71021944372829602000410620035A5
:10A5C000000418C002E310219442727C30428000E3
:10A5D000144002E302E31021944D727C96070000C0
:10A5E000000D28C000B710219442737E0800398402
:10A5F00000003021000420C002E410219443737C49
:10A6000002E41021944D737C3063800014600010CC
:10A61000000D28C000B710219442737E1447FFF547
:10A6200001A0202100B710219443738096020002FC
:10A630005462FFF1000420C000B7102194437382DC
:10A64000960200045462FFEC000420C024060001BE
:10A6500030C200FF104002C200000000080039A212
:10A66000000000009743020296420000146202BC00
:10A67000000000009743020496420002146202B8F0
:10A68000000000009743020696420004146202B4E0
:10A6900000000000924200003A2300013042000115
:10A6A00000431024104000742402FFFF8E030000BA
:10A6B000146200043402FFFF960300041062006F6E
:10A6C000241500023C02000100571021904283B281
:10A6D0001440006A2415000392E204D81440006775
:10A6E000000000003C020001005710218C4283B49E
:10A6F0002842000510400020000038213C020001E3
:10A70000005710218C4283B4184000160000282105
:10A7100096060000000520C0009710219442777E25
:10A720001446000900971021944377809602000296
:10A73000146200050097102194437782960200046A
:10A7400050620008240700013C020001005710215C
:10A750008C4283B424A5000100A2102A5440FFEECD
:10A76000000520C030E200FF14400044241500031F
:10A7700008003C5500000000024020210C0022FE91
:10A78000240500063044001F000428C002E5102103
:10A790009442727C304240001440027100B7102194
:10A7A0009443727E960200001462000B000418C0ED
:10A7B00000B71021944372809602000214620006D2
:10A7C000000418C000B7102194437282960200045E
:10A7D00010620027000418C002E310219442727C2A
:10A7E000304280001440025E02E31021944D727CDE
:10A7F00096070000000D28C000B710219442737E18
:10A8000008003A0900003021000420C002E41021B1
:10A810009443737C02E41021944D737C3063800078
:10A8200014600010000D28C000B710219442737E00
:10A830001447FFF501A0202100B710219443738035
:10A84000960200025462FFF1000420C000B71021FC
:10A8500094437382960200045462FFEC000420C00B
:10A860002406000130C200FF1040023D000000003D
:10A8700008003A1C24150003241500018F420260D1
:10A880000053102B10400036000000008F8300E4BE
:10A890008F8200E01062000324630008AF8300E4AD
:10A8A000AF8300E88EE400C08EE500C4026018218A
:10A8B0000000102100A3282100A3302B00822021BA
:10A8C00000862021AEE400C0AEE500C48EE2005850
:10A8D00024420001AEE200588EE200588EE2007C75
:10A8E00024420001AEE2007C8EE2007C8F8200E018
:10A8F000AFA200108F8200E43C040001248458C001
:10A90000AFA200148FA600188FA7001C3C050006FC
:10A910000C00240334A5F20308003C5B0000000097
:10A920008EE25240AFA200108EE252443C0400017D
:10A93000248458CCAFA200148EE60E108EE70E18B9
:10A940003C0500060C00240334A5F2028EE201C08F
:10A9500024420001AEE201C008003C028EE201C0C8
:10A9600096E204680053102B544000013C1680000E
:10A97000126001CB3C0E001F35CEFFFF3C0FFFF5F0
:10A9800035EF1000241E00408EE2724C8F4302808F
:10A9900024420001304207FF1062019E00000000C7
:10A9A00012C00012000000008EE352408EE25244BA
:10A9B0001062000A26F852448EF45244AFB80024C4
:10A9C0008EE35244000211402442524802E28821A0
:10A9D0002463000108003A85306D00FF8EE201E03B
:10A9E00024420001AEE201E08EE201E08EE30E10AF
:10A9F0008EE20E181062FFCA26F80E188EF40E189A
:10AA00000000B021AFB800248EE30E180002114000
:10AA100024420E2002E2882124630001306D01FFF0
:10AA200096E2046A3042001010400018340281009F
:10AA30009643000C14620015000000003C02000167
:10AA400000571021904283C0144000100000000005
:10AA50009642000EA62200168E4200088E43000485
:10AA60008E4400002673FFFCAE42000CAE4300088B
:10AA7000AE4400049622000E2610000424180001A3
:10AA8000A3B8002F34420200A622000E8E2200003E
:10AA90008E2300043C04000134843800020030217D
:10AAA000306A0007020A8023036410210202102B7F
:10AAB00010400005026A9821020410230362182343
:10AAC0003C02002000438023266200079623000AF0
:10AAD0002418FFF80058C824006A18210079102BA8
:10AAE00010400002032060210060602101801821D5
:10AAF000246200072418FFF800586024026C102B11
:10AB000014400004019328230183282308003AC33A
:10AB100000C3102100D31021004A202301C4102BB0
:10AB200054400001008F202125420040004C102B92
:10AB3000144000350000582194C3000C2402080082
:10AB400054620032AE2600183C020001005710216A
:10AB5000904283C05440002DAE26001824C2001736
:10AB600001C2102B10400013000000003C02FFF552
:10AB70000046102190421017384300062C63000154
:10AB8000384200112C4200010062182510600014A8
:10AB900024C2001001C2102B1040000E0000000063
:10ABA0003C0BFFF501665821956B101008003AF434
:10ABB0002562000E90C20017384300062C63000186
:10ABC000384200112C420001006218251060000577
:10ABD0000160182194CB00102562000E004A582114
:10ABE00001601821246200072418FFF80058582437
:10ABF00000C31021004A202301C4102B1040000282
:10AC000001632823008F2021AE2600183C0200019A
:10AC100000571021904283C00002102B000216C082
:10AC200015600002AFA2004401805821308200016B
:10AC3000104000070000402190880000248400019B
:10AC400001C4102B1040000224A5FFFF008F20211B
:10AC500050A0001200081C022CA20002544000095F
:10AC600024A5FFFF948200002484000201024021F9
:10AC700001C4102B1040000624A5FFFE08003B2154
:10AC8000008F20219082000000021200010240216A
:10AC900014A0FFF22CA2000200081C023102FFFFE8
:10ACA000006240213108FFFF0140282111400011BE
:10ACB000020020212CA200025440000924A5FFFF1D
:10ACC00094820000248400020102402101C4102B60
:10ACD0001040000624A5FFFE08003B38008F20210D
:10ACE00090820000000212000102402114A0FFF235
:10ACF0002CA2000200081C023102FFFF006240216A
:10AD000000081C023102FFFF8F89012000624021F0
:10AD100027623800252300200062102B1440000217
:10AD20003108FFFF276330008F8201281062000482
:10AD3000000000008F8201241462000701402821D6
:10AD40008EE201A40000382124420001AEE201A4F9
:10AD500008003BC98EE201A48E2600008E27000465
:10AD6000000814003448000BAD300008A52B000E7D
:10AD7000AD2800188FB8004400002021029610254D
:10AD800000581025AD22001C00E5102B00E53823EB
:10AD900000C4302300C23023AD260000AD270004DC
:10ADA0008EE204C0AD220010AF83012092E24E205B
:10ADB0001440005F240700012502FFEE2C42000230
:10ADC00014400003240200111502002400000000BA
:10ADD0008EE24E30000210C02442503802E22021A0
:10ADE0008C830000240200121462000F0000000097
:10ADF0008EE34E308EE24E341062000B00000000F5
:10AE00008C82000424420001AC8200048EE24E34A5
:10AE10008EE34E3024420001105E002A0000000044
:10AE200008003BA8000000008EE24E3024420001E2
:10AE3000505E0003000010218EE24E3024420001DB
:10AE4000AEE24E308EE24E30000210C02442503846
:10AE500002E2202108003BC6240200128EE24E309E
:10AE6000000210C02442503802E220218C830000EE
:10AE7000240200071462001F000000008EE34E3021
:10AE80008EE24E341062001B000000008C82000431
:10AE900024420001AC8200048EE24E348EE34E3038
:10AEA00024420001105E0007000000008EE24E34D4
:10AEB00024420001106200050000000008003BB4BD
:10AEC0000000000014600005000000008F820128CF
:10AED00024420020AF8201288F8201288C82000446
:10AEE0002C42001150400012AC80000008003BC909
:10AEF000000000008EE24E3024420001505E00034C
:10AF0000000010218EE24E3024420001AEE24E30AD
:10AF10008EE24E30000210C02442503802E220215E
:10AF200024020007AC82000024020001AC8200046D
:10AF300014E000193C0500063C04000124845890EC
:10AF40008E22001834A5F209AFA200108E22000054
:10AF50008E23000402203021016038210C002403DC
:10AF6000AFA3001493A2002F1040002A34028100E6
:10AF70008E4300048E4400088E45000CA642000C4F
:10AF8000AE430000AE440004AE4500089622001611
:10AF900008003C02A642000E1599000A026A182316
:10AFA0009622000EA623000A34420004A622000EB8
:10AFB0003C01000100370821A02083C008003BFFAE
:10AFC000000098219624000A0083102B54400001B1
:10AFD0000080182124020001A623000A3C01000180
:10AFE00000370821A02283C09622000A004A1821B7
:10AFF0000203802101D0102B54400001020F802158
:10B00000026398230000B0218FB800241660FE5E12
:10B01000AF0D000012600022000000003C010001A2
:10B0200000370821AC3383C43C01000100370821FC
:10B03000AC3083C83C01000100370821AC3283CC1E
:10B0400093A2002F10400008000000003C02000105
:10B05000005710218C4283CC244200043C010001A3
:10B0600000370821AC2283CC8F4302808EE2724CE1
:10B0700014620006000000008EE201C424420001B8
:10B08000AEE201C408003C5B8EE201C48EE201BC6A
:10B0900024420001AEE201BC08003C5B8EE201BC30
:10B0A00097A4001E2484FFFC008018218EE400C0B9
:10B0B0008EE500C40000102100A3282100A3302B3E
:10B0C000008220210086202124020002AEE400C07C
:10B0D000AEE500C412A2000F2AA20003144000171C
:10B0E0002402000316A20015000000008EE200D02A
:10B0F0008EE300D4246300012C640001004410217D
:10B10000AEE200D0AEE300D48EE200D008003C55A1
:10B110008EE300D48EE200D88EE300DC24630001CD
:10B120002C64000100441021AEE200D8AEE300DC44
:10B130008EE200D808003C558EE300DC8EE200C8A9
:10B140008EE300CC246300012C6400010044102134
:10B15000AEE200C8AEE300CC8EE200C88EE300CCC5
:10B160008F8300E48F8200E01062000324630008F4
:10B17000AF8300E4AF8300E88FBF00688FBE006438
:10B180008FB600608FB5005C8FB400588FB3005449
:10B190008FB200508FB1004C8FB0004803E0000820
:10B1A00027BD007027BDFFE0AFBF00188EE30E146F
:10B1B0008EE20E0C10620074000000008EE30E0C94
:10B1C0008EE20E1400622023048200012484020017
:10B1D0008EE30E188EE20E140043102B1440000470
:10B1E000240202008EE30E1408003C7D0043182365
:10B1F0008EE20E188EE30E14004310232443FFFF4B
:10B20000008048210069102A544000010060482154
:10B210008F8701002762300024E800200102102BF4
:10B2200050400001276828008F82010811020004A5
:10B23000000000008F8201041502000700001021A9
:10B240008EE201A80000202124420001AEE201A804
:10B2500008003CBF8EE201A88EE40E1400042140D9
:10B26000008018218EE404608EE5046400A3282188
:10B2700000A3302B0082202100862021ACE40000B6
:10B28000ACE500048EE30E1400091140A4E2000EA8
:10B2900024020002ACE200180003194024630E20CF
:10B2A00002E31021ACE200088EE20E14ACE2001CB6
:10B2B0008EE204CCACE20010AF88010092E204EC14
:10B2C00014400011240400018EE24E2824030040A3
:10B2D0002442000150430003000010218EE24E285A
:10B2E00024420001AEE24E288EE24E28000210C039
:10B2F00024424E3802E2182124020002AC6200000F
:10B3000024020001AC6200041480000E24030040FB
:10B310008EE20E14AFA200108EE20E183C0500075C
:10B32000AFA200148EE60E0C8EE70E103C04000156
:10B33000248458D40C00240334A5F00108003CDD1B
:10B34000000000008EE2050024420001504300038B
:10B35000000010218EE2050024420001AEE205004B
:10B360008EE205000002108000571021AC4905084C
:10B370008EE20E1400491021304201FFAEE20E149D
:10B380008EE30E148EE20E0C146200050000000025
:10B390008F8200602403FDFF00431024AF82006011
:10B3A0008FBF001803E0000827BD002027BDFFE085
:10B3B000AFBF00188EE3523C8EE252381062007428
:10B3C000000000008EE352388EE2523C00622023DF
:10B3D00004820001248401008EE352448EE2523C38
:10B3E0000043102B14400004240201008EE3523C61
:10B3F00008003CFF004318238EE252448EE3523C87
:10B40000004310232443FFFF008048210069102AD5
:10B4100054400001006048218F87010027623000FE
:10B4200024E800200102102B50400001276828006A
:10B430008F82010811020004000000008F820104C5
:10B4400015020007000010218EE201A80000202153
:10B4500024420001AEE201A808003D418EE201A8AD
:10B460008EE4523C00042140008018218EE40470D8
:10B470008EE5047400A3282100A3302B0082202134
:10B4800000862021ACE40000ACE500048EE3523CD1
:10B4900000091140A4E2000E24020003ACE20018EF
:10B4A000000319402463524802E31021ACE2000873
:10B4B0008EE2523CACE2001C8EE204CCACE2001006
:10B4C000AF88010092E204EC144000112404000152
:10B4D0008EE24E2824030040244200015043000322
:10B4E000000010218EE24E2824420001AEE24E28D8
:10B4F0008EE24E28000210C024424E3802E218218B
:10B5000024020003AC62000024020001AC620004CB
:10B510001480000E240300408EE2523CAFA20010C3
:10B520008EE252443C050007AFA200148EE652386A
:10B530008EE752403C040001248458E00C002403B0
:10B5400034A5F01008003D5F000000008EE2050009
:10B550002442000150430003000010218EE2050048
:10B5600024420001AEE205008EE2050000021080D8
:10B5700000571021AC4905088EE2523C00491021C9
:10B58000304200FFAEE2523C8EE3523C8EE2523833
:10B5900014620005000000008F8200602403FEFF9B
:10B5A00000431024AF8200608FBF001803E0000842
:10B5B00027BD00208F8201208EE34E348F8201242C
:10B5C0008F8601282402004024630001506200039A
:10B5D000000010218EE24E3424420001AEE24E34CF
:10B5E0008EE24E348EE44E348EE34E30000210C0B4
:10B5F000244250381483000702E228218F82012858
:10B6000024420020AF8201288F82012808003D9249
:10B61000ACA000008EE24E3424030040244200011E
:10B6200050430003000010218EE24E3424420001FA
:10B63000000210C02442503802E228218CA20004EB
:10B640008F8301280002114000621821AF83012876
:10B65000ACA000008CC200182443FFFE2C62001234
:10B6600010400008000310803C0100010022082166
:10B670008C2258F000400008000000002402000165
:10B68000AEE24E2403E000080000000027BDFFC822
:10B69000AFBF0030AFB5002CAFB40028AFB300246B
:10B6A000AFB20020AFB1001CAFB000188F830128EB
:10B6B0008F820124106202B0000098213C11001F0B
:10B6C0003631FFFF3C12FFF53652100024150012F0
:10B6D000241400408F8C01288F82012824420020EE
:10B6E000AF8201289182001B8F8301282443FFFE33
:10B6F0002C6200121040029C000310803C010001EB
:10B70000002208218C225948004000080000000057
:10B710008F42021830420100104000070000000074
:10B720009583001695820018006218230003140206
:10B7300000431021A58200168D82001C3C0380006E
:10B740003044FFFF004368243C03080000431824F2
:10B7500011A00004AD84001C0004114008003DD875
:10B76000244252480004114024420E2002E2582193
:10B770009562000E3042FFFC10600004A562000ECE
:10B780009584001608003EC0000000008D69001876
:10B7900000004021952A000025290002952700007D
:10B7A0002529000295260000252900029525000084
:10B7B0002529000295240000252900029523000078
:10B7C0002529000295220000252900020147502169
:10B7D000014650210145502101445021014350218F
:10B7E00001425021000A1C023142FFFF0062502139
:10B7F000000A1C023142FFFF0062502196E2046AF7
:10B80000314EFFFF30420002104000440000502142
:10B81000252200140222102B1040001401201821B0
:10B820002405000A000020210223102B54400001AF
:10B8300000721821946200002463000224A5FFFF17
:10B8400014A0FFF90082202100041C023082FFFFB7
:10B8500000622021000414023083FFFF0043102106
:10B860003042FFFF08003E3301425021952A00007C
:10B8700025290002952800002529000295270000AF
:10B8800025290002952600002529000295250000A3
:10B890002529000295230000252900029522000099
:10B8A0002529000295240000252900020148502185
:10B8B00001475021014650210145502101435021AB
:10B8C000014250219522000095230002014450219D
:10B8D0000142502101435021000A1C023142FFFF66
:10B8E00000625021000A1C023142FFFF0062502119
:10B8F0003148FFFF510000013408FFFF8D6200183E
:10B900009443000C2402080054620005A56800104E
:10B910009562000E34420002A562000EA568001078
:10B9200096E2046A000028213042000814400056C4
:10B93000000030218D630018246200240222102BA5
:10B9400010400034246900100229102B54400001DB
:10B950000132482195250000246900140229102B8A
:10B960001040000224A5FFEC01324821952200007E
:10B9700030420FFF144000032529000208003E60FA
:10B98000241300010000982100A030210229102B6F
:10B990005440000101324821912200012529000272
:10B9A00000A228210229102B544000010132482115
:10B9B000252900020229102B5440000101324821A0
:10B9C000952200002529000200A228210229102B1F
:10B9D000544000010132482195220000252900022F
:10B9E00000A228210229102B5440000101324821D5
:10B9F000952200002529000200A228210229102BEF
:10BA000054400001013248219522000008003E996F
:10BA100000A2282194650010946200142469001685
:10BA200030420FFF1440000324A5FFEC08003E8CB9
:10BA3000241300010000982100A03021912300016F
:10BA400025290004952200002529000295240000E4
:10BA50002529000200A3282100A228219522000008
:10BA60009523000200A4282100A2282100A3282158
:10BA700000051C0230A2FFFF0062282100051C0205
:10BA800030A2FFFF0062282196E2046A30420001E2
:10BA90001040001E0000202195820016004E202339
:10BAA0000004140200822021326200FF5040000294
:10BAB000008620210085202100041402008220211C
:10BAC0003084FFFF508000013404FFFF8D620018B6
:10BAD000244300170223102B544000010072182148
:10BAE00090620000384300112C63000138420006C8
:10BAF0002C420001006218251060000400000000C4
:10BB00009562000E34420001A562000E9562000E9F
:10BB1000240A00023042000410400002A564001212
:10BB2000240A00048F88012027623800250900209C
:10BB30000122102B50400001276930008F8201281C
:10BB400011220004000000008F820124152200074A
:10BB5000240400208EE201A4000080212442000180
:10BB6000AEE201A408003F4F8EE201A48EE5724CC4
:10BB70008EE604908EE70494AD0B0008A504000E39
:10BB8000AD0A00180005294000A01821000010216E
:10BB900000E3382100E3202B00C2302100C4302113
:10BBA000AD060000AD0700048EE2724C004D10257A
:10BBB000AD02001C8EE204C4AD020010AF8901206A
:10BBC00092E24E2014400060241000012543FFEE55
:10BBD0002C630002394200112C420001006218253A
:10BBE00010600024000000008EE24E30000210C001
:10BBF0002442503802E220218C8200001455000FAC
:10BC0000000000008EE34E308EE24E341062000BD6
:10BC1000000000008C82000424420001AC82000479
:10BC20008EE24E348EE34E30244200011054002B3D
:10BC30000000000008003F2E000000008EE24E30A1
:10BC40002442000150540003000010218EE24E30C7
:10BC500024420001AEE24E308EE24E30000210C0AF
:10BC60002442503802E220212402000108003F4E05
:10BC7000AC9500008EE24E30000210C024425038D5
:10BC800002E220218C830000240200071462001FBE
:10BC9000000000008EE34E308EE24E341062001B36
:10BCA000000000008C82000424420001AC820004E9
:10BCB0008EE24E348EE34E302442000110540007D1
:10BCC000000000008EE24E342442000110620005A4
:10BCD0000000000008003F3A00000000146000056A
:10BCE000000000008F82012824420020AF8201283A
:10BCF0008F8201288C8200042C42001150400012D7
:10BD0000AC80000008003F4F000000008EE24E3083
:10BD10002442000150540003000010218EE24E30F6
:10BD200024420001AEE24E308EE24E30000210C0DE
:10BD30002442503802E2202124020007AC82000095
:10BD400024020001AC8200041600000D0000000077
:10BD50008F8201203C04000124845938AFA00014D4
:10BD6000AFA200108D86001C8F8701243C050008BF
:10BD70000C00240334A50001080040570000000017
:10BD80008EE2724C24420001304207FF11A00006EF
:10BD9000AEE2724C8EE201D02442FFFFAEE201D04F
:10BDA00008003F6B8EE201D08EE201CC2442FFFFFF
:10BDB000AEE201CC8EE201CC8EE201D82442FFFF3C
:10BDC000AEE201D8080040578EE201D88F4202400F
:10BDD000104000E5000000008EE20E1C244200012D
:10BDE00008004057AEE20E1C9582001EAD82001C7A
:10BDF0008F42024010400072000000008EE20E1CD4
:10BE000024420001AEE20E1C8F4302400043102B7F
:10BE1000144000D5000000008F8301202762380005
:10BE20002466002000C2102B50400001276630001D
:10BE30008F82012810C20004000000008F820124BC
:10BE400014C20007000000008EE201A4000080215F
:10BE500024420001AEE201A408003FDA8EE201A410
:10BE60008EE2724CAC62001C8EE404A88EE504AC39
:10BE70002462001CAC62000824020008A462000EC8
:10BE800024020011AC620018AC640000AC65000430
:10BE90008EE204C4AC620010AF86012092E24E2014
:10BEA00014400034241000018EE24E30000210C015
:10BEB0002442503802E220218C8200001455001FD9
:10BEC000000000008EE34E308EE24E341062001B04
:10BED000000000008C82000424420001AC820004B7
:10BEE0008EE24E348EE34E3024420001105400079F
:10BEF000000000008EE24E34244200011062000572
:10BF00000000000008003FC60000000014600005AB
:10BF1000000000008F82012824420020AF82012807
:10BF20008F8201288C8200042C42001150400011A5
:10BF3000AC80000008003FDA000000008EE24E30C6
:10BF40002442000150540003000010218EE24E30C4
:10BF500024420001AEE24E308EE24E30000210C0AC
:10BF60002442503802E2202124020001AC95000056
:10BF7000AC8200045600000B241000018EE2724CCB
:10BF80003C040001248458A8AFA00014AFA2001004
:10BF90008EE6724C8F4702803C0500090C0024039A
:10BFA00034A5F00856000001AEE00E1C8EE20188B8
:10BFB00024420001AEE20188080040508EE2018870
:10BFC0008F830120276238002466002000C2102BD6
:10BFD00050400001276630008F82012810C2000403
:10BFE000000000008F82012414C20007000000003E
:10BFF0008EE201A40000802124420001AEE201A4EF
:10C00000080040448EE201A48EE2724CAC62001C37
:10C010008EE404A88EE504AC2462001CAC62000827
:10C0200024020008A462000E24020011AC62001871
:10C03000AC640000AC6500048EE204C4AC62001085
:10C04000AF86012092E24E201440003424100001FB
:10C050008EE24E30000210C02442503802E220210D
:10C060008C8200001455001F000000008EE34E304B
:10C070008EE24E341062001B000000008C8200042F
:10C0800024420001AC8200048EE24E348EE34E3036
:10C090002442000110540007000000008EE24E34DC
:10C0A000244200011062000500000000080040303A
:10C0B0000000000014600005000000008F820128CD
:10C0C00024420020AF8201288F8201288C82000444
:10C0D0002C42001150400011AC8000000800404488
:10C0E000000000008EE24E30244200015054000354
:10C0F000000010218EE24E3024420001AEE24E30AC
:10C100008EE24E30000210C02442503802E220215C
:10C1100024020001AC950000AC8200041600000B64
:10C12000000000008EE2724C3C040001248458A8F8
:10C13000AFA00014AFA200108EE6724C8F470280B1
:10C140003C0500090C00240334A5F0088EE20174BC
:10C1500024420001AEE20174080040578EE20174EF
:10C1600024020001AEE24E248F8301288F82012435
:10C170001462FD58000000008FBF00308FB5002C06
:10C180008FB400288FB300248FB200208FB1001C21
:10C190008FB0001803E0000827BD003827BDFFE876
:10C1A000278402082745020024060008AFBF0014B8
:10C1B0000C00249AAFB000100000202124100001D0
:10C1C0002402241FAF900210AF900200AF8002043F
:10C1D000AF8202148F460248240300043C02004050
:10C1E0003C010001AC235CC43C010001AC235CC8F1
:10C1F0003C010001AC205D9C3C010001AC225CC014
:10C200003C010001AC235CC80C005108240500046B
:10C210000C004822000000008EE200003C03FEFFFC
:10C220003463FFFD00431024AEE200003C023C00FA
:10C23000AF82021C3C01000100370821AC3083AC06
:10C240008FBF00148FB0001003E0000827BD001856
:10C2500027BDFFE03C05000834A50400AFBF00186F
:10C26000AFA00010AFA000148F8602003C040001B4
:10C27000248459F00C002403000038218EE202804F
:10C2800024420001AEE202808EE202808F8302002F
:10C290003C023F00006218248FBF00183C020400DB
:10C2A00003E0000827BD002027BDFFD8AFBF002056
:10C2B000AFB1001CAFB000188F9002208EE20214C4
:10C2C0000000382124420001AEE202148EE2021482
:10C2D0003C02030002021024104000273C1104001D
:10C2E0000C00429B000000003C02010002021024EE
:10C2F00010400007000000008EE2021824420001F6
:10C30000AEE202188EE20218080040C63C03FDFFB0
:10C310008EE2021C24420001AEE2021C8EE2021CEC
:10C320003C03FDFF3463FFFF3C0808FF3508FFFFB7
:10C330008EE200003C040001248459FC3C05000806
:10C340000200302100431024AEE200008F82022060
:10C35000000038213C03030000481024004310254E
:10C36000AF820220AFA000100C002403AFA0001485
:10C370000800429600000000021110241040001F27
:10C380003C0240008F830224240214021462000B3A
:10C390003C03FDFF3C04000124845A083C050008CE
:10C3A000AFA00010AFA000148F86022434A5FFFFB9
:10C3B0000C002403000038213C03FDFF8EE2000046
:10C3C0003463FFFF02002021004310240C004E5470
:10C3D000AEE200008EE2022024420001AEE2022022
:10C3E0008EE202208F8202203C0308FF3463FFFFAD
:10C3F0000043102408004295005110250202102429
:10C4000010400142000000008EE2022C2442000194
:10C41000AEE2022C8EE2022C8F8202203C0308FF47
:10C420003463FFFF0043102434420004AF82022033
:10C430008F8300548F8200540800410E2463000251
:10C440008F820054006210232C4200031440FFFC32
:10C45000000000008F8600E08F8400E430C20007F7
:10C4600010400012000000008F8300E42402FFF857
:10C4700000C210241043000D000000008F82005401
:10C480008F8300E014C30009244400508F820054BD
:10C49000008210232C4200511040000400000000D4
:10C4A0008F8200E010C2FFF9000000008F8202209E
:10C4B0003C0308FF3463FFFD00431024AF820220D9
:10C4C0008F8600E030C20007104000032402FFF80E
:10C4D00000C23024AF8600E08F8300C43C02001FFE
:10C4E0003442FFFF246800080048102B104000036E
:10C4F0003C02FFF534421000010240218F8B00C83E
:10C500008F8501208F8401240800414500006021AF
:10C51000276238000082102B504000012764300051
:10C5200010A40010318200FF8C82001838430007ED
:10C530002C6300013842000B2C42000100621825D8
:10C540005060FFF3248400208EE20240240C00019E
:10C5500024420001AEE202408EE202408C8B0008D1
:10C56000318200FF14400065000000003C02000121
:10C5700000571021904283C014400060000000006A
:10C580008F8400E400C41023000218C30462000179
:10C59000246302008F8900C410600005240200019A
:10C5A0001062000900000000080041870000000040
:10C5B0008EE202300120582124420001AEE2023016
:10C5C000080041BC8EE202308EE202343C05000AD3
:10C5D00024420001AEE202348C8B000034A5F0004E
:10C5E0008EE20234012B182300A3102B54400001CB
:10C5F000006518212C62233F144000400000000019
:10C600008F8200E824420008AF8200E88F8200E8B1
:10C610008F8200E40120582124420008AF8200E408
:10C62000080041BC8F8200E48EE202383C03000A1D
:10C6300024420001AEE202388C8400003463F00032
:10C640008EE20238008838230067102B5440000126
:10C6500000E338213C02000334420D400047102B18
:10C660001040000300000000080041BC0080582179
:10C670008F8200E424440008AF8400E48F8400E447
:10C68000108600183C05000A34A5F0003C0A00039F
:10C69000354A0D408EE2007C24420001AEE2007C6F
:10C6A0008C8300008EE2007C0068382300A7102BEA
:10C6B0005440000100E538210147102B5440000789
:10C6C000006058218F8200E424440008AF8400E415
:10C6D0008F8400E41486FFEF00000000148600053C
:10C6E0000000000001205821AF8600E4080041BC92
:10C6F000AF8600E8AF8400E4AF8400E88F8200C812
:10C700003C03000A3463F000004838230067102B14
:10C710005440000100E338213C02000334420D3F45
:10C720000047102B544000070000602101683823A7
:10C730000067102B5440000300E33821080041CF6C
:10C740003C0200033C02000334420D3F0047102B23
:10C7500014400016318200FF144000060000000063
:10C760003C02000100571021904283C01040000F8E
:10C77000000000008EE2023C3C04FDFF8EE300005E
:10C780003484FFFF24420001AEE2023C8EE2023C10
:10C7900024020001006418243C0100010037082134
:10C7A000A02283B80800422CAEE30000AF8B00C883
:10C7B0008F8300C88F8200C43C04000A3484F000D8
:10C7C000006238230087102B5440000100E4382118
:10C7D0003C02000334420D400047102B2CE30001C3
:10C7E0000043102510400008000000008F82022046
:10C7F0003C0308FF3463FFFF004310243C03400068
:10C8000000431025AF8202208F8600E08F8400E471
:10C8100010C4002A000000008EE2007C24420001C7
:10C82000AEE2007C8EE2007C24C2FFF8AF8200E022
:10C830003C0200018C427E303C0300088F8600E001
:10C84000004310241040001D0000000010C4001B15
:10C85000240DFFF83C0A000A354AF0003C0C008029
:10C86000248500082762280050A2000127651800CF
:10C870008C8800048C8200008CA900003103FFFF2B
:10C8800000431021004D102424430010006B102B96
:10C8900054400001006A1821012B102B5440000164
:10C8A000012A482110690002010C1025AC82000405
:10C8B00000A0202114C4FFEB248500088F820220F1
:10C8C0003C0308FF3463FFFF00431024344200029E
:10C8D000AF8202208F8300548F82005408004237B9
:10C8E000246300018F820054006210232C42000256
:10C8F0001440FFFC000000008F8202203C0308FF70
:10C900003463FFFB00431024AF8202200601005570
:10C91000000000008EE2022824420001AEE202285C
:10C920008EE202288F8202203C0308FF3463FFFF5F
:10C930000043102434420004AF8202208F8300544D
:10C940008F82005408004251246300028F820054F9
:10C95000006210232C4200031440FFFC0000000082
:10C960008F8600E030C20007104000120000000077
:10C970008F8300E42402FFF800C210241043000D4E
:10C98000000000008F8200548F8300E014C3000970
:10C99000244400328F820054008210232C42003342
:10C9A00010400004000000008F8200E010C2FFF978
:10C9B000000000008F8202203C0308FF3463FFFD6B
:10C9C00000431024AF8202208F8600E030C20007AF
:10C9D000104000032402FFF800C23024AF8600E0BC
:10C9E000240301F58F8200E800673823000718C090
:10C9F00000431021AF8200E88F8200E8AF8200E49C
:10CA00008EE2007C3C0408FF3484FFFF00471021C5
:10CA1000AEE2007C8F8202203C038000346300027F
:10CA20000044102400431025AF8202208F8300545D
:10CA30008F8200540800428D246300018F820054CD
:10CA4000006210232C4200021440FFFC0000000092
:10CA50008F8202203C0308FF3463FFFB0043102455
:10CA6000AF8202208FBF00208FB1001C8FB0001852
:10CA700003E0000827BD00283C0200018C425CD87E
:10CA800027BDFFD810400012AFBF00203C040001BA
:10CA900024845A143C050008240200013C010001D2
:10CAA00000370821AC2283ACAFA00010AFA0001467
:10CAB0008F86022034A504983C010001AC205CD88C
:10CAC0003C010001AC225CCC0C00240300003821A6
:10CAD0008F4202683C037FFF3463FFFF0043102452
:10CAE000AF4202688EE204D08EE404D42403FFFE39
:10CAF00000431024308400021080011EAEE204D0F6
:10CB00008EE204D42403FFFD00431024AEE204D4DB
:10CB10008F8200443C03060034632000344200202E
:10CB2000AF820044AFA300188EE206088F430228AC
:10CB300024420001304A00FF514300FEAFA0001024
:10CB40008EE20608000210C0005710218FA30018C3
:10CB50008FA4001CAC43060CAC4406108F83005419
:10CB60008F82005424690032012210232C420033AA
:10CB70001040006A0000582124180008240F000DFE
:10CB8000240D0007240C0040240E00018F87012093
:10CB90002762380024E800200102102B50400001D9
:10CBA000276830008F820128110200040000000075
:10CBB0008F82012415020007000010218EE201A4DB
:10CBC0000000282124420001AEE201A40800433DF8
:10CBD0008EE201A48EE40608000420C00080182123
:10CBE0008EE404308EE5043400A3282100A3302B0A
:10CBF0000082202100862021ACE40000ACE5000486
:10CC00008EE20608A4F8000EACEF0018ACEA001C97
:10CC1000000210C02442060C02E21021ACE200081F
:10CC20008EE204C4ACE20010AF88012092E24E20F4
:10CC300014400033240500018EE24E30000210C083
:10CC40002442503802E220218C820000144D001F43
:10CC5000000000008EE34E308EE24E341062001B66
:10CC6000000000008C82000424420001AC82000419
:10CC70008EE24E348EE34E3024420001104C000709
:10CC8000000000008EE24E342442000110620005D4
:10CC9000000000000800432A0000000014600005A6
:10CCA000000000008F82012824420020AF8201286A
:10CCB0008F8201288C8200042C4200115040001009
:10CCC000AC8000000800433D000000008EE24E30C2
:10CCD00024420001504C0003000010218EE24E302F
:10CCE00024420001AEE24E308EE24E30000210C00F
:10CCF0002442503802E22021AC8D0000AC8E0004AA
:10CD000054A00006240B00018F820054012210233E
:10CD10002C4200331440FF9D00000000316300FFEF
:10CD20002402000154620079AFA00010AEEA0608A8
:10CD30008F8300548F820054246900320122102313
:10CD40002C4200331040006100005821240D0008DF
:10CD5000240C00112408001224070040240A0001BA
:10CD60008F830120276238002466002000C2102B28
:10CD700050400001276630008F82012810C2000455
:10CD8000000000008F82012414C200070000000090
:10CD90008EE201A40000282124420001AEE201A499
:10CDA000080043A98EE201A48EE20608AC62001CD2
:10CDB0008EE404A08EE504A42462001CAC6200088A
:10CDC000A46D000EAC6C0018AC640000AC650004EF
:10CDD0008EE204C4AC620010AF86012092E24E20C5
:10CDE00014400033240500018EE24E30000210C0D2
:10CDF0002442503802E220218C8200001448001F97
:10CE0000000000008EE34E308EE24E341062001BB4
:10CE1000000000008C82000424420001AC82000467
:10CE20008EE24E348EE34E3024420001104700075C
:10CE3000000000008EE24E34244200011062000522
:10CE40000000000008004396000000001460000588
:10CE5000000000008F82012824420020AF820128B8
:10CE60008F8201288C8200042C4200115040001057
:10CE7000AC800000080043A9000000008EE24E30A4
:10CE80002442000150470003000010218EE24E3082
:10CE900024420001AEE24E308EE24E30000210C05D
:10CEA0002442503802E22021AC880000AC8A000401
:10CEB00054A00006240B00018F820054012210238D
:10CEC0002C4200331440FFA600000000316300FF35
:10CED0002402000154620003AFA00010080043D6F2
:10CEE000000000003C04000124845A20AFA000147C
:10CEF0008F8601208F8701243C0500090C00240344
:10CF000034A5F011080043D6000000003C040001E5
:10CF100024845A2CAFA000148F8601208F8701240F
:10CF20003C0500090C00240334A5F010080043D68A
:10CF3000000000003C04000124845A38AFA0001413
:10CF40008EE606088F4702283C0500090C002403E2
:10CF500034A5F00F8EE201AC24420001AEE201AC38
:10CF60008EE201AC8EE2015C24420001AEE2015C83
:10CF70008EE2015C8FBF002003E0000827BD00287F
:10CF80003C0200018C425CD827BDFFE01440000D3C
:10CF9000AFBF00183C04000124845A443C0500083B
:10CFA000AFA00010AFA000148F86022034A5049912
:10CFB000240200013C010001AC225CD80C002403D7
:10CFC000000038218EE204D03C03000100771821D4
:10CFD000946383B23442000110600007AEE204D0D3
:10CFE0008F8202203C0308FF3463FFFF00431024BC
:10CFF00034420008AF820220000020210C0052A21F
:10D0000024050004AF4202688FBF001803E0000847
:10D0100027BD00200000000000000000000000000C
:10D020000000000000000000000000000000000000
:10D0300000000000000000000000000000000000F0
:10D0400000000000000000000000000000000000E0
:10D0500000000000000000000000000000000000D0
:10D0600000000000000000000000000000000000C0
:10D0700000000000000000000000000000000000B0
:10D0800000000000000000000000000000000000A0
:10D090000000000000000000000000000000000090
:10D0A0000000000000000000000000000000000080
:10D0B0000000000000000000000000000000000070
:10D0C0000000000000000000000000000000000060
:10D0D0000000000000000000000000000000000050
:10D0E0000000000000000000000000000000000040
:10D0F0000000000000000000000000000000000030
:10D100000000000000000000000000003C120001D0
:10D11000265212003C1400018E945C503C10000119
:10D12000261011203C15C00036B500608E8A000024
:10D130008EB30000026A400B0248000A0200F82188
:10D14000000000000000000D0000000000000000D2
:10D1500000000000000000000000000000000000CF
:10D1600000000000000000000000000000000000BF
:10D1700000000000000000000000000000000000AF
:10D18000000000000000000000000000000000009F
:10D19000000000000000000000000000000000008F
:10D1A000000000000000000000000000000000007F
:10D1B000000000000000000000000000000000006F
:10D1C000000000000000000000000000000000005F
:10D1D000000000000000000000000000000000004F
:10D1E000000000000000000000000000000000003F
:10D1F000000000000000000000000000000000002F
:10D20000000000000000000000000000080014D62C
:10D2100000000000080014D83C0A0001080014D8DF
:10D220003C0A0002080014D800000000080024A6F0
:10D2300000000000080014D83C0A0003080014D8BD
:10D240003C0A000408002F8C00000000080014D8DD
:10D250003C0A000508003CE80000000008003C66AD
:10D2600000000000080014D83C0A0006080014D88A
:10D270003C0A0007080014D800000000080014D879
:10D2800000000000080014D80000000008002A7503
:10D2900000000000080014D83C0A000B080014D855
:10D2A0003C0A000C080014D83C0A000D0800237A40
:10D2B000000000000800233900000000080014D816
:10D2C0003C0A000E08001B3C00000000080024A4DB
:10D2D00000000000080014D83C0A000F080040A716
:10D2E000000000000800409100000000080014D871
:10D2F0003C0A0010080014EE00000000080014D8DA
:10D300003C0A0011080014D83C0A0012080014D886
:10D310003C0A0013000000000000000000000000B4
:10D3200000000000000000000000000000000000FD
:10D3300000000000000000000000000000000000ED
:10D3400000000000000000000000000000000000DD
:10D3500000000000000000000000000000000000CD
:10D3600000000000000000000000000000000000BD
:10D3700000000000000000000000000000000000AD
:10D38000000000000000000000000000000000009D
:10D39000000000000000000000000000000000008D
:10D3A000000000000000000000000000000000007D
:10D3B000000000000000000000000000000000006D
:10D3C000000000000000000000000000000000005D
:10D3D000000000000000000000000000000000004D
:10D3E000000000000000000000000000000000003D
:10D3F000000000000000000000000000000000002D
:10D400000000000000000000000000003C030001DC
:10D4100034633800240500802404001F2406FFFF25
:10D4200024020001AF80021CAF820200AF82022002
:10D4300003631021AF8200C003631021AF8200C4D8
:10D4400003631021AF8200C827623800AF8200D08A
:10D4500027623800AF8200D427623800AF8200D83C
:10D4600027621800AF8200E027621800AF8200E454
:10D4700027621800AF8200E827621000AF8200F038
:10D4800027621000AF8200F427621000AF8200F81C
:10D49000ACA000002484FFFF1486FFFD24A5000437
:10D4A0008F8300403C02F000006218243C025000D0
:10D4B0001062000C0043102B144000063C02600078
:10D4C0003C024000106200082402080008004539B0
:10D4D0000000000010620004240208000800453922
:10D4E00000000000240207003C010001AC225CDCCB
:10D4F00003E000080000000027BDFFD8AFBF0024F4
:10D50000AFB000208F8300548F8200543C01000193
:10D51000AC205CC408004545246300648F8200543D
:10D52000006210232C4200651440FFFC0000000044
:10D530000C004D71000000002404000100002821AF
:10D5400027A60018340280000C00498EA7A20018FC
:10D550008F8300548F820054080045562463006472
:10D560008F820054006210232C4200651440FFFC9F
:10D5700024040001240500010C00494C27A60018D2
:10D580008F8300548F820054080045622463006436
:10D590008F820054006210232C4200651440FFFC6F
:10D5A00024040001240500010C00494C27A60018A2
:10D5B0008F8300548F8200540800456E24630064FA
:10D5C0008F820054006210232C4200651440FFFC3F
:10D5D000240400013C06000124C65DA00C00494C57
:10D5E000240500028F8300548F8200540800457B7D
:10D5F000246300648F820054006210232C42006573
:10D600001440FFFC24040001240500033C10000129
:10D6100026105DA20C00494C0200302197A600188C
:10D620003C07000194E75DA03C04000124845AB04B
:10D63000AFA00014960200003C05000D34A50100C7
:10D640000C002403AFA2001097A200181040004C59
:10D6500024036040960200003042FFF01443000AA9
:10D66000240200203C03000194635DA05462000981
:10D6700024027830240200033C010001AC225CC487
:10D68000080045AC240200053C03000194635DA042
:10D69000240278301462000F240300103C020001C1
:10D6A00094425DA23042FFF01443000A24020003BA
:10D6B0003C010001AC225CC4240200063C010001D4
:10D6C000AC225DB03C010001AC225DBC080045E627
:10D6D0003C09FFF03C0200018C425CC43C030001A9
:10D6E00094635DA0344200013C010001AC225CC4A3
:10D6F000240200151462000F000000003C0200012B
:10D7000094425DA23042FFF03843F4202C630001C4
:10D710003842F4302C4200010062182510600005E8
:10D72000240200033C010001AC225DBC080045E678
:10D730003C09FFF03C03000194635DA024027810D3
:10D740001462000B240200023C02000194425DA21C
:10D750003042FFF0144000062402000224020004BC
:10D760003C010001AC225DBC080045E63C09FFF02D
:10D770003C010001AC225DBC080045E63C09FFF01D
:10D780003C0200018C425CC4240300013C01000106
:10D79000AC235DBC344200043C010001AC225CC4FB
:10D7A0003C09FFF03529BDC03C0600018CC65CC4B5
:10D7B0003C04000124845AB0240200013C01000111
:10D7C000AC225CCC8F8200543C0700018CE75DBC2E
:10D7D0003C03000194635DA03C08000195085DA234
:10D7E0003C05000D34A501003C010001AC205CC8E3
:10D7F000004910213C010001AC225DACAFA3001038
:10D800000C002403AFA800148FBF00248FB00020A9
:10D8100003E0000827BD002827BDFFE83C05000104
:10D820008CA55CC8240600042402000114A2001484
:10D83000AFBF00103C0200018C427E3C30428000B1
:10D84000104000053C04000F3C0300018C635DBCEC
:10D8500008004617348442403C0400043C030001A5
:10D860008C635DBC348493E02402000514620016CE
:10D87000000000003C04003D0800462F34840900ED
:10D880003C0200018C427E3830428000104000058E
:10D890003C04001E3C0300018C635DBC0800462A6A
:10D8A000348484803C04000F3C0300018C635DBC25
:10D8B000348442402402000514620003000000008A
:10D8C0003C04007A348412003C0200018C425DACBE
:10D8D0008F83005400441021004310230044102B78
:10D8E00014400037000000003C0200018C425CD074
:10D8F00014400033000000003C01000110C000256E
:10D90000AC205CE03C0900018D295CC424070001C7
:10D910003C0440003C08000125087E3C250AFFFC31
:10D920000005284214A0000224C6FFFF24050008B9
:10D9300000A91024104000100000000014A70008E7
:10D94000000000008D020000004410241040000A76
:10D95000000000003C0100010800465BAC255CE0D3
:10D960008D4200000044102410400003000000001D
:10D970003C010001AC275CE03C0200018C425CE011
:10D980000006182B2C420001004310245440FFE5F0
:10D99000000528428F8200543C0300018C635CE048
:10D9A0003C010001AC225DAC1060002A24020001A1
:10D9B0003C010001AC255CC83C010001AC225CCC00
:10D9C0003C0200018C425CE010400022000000009C
:10D9D0003C0200018C425CCC1040000A2402000191
:10D9E0003C010001AC205CCC3C0100010037082167
:10D9F000AC2283AC3C010001AC205D4C3C01000139
:10DA0000AC225D043C030001007718218C6383ACD9
:10DA10002402000810620005240200010C00469553
:10DA20000000000008004692000000003C030001D6
:10DA30008C635CC8106200072402000E3C030001E6
:10DA40008C637DD010620003000000000C004E5477
:10DA50008F8402208FBF001003E0000827BD00184C
:10DA600027BDFFE03C02FDFFAFBF00188EE30000C2
:10DA70003C0500018CA55CC83C0400018C845CF072
:10DA80003442FFFF0062182414A40008AEE3000033
:10DA90003C030001007718218C6383AC3C02000139
:10DAA0008C425CF410620008000000003C0200019F
:10DAB000005710218C4283AC3C010001AC255CF086
:10DAC0003C010001AC225CF43C0300018C635CC8A7
:10DAD00024020002106201692C620003104000055C
:10DAE0002402000110620008000000000800481C29
:10DAF0000000000024020004106200B124020001B2
:10DB00000800481D000000003C02000100571021E1
:10DB10008C4283AC2443FFFF2C6200081040015A62
:10DB2000000310803C010001002208218C225AC809
:10DB300000400008000000003C0300018C635DBC55
:10DB40002402000514620014000000003C020001E1
:10DB50008C425CD41040000A240200030C004822CE
:10DB600000000000240200023C01000100370821EF
:10DB7000AC2283AC3C010001080046E0AC205CD440
:10DB80003C01000100370821AC2283AC3C010001BC
:10DB90000800481FAC205C600C0048220000000018
:10DBA0003C0200018C425CD43C010001AC205C6072
:10DBB000104000DD240200023C0100010037082172
:10DBC000AC2283AC3C0100010800481FAC205CD4AF
:10DBD0003C0300018C635DBC240200051462000359
:10DBE000240200013C010001AC225D000C0049CF81
:10DBF000000000003C0300018C635D000800478EBC
:10DC0000240200113C0500018CA55CC83C06000103
:10DC10008CC67E3C0C005108000020212402000527
:10DC20003C010001AC205CD43C010001003708211C
:10DC30000800481FAC2283AC3C04000124845ABC79
:10DC40003C05000F34A50100000030210000382100
:10DC5000AFA000100C002403AFA000140800481F60
:10DC6000000000008F8202203C03F70000431025D3
:10DC7000080047B7AF8202208F8202203C030004D5
:10DC800000431024144000A9240200078F8300548D
:10DC90003C0200018C425DA42463D8F000431023B1
:10DCA0002C422710144000F8240200010800481DEF
:10DCB000000000003C0500018CA55CC80C0052A2CD
:10DCC000000020210C005386000020213C030001AD
:10DCD0008C637E34046100EA240200013C020008E7
:10DCE0000062102410400006000000008F82021421
:10DCF0003C03FFFF00431024080047413442251F26
:10DD00008F8202143C03FFFF004310243442241F7F
:10DD1000AF8202148EE200003C0302000043102593
:10DD2000AEE200008F8202202403FFFB0043102498
:10DD3000AF8202208F82022034420002AF82022092
:10DD4000240200083C01000100370821AC2283AC0A
:10DD50008F8202203C03000400431024144000057D
:10DD6000000000008F8202203C03F70000431025D2
:10DD7000AF8202203C0300018C635DBC24020005DD
:10DD80001462000A000000003C02000194425DA2FF
:10DD900024429FBC2C4200041040000424040018BC
:10DDA000240500020C004D93240600200C0043DDE6
:10DDB000000000003C0100010800481FAC205D503D
:10DDC0003C020001005710218C4283AC2443FFFF2A
:10DDD0002C620008104000AC000310803C010001E0
:10DDE000002208218C225AE80040000800000000B0
:10DDF0000C00429B000000003C010001AC205CCC08
:10DE0000AF8002043C0100010C004822AC207E20BF
:10DE1000240200013C010001AC225CE42402000267
:10DE20003C010001003708210800481FAC2283ACE8
:10DE30000C00489F000000003C0300018C635CE480
:10DE40002402000914620090240200033C01000136
:10DE5000003708210800481FAC2283AC3C020001B7
:10DE60008C427E3830424000104000050000000027
:10DE70008F8200443C03FFFF0800479F34637FFF0D
:10DE80008F8200442403FF7F00431024AF820044AC
:10DE90008F830054080047B9240200048F83005484
:10DEA0003C0200018C425DA42463D8F0004310239F
:10DEB0002C42271014400074240200053C0100018C
:10DEC000003708210800481FAC2283AC8F82022053
:10DED0003C03F70000431025AF820220AF8002040C
:10DEE0003C010001AC207E208F83005424020006F8
:10DEF0003C01000100370821AC2283AC3C01000149
:10DF00000800481FAC235DA48F8300543C0200012D
:10DF10008C425DA42463FFF6004310232C42000AC8
:10DF20001440005900000000240200073C010001D9
:10DF3000003708210800481FAC2283AC8F820220E2
:10DF40003C04F70000441025AF8202208F8202209B
:10DF50003C03030000431024144000050000182176
:10DF60008F8202202403000100441025AF8202208A
:10DF700010600043240200018F8202143C03FFFF63
:10DF80003C0400018C845D98004310243442251F1A
:10DF9000AF820214240200083C010001003708216E
:10DFA0001080000BAC2283AC3C0200018C425D74FB
:10DFB00014400007240200013C010001AC227DD086
:10DFC0000C004E548F8402200800480C0000000012
:10DFD0008F8202203C0300080043102414400017E5
:10DFE0002402000E3C010001AC227DD08EE2000034
:10DFF000000020213C030200004310250C00538642
:10E00000AEE200008F8202202403FFFB00431024B5
:10E01000AF8202208F820220344200020C0043DDD6
:10E02000AF8202203C0500018CA55CC80C0052A206
:10E03000000020210800481F000000003C020001F1
:10E040008C425D7410400010000000003C02000192
:10E050008C425D702442FFFF3C010001AC225D70E8
:10E0600014400009240200023C010001AC205D7450
:10E070003C0100010800481FAC225D702402000131
:10E080003C010001AC225CCC8FBF001803E000080B
:10E0900027BD00208F8202008F8202208F82022003
:10E0A00034420004AF8202208F8202003C0600014D
:10E0B0008CC65CC834420004AF8202002402000215
:10E0C00010C2003A2CC200031040000524020001D7
:10E0D00010C20008000000000800486800000000AE
:10E0E0002402000410C20013240200010800486842
:10E0F000000000003C0300018C635CB83C0200019E
:10E100008C425CC03C0400018C845CDC3C0500015A
:10E110008CA55CBCAF860200AF860220346300226F
:10E1200000441025004510253442000208004867CD
:10E13000AF8302003C0300018C635D98AF82020054
:10E1400010600009AF8202203C0200018C425D7425
:10E15000144000053C033F003C0200018C425CB0CF
:10E160000800485B346300E03C0200018C425CB074
:10E170003C033F00346300E200431025AF820200FD
:10E180003C0300018C635CB43C04F7003C020001DA
:10E190008C425CC03C0500018CA55CDC0064182549
:10E1A0000043102500451025AF82022003E000083F
:10E1B000000000008F8202203C0300018C635CC8D9
:10E1C00034420004AF820220240200011062000FDA
:10E1D000000000008F8300548F82005424630002EB
:10E1E000006210232C4200031040001100000000C8
:10E1F0008F820054006210232C4200031040000C58
:10E200000000000008004879000000008F830054DF
:10E210008F82005408004885246300078F820054D1
:10E22000006210232C4200081440FFFC0000000094
:10E230008F8400E0308200071040000D00000000D5
:10E240008F8200548F8300E014830009244500323C
:10E250008F82005400A210232C420033104000048F
:10E26000000000008F8200E01082FFF90000000033
:10E270008F8202202403FFFD00431024AF8202207E
:10E2800003E00008000000003C0300018C635CE434
:10E290003C0200018C425CE8506200042463FFFFF2
:10E2A0003C010001AC235CE82463FFFF2C62000901
:10E2B0001040009D000310803C0100010022082155
:10E2C0008C225B0800400008000000008F820044A0
:10E2D00034428080AF8200448F8300540800493864
:10E2E000240200028F8300543C0200018C425DA88E
:10E2F0002463D8F0004310232C4227101440008AD6
:10E300002402000308004945000000008F820044F9
:10E310003C03FFFF34637FFF00431024AF820044BF
:10E320008F83005408004938240200048F8300546E
:10E330003C0200018C425DA82463FFF600431023D9
:10E340002C42000A144000782402000508004945C8
:10E35000000000008F8202203C03F70000431025DC
:10E36000AF8202208F8202202403FFFB004310248F
:10E37000AF8202208F82022034420002AF8202204C
:10E380003C023F00344200E0AF8202008F82020074
:10E390002403FFFD00431024AF8202002404000187
:10E3A0003405FFFFAF8402048F8300548F82005432
:10E3B000080048EC246300018F820054006210239F
:10E3C0002C4200021440FFFC000000008F82022457
:10E3D0000004204000A4102B1040FFF200000000B9
:10E3E0008F8202203C03F70000431025AF820220F9
:10E3F0008F8202143C03FFFF004310243442251F88
:10E40000AF8202148F8202202403FFFB00431024FA
:10E41000AF8202208F8202203C04F700348400087F
:10E4200034420002AF8202208F8202203C033F0070
:10E43000346300E200441025AF820220AF83020063
:10E440008F8400F0276217F81482000224850008E8
:10E45000276510008F8200F410A200073C038000A3
:10E46000346300403C02000124425C70AC82000036
:10E47000AC830004AF8500F08F8300540800493856
:10E48000240200068F8300543C0200018C425DA8E8
:10E490002463FFF6004310232C42000A144000229C
:10E4A0002402000708004945000000008F8200E0B8
:10E4B000AF8200E48F8200E0AF8200E88F8202200A
:10E4C00034420004AF8202208F8202202403FFF72F
:10E4D00000431024AF8202208F82004434428080A7
:10E4E000AF8200448F830054240200083C010001E5
:10E4F000AC225CE43C01000108004947AC235DA864
:10E500008F8300543C0200018C425DA82463D8F044
:10E51000004310232C42271014400003240200095A
:10E520003C010001AC225CE403E0000800000000B4
:10E5300000000000000000000000000027BDFFD820
:10E54000AFB2001800809021AFB3001C00A098214A
:10E55000AFB1001400C08821AFB0001000008021CE
:10E56000AFBF0020A62000000C004D4B240400018A
:10E57000261000012E0200201440FFFB00000000C6
:10E580000C004D4B000020210C004D4B24040001D9
:10E590000C004D4B240400010C004D4B00002021C9
:10E5A000241000100250102410400002000020210E
:10E5B000240400010C004D4B001080421600FFFAAD
:10E5C0000250102424100010027010241040000289
:10E5D00000002021240400010C004D4B001080425B
:10E5E0001600FFFA027010240C004D7134108000E8
:10E5F0000C004D71000000000C004D2B00000000CD
:10E600005040000500108042962200000050102566
:10E61000A6220000001080421600FFF70000000054
:10E620000C004D71000000008FBF00208FB3001C54
:10E630008FB200188FB100148FB0001003E00008F3
:10E6400027BD002827BDFFD8AFB100140080882166
:10E65000AFB2001800A09021AFB3001C00C09821F9
:10E66000AFB0001000008021AFBF00200C004D4B68
:10E6700024040001261000012E0200201440FFFB9C
:10E68000000000000C004D4B000020210C004D4B01
:10E69000240400010C004D4B000020210C004D4BC8
:10E6A0002404000124100010023010241040000245
:10E6B00000002021240400010C004D4B001080427A
:10E6C0001600FFFA0230102424100010025010240B
:10E6D0001040000200002021240400010C004D4BDA
:10E6E000001080421600FFFA025010240C004D4B1F
:10E6F000240400010C004D4B000020213410800048
:10E7000096620000005010241040000200002021FA
:10E71000240400010C004D4B001080421600FFF84D
:10E72000000000000C004D71000000008FBF0020B1
:10E730008FB3001C8FB200188FB100148FB000107F
:10E7400003E0000827BD00283C0300018C635D0046
:10E750003C0200018C425D4827BDFFD8AFBF0020BE
:10E76000AFB1001C10620003AFB000183C01000103
:10E77000AC235D482463FFFF2C6200131040034963
:10E78000000310803C010001002208218C225B3034
:10E7900000400008000000000C004D7100008021C6
:10E7A00034028000A7A2001027B100100C004D4BCE
:10E7B00024040001261000012E0200201440FFFB5B
:10E7C000000000000C004D4B000020210C004D4BC0
:10E7D000240400010C004D4B000020210C004D4B87
:10E7E0002404000124100010320200011040000235
:10E7F00000002021240400010C004D4B0010804239
:10E800001600FFFA32020001241000100C004D4BDC
:10E8100000002021001080421600FFFC00000000D4
:10E820000C004D4B240400010C004D4B0000202136
:10E830003410800096220000005010241040000286
:10E8400000002021240400010C004D4B00108042E8
:10E850001600FFF8000000000C004D7100000000E1
:10E8600008004D242402000227B10010A7A00010C8
:10E87000000080210C004D4B2404000126100001F3
:10E880002E0200201440FFFB000000000C004D4B46
:10E89000000020210C004D4B240400010C004D4BC6
:10E8A000240400010C004D4B000020212410001016
:10E8B0003202000110400002000020212404000167
:10E8C0000C004D4B001080421600FFFA320200018E
:10E8D000241000100C004D4B00002021001080423D
:10E8E0001600FFFC000000000C004D713410800089
:10E8F0000C004D71000000000C004D2B00000000CA
:10E900005040000500108042962200000050102563
:10E91000A6220000001080421600FFF70000000051
:10E920000C004D710000000097A2001030428000E2
:10E93000144002DC2402000308004D240000000003
:10E9400024021200A7A2001027B1001000008021AD
:10E950000C004D4B24040001261000012E02002063
:10E960001440FFFB000000000C004D4B0000202174
:10E970000C004D4B240400010C004D4B00002021E5
:10E980000C004D4B24040001241000103202000141
:10E990001040000200002021240400010C004D4B17
:10E9A000001080421600FFFA32020001241000100D
:10E9B0000C004D4B00002021001080421600FFFC8F
:10E9C000000000000C004D4B240400010C004D4BD6
:10E9D00000002021341080009622000000501024F6
:10E9E0001040000200002021240400010C004D4BC7
:10E9F000001080421600FFF8000000000C004D716E
:10EA0000000000008F83005408004D16240200040B
:10EA10008F8300543C0200018C425DB82463FF9C4C
:10EA2000004310232C4200641440029E2402000282
:10EA30003C0300018C635DBC106202972C620003F2
:10EA40001440029624020011240200031062000503
:10EA500024020004106202912402000F08004D24D9
:10EA60002402001108004D24240200052402001491
:10EA7000A7A2001027B10010000080210C004D4B10
:10EA800024040001261000012E0200201440FFFB88
:10EA9000000000000C004D4B000020210C004D4BED
:10EAA000240400010C004D4B000020210C004D4BB4
:10EAB0002404000124100010320200011040000262
:10EAC00000002021240400010C004D4B0010804266
:10EAD0001600FFFA32020001241000103202001268
:10EAE0001040000200002021240400010C004D4BC6
:10EAF000001080421600FFFA320200120C004D4B4B
:10EB0000240400010C004D4B000020213410800033
:10EB10009622000000501024104000020000202126
:10EB2000240400010C004D4B001080421600FFF839
:10EB3000000000000C004D71000000008F830054A5
:10EB400008004D16240200068F8300543C02000189
:10EB50008C425DB82463FF9C004310232C42006468
:10EB6000144002502402000708004D240000000059
:10EB700024020006A7A2001027B100100000802187
:10EB80000C004D4B24040001261000012E02002031
:10EB90001440FFFB000000000C004D4B0000202142
:10EBA0000C004D4B240400010C004D4B00002021B3
:10EBB0000C004D4B2404000124100010320200010F
:10EBC0001040000200002021240400010C004D4BE5
:10EBD000001080421600FFFA3202000124100010DB
:10EBE0003202001310400002000020212404000122
:10EBF0000C004D4B001080421600FFFA3202001349
:10EC00000C004D4B240400010C004D4B0000202152
:10EC100034108000962200000050102410400002A2
:10EC200000002021240400010C004D4B0010804204
:10EC30001600FFF8000000000C004D7100000000FD
:10EC40008F83005408004D16240200088F8300545F
:10EC50003C0200018C425DB82463FF9C00431023FA
:10EC60002C4200641440020F2402000908004D24C5
:10EC70000000000027B10010A7A0001000008021B4
:10EC80000C004D4B24040001261000012E02002030
:10EC90001440FFFB000000000C004D4B0000202141
:10ECA0000C004D4B240400010C004D4B24040001CA
:10ECB0000C004D4B000020212410001032020001F6
:10ECC0001040000200002021240400010C004D4BE4
:10ECD000001080421600FFFA3202000124100010DA
:10ECE000320200181040000200002021240400011C
:10ECF0000C004D4B001080421600FFFA3202001843
:10ED00000C004D71341080000C004D7100000000AB
:10ED10000C004D2B00000000504000050010804208
:10ED20009622000000501025A6220000001080420C
:10ED30001600FFF7000000000C004D71000080215C
:10ED400097A2001027B1001034420001A7A20010C2
:10ED50000C004D4B24040001261000012E0200205F
:10ED60001440FFFB000000000C004D4B0000202170
:10ED70000C004D4B240400010C004D4B00002021E1
:10ED80000C004D4B2404000124100010320200013D
:10ED90001040000200002021240400010C004D4B13
:10EDA000001080421600FFFA320200012410001009
:10EDB000320200181040000200002021240400014B
:10EDC0000C004D4B001080421600FFFA3202001872
:10EDD0000C004D4B240400010C004D4B0000202181
:10EDE00034108000962200000050102410400002D1
:10EDF00000002021240400010C004D4B0010804233
:10EE00001600FFF8000000000C004D71000000002B
:10EE10008F83005408004D162402000A8F8300548B
:10EE20003C0200018C425DB82463FF9C0043102328
:10EE30002C4200641440019B2402000B08004D2466
:10EE40000000000027B10010A7A0001000008021E2
:10EE50000C004D4B24040001261000012E0200205E
:10EE60001440FFFB000000000C004D4B000020216F
:10EE70000C004D4B240400010C004D4B24040001F8
:10EE80000C004D4B00002021241000103202000124
:10EE90001040000200002021240400010C004D4B12
:10EEA000001080421600FFFA320200012410001008
:10EEB000320200171040000200002021240400014B
:10EEC0000C004D4B001080421600FFFA3202001772
:10EED0000C004D71341080000C004D7100000000DA
:10EEE0000C004D2B00000000504000050010804237
:10EEF0009622000000501025A6220000001080423B
:10EF00001600FFF7000000000C004D71000080218A
:10EF100097A2001027B1001034420700A7A20010EA
:10EF20000C004D4B24040001261000012E0200208D
:10EF30001440FFFB000000000C004D4B000020219E
:10EF40000C004D4B240400010C004D4B000020210F
:10EF50000C004D4B2404000124100010320200016B
:10EF60001040000200002021240400010C004D4B41
:10EF7000001080421600FFFA320200012410001037
:10EF8000320200171040000200002021240400017A
:10EF90000C004D4B001080421600FFFA32020017A1
:10EFA0000C004D4B240400010C004D4B00002021AF
:10EFB00034108000962200000050102410400002FF
:10EFC00000002021240400010C004D4B0010804261
:10EFD0001600FFF8000000000C004D71000000005A
:10EFE0008F83005408004D162402000C8F830054B8
:10EFF0003C0200018C425DB82463FF9C0043102357
:10F000002C420064144001272402001208004D2401
:10F010000000000027B10010A7A000100000802110
:10F020000C004D4B24040001261000012E0200208C
:10F030001440FFFB000000000C004D4B000020219D
:10F040000C004D4B240400010C004D4B2404000126
:10F050000C004D4B00002021241000103202000152
:10F060001040000200002021240400010C004D4B40
:10F07000001080421600FFFA320200012410001036
:10F08000320200141040000200002021240400017C
:10F090000C004D4B001080421600FFFA32020014A3
:10F0A0000C004D71341080000C004D710000000008
:10F0B0000C004D2B00000000504000050010804265
:10F0C0009622000000501025A62200000010804269
:10F0D0001600FFF7000000000C004D7100008021B9
:10F0E00097A2001027B1001034420010A7A2001010
:10F0F0000C004D4B24040001261000012E020020BC
:10F100001440FFFB000000000C004D4B00002021CC
:10F110000C004D4B240400010C004D4B000020213D
:10F120000C004D4B24040001241000103202000199
:10F130001040000200002021240400010C004D4B6F
:10F14000001080421600FFFA320200012410001065
:10F1500032020014104000020000202124040001AB
:10F160000C004D4B001080421600FFFA32020014D2
:10F170000C004D4B240400010C004D4B00002021DD
:10F18000341080009622000000501024104000022D
:10F1900000002021240400010C004D4B001080428F
:10F1A0001600FFF8000000000C004D710000000088
:10F1B0008F83005408004D16240200138F830054DF
:10F1C0003C0200018C425DB82463FF9C0043102385
:10F1D0002C420064144000B32402000D08004D24AA
:10F1E0000000000027B10010A7A00010000080213F
:10F1F0000C004D4B24040001261000012E020020BB
:10F200001440FFFB000000000C004D4B00002021CB
:10F210000C004D4B240400010C004D4B2404000154
:10F220000C004D4B00002021241000103202000180
:10F230001040000200002021240400010C004D4B6E
:10F24000001080421600FFFA320200012410001064
:10F2500032020018104000020000202124040001A6
:10F260000C004D4B001080421600FFFA32020018CD
:10F270000C004D71341080000C004D710000000036
:10F280000C004D2B00000000504000050010804293
:10F290009622000000501025A62200000010804297
:10F2A0001600FFF7000000000C004D7100008021E7
:10F2B00097A2001027B100103042FFFEA7A2001055
:10F2C0000C004D4B24040001261000012E020020EA
:10F2D0001440FFFB000000000C004D4B00002021FB
:10F2E0000C004D4B240400010C004D4B000020216C
:10F2F0000C004D4B240400012410001032020001C8
:10F300001040000200002021240400010C004D4B9D
:10F31000001080421600FFFA320200012410001093
:10F3200032020018104000020000202124040001D5
:10F330000C004D4B001080421600FFFA32020018FC
:10F340000C004D4B240400010C004D4B000020210B
:10F35000341080009622000000501024104000025B
:10F3600000002021240400010C004D4B00108042BD
:10F370001600FFF8000000000C004D7100000000B6
:10F380008F83005408004D162402000E240208400A
:10F39000A7A2001027B10010000080210C004D4BE7
:10F3A00024040001261000012E0200201440FFFB5F
:10F3B000000000000C004D4B000020210C004D4BC4
:10F3C000240400010C004D4B000020210C004D4B8B
:10F3D0002404000124100010320200011040000239
:10F3E00000002021240400010C004D4B001080423D
:10F3F0001600FFFA3202000124100010320200133E
:10F400001040000200002021240400010C004D4B9C
:10F41000001080421600FFFA320200130C004D4B20
:10F42000240400010C004D4B00002021341080000A
:10F4300096220000005010241040000200002021FD
:10F44000240400010C004D4B001080421600FFF810
:10F45000000000000C004D71000000008F8300547C
:10F46000240200103C010001AC225D003C010001BF
:10F4700008004D26AC235DB88F8300543C02000188
:10F480008C425DB82463FF9C004310232C4200642F
:10F490001440000400000000240200113C0100019F
:10F4A000AC225D008FBF00208FB1001C8FB0001810
:10F4B00003E0000827BD00288F8500448F820044A8
:10F4C0003C030001004310253C030008AF820044C8
:10F4D0008F8400548F82005400A3282408004D37E5
:10F4E000248400018F820054008210232C420002E9
:10F4F0001440FFFC000000008F8200443C03FFFE2C
:10F500003463FFFF00431024AF8200448F83005414
:10F510008F82005408004D45246300018F820054FF
:10F52000006210232C4200021440FFFC0000000087
:10F5300003E0000800A010218F8300443C02FFF08C
:10F540003442FFFF00042480006218243C020002C1
:10F550000082202500641825AF8300448F82004478
:10F560003C03FFFE3463FFFF00431024AF820044DE
:10F570008F8300548F82005408004D5E2463000185
:10F580008F820054006210232C4200021440FFFCC2
:10F59000000000008F8200443C030001004310255E
:10F5A000AF8200448F8300548F82005408004D6B5B
:10F5B000246300018F820054006210232C42000259
:10F5C0001440FFFC0000000003E000080000000001
:10F5D0008F8200443C03FFF03463FFFF004310249C
:10F5E000AF8200448F8200443C0300010043102599
:10F5F000AF8200448F8300548F82005408004D7FF7
:10F60000246300018F820054006210232C42000208
:10F610001440FFFC000000008F8200443C03FFFE0A
:10F620003463FFFF00431024AF8200448F830054F3
:10F630008F82005408004D8D246300018F82005496
:10F64000006210232C4200021440FFFC0000000066
:10F6500003E000080000000027BDFFC8AFB300248E
:10F6600000809821AFB5002C00A0A821AFB20020E7
:10F6700000C0902132A2FFFFAFBF0030AFB400281E
:10F68000AFB1001CAFB0001814400034A7B2001096
:10F690003271FFFF27B20010000080210C004D4B9B
:10F6A00024040001261000012E0200201440FFFB5C
:10F6B000000000000C004D4B000020210C004D4BC1
:10F6C000240400010C004D4B000020210C004D4B88
:10F6D0002404000124100010320200011040000236
:10F6E00000002021240400010C004D4B001080423A
:10F6F0001600FFFA3202000124100010023010241C
:10F700001040000200002021240400010C004D4B99
:10F71000001080421600FFFA023010240C004D4BFE
:10F72000240400010C004D4B000020213410800007
:10F7300096420000005010241040000200002021DA
:10F74000240400010C004D4B001080421200007593
:10F750000000000008004DC9000000003274FFFFE7
:10F7600027B10010A7A00010000080210C004D4B15
:10F7700024040001261000012E0200201440FFFB8B
:10F78000000000000C004D4B000020210C004D4BF0
:10F79000240400010C004D4B240400010C004D4BCF
:10F7A000000020212410001032020001104000024D
:10F7B00000002021240400010C004D4B0010804269
:10F7C0001600FFFA320200012410001002901024EB
:10F7D0001040000200002021240400010C004D4BC9
:10F7E000001080421600FFFA029010240C004D71A8
:10F7F000341080000C004D71000000000C004D2BF7
:10F8000000000000504000050010804296220000D9
:10F8100000501025A6220000001080421600FFF7BD
:10F82000000000000C004D710000000032A5FFFF39
:10F830002402000154A200042402000297A2001036
:10F8400008004E140052102514A200063271FFFF6A
:10F8500097A200100012182700431024A7A200103E
:10F860003271FFFF27B20010000080210C004D4BC9
:10F8700024040001261000012E0200201440FFFB8A
:10F88000000000000C004D4B000020210C004D4BEF
:10F89000240400010C004D4B000020210C004D4BB6
:10F8A0002404000124100010320200011040000264
:10F8B00000002021240400010C004D4B0010804268
:10F8C0001600FFFA3202000124100010023010244A
:10F8D0001040000200002021240400010C004D4BC8
:10F8E000001080421600FFFA023010240C004D4B2D
:10F8F000240400010C004D4B000020213410800036
:10F900009642000000501024104000020000202108
:10F91000240400010C004D4B001080421600FFF83B
:10F92000000000000C004D71000000008FBF00308F
:10F930008FB5002C8FB400288FB300248FB2002025
:10F940008FB1001C8FB0001803E0000827BD0038FD
:10F9500000000000000000000000000027BDFFE8DC
:10F96000AFBF00103C030001007718218C6383AC0B
:10F97000240200081462022C008030213C020001A5
:10F980008C425D9814400033000000008F850224F3
:10F9900038A300202C63000138A200102C42000183
:10F9A000006218251460000D38A300302C6300019C
:10F9B00038A204002C4200010062182514600007E0
:10F9C00038A304022C63000138A204042C42000175
:10F9D0000062182510600005000000000C00429B2A
:10F9E0000000000008004E8D2402000E0C0043DDD4
:10F9F000000000003C0500018CA55CC80C0052A270
:10FA0000000020213C0300018C635CC82402000438
:10FA1000146200052403FFFB3C0200018C425CC41D
:10FA200008004E892403FFF73C0200018C425CC4AD
:10FA3000004310243C010001AC225CC42402000EEF
:10FA40003C0100010C00429BAC227DD00800508795
:10FA5000000000008F8202203C03040000431024B9
:10FA6000104000272403FFBF8F8502243C020001C1
:10FA70008C427DDC00A32024004310241482000C5F
:10FA8000000000003C0200018C427DE024420001A5
:10FA90003C010001AC227DE02C4200021440000831
:10FAA000240200013C01000108004EADAC227E00A2
:10FAB0003C010001AC207DE03C010001AC207E0057
:10FAC0003C0200018C427E001040000630A2004043
:10FAD00010400004240200013C01000108004EB85F
:10FAE000AC227E043C010001AC207E043C010001FC
:10FAF000AC257DDC3C01000108004EC8AC207E1026
:10FB0000240200013C010001AC227E103C010001F6
:10FB1000AC207E003C010001AC207DE03C010001F6
:10FB2000AC207E043C010001AC207DDC3C030001E4
:10FB30008C637DD03C0200018C427DD410620003B6
:10FB40003C0202003C010001AC237DD400C2102421
:10FB5000104000072463FFFF8F820220240300016E
:10FB60003C010001AC235CCC080050853C03F7004D
:10FB70002C62000E104001A8000310803C0100011F
:10FB8000002208218C225B80004000080000000059
:10FB90003C010001AC207E003C010001AC207DE076
:10FBA0003C010001AC207DDC3C010001AC207E0466
:10FBB0003C010001AC207DF83C010001AC207DF04F
:10FBC0000C00486AAF800224240200023C010001BC
:10FBD000AC227DD03C0200018C427E1014400056C5
:10FBE0003C03FDFF8EE200003463FFFF004310245E
:10FBF0000C00429BAEE20000AF8002048F82020044
:10FC00002403FFFD00431024AF8202003C010001E9
:10FC1000AC207E208F8300543C0200018C427DF892
:10FC2000240400013C010001AC247E0C24420001AC
:10FC30003C010001AC227DF82C4200043C01000193
:10FC4000AC237DF414400006240200033C010001B3
:10FC5000AC245CCC3C01000108005083AC207DF852
:10FC60003C01000108005083AC227DD08F830054FA
:10FC70003C0200018C427DF42463D8F00043102341
:10FC80002C42271014400003240200043C01000110
:10FC9000AC227DD03C0200018C427E101440002634
:10FCA0003C03FDFF8EE200003463FFFF004310249D
:10FCB00008005083AEE200003C0400018C845D9C8F
:10FCC0003C0100010C00508AAC207DE83C020001A0
:10FCD0008C427E1CAF8202043C0200018C427E10EA
:10FCE000144000153C03FDFF8EE200003463FFFF6B
:10FCF00000431024AEE200008F8202043042003044
:10FD00001440013C240200023C0300018C637E1C71
:10FD1000240200053C010001AC227DD03C01000121
:10FD200008005083AC237E203C0200018C427E10F0
:10FD3000104000103C03FDFF3C0200018C425D6C52
:10FD4000244200013C010001AC225D6C2C42000207
:10FD500014400131240200013C010001AC225D7419
:10FD60003C010001AC205D6C3C01000108005083A7
:10FD7000AC225CCC8EE200003463FFFF0043102411
:10FD8000AEE200003C0200018C427E0010400122E5
:10FD9000000000003C0200018C427DDC1040011E8E
:10FDA000000000003C010001AC227E082402000398
:10FDB0003C010001AC227DE0080050242402000632
:10FDC0003C010001AC207DE88F82020434420040F7
:10FDD000AF8202043C0200018C427E202403000713
:10FDE0003C010001AC237DD0344200403C010001C5
:10FDF000AC227E203C0200018C427E0010400005B7
:10FE0000000000003C0200018C427DDC104000F943
:10FE1000240200023C05000124A57DE08CA2000024
:10FE20002C424E21104000F3240200023C0200014B
:10FE30008C427E04104000F82404FFBF3C02000105
:10FE40008C427DDC3C0300018C637E08004410245E
:10FE50000064182410430004240200013C01000146
:10FE600008005083AC227DD024020003ACA2000025
:10FE7000240200083C010001AC227DD03C020001BC
:10FE80008C427E0C1040000C240200013C04000156
:10FE90000C0050978C847DDC3C0200018C427E2853
:10FEA00014400005240200013C0200018C427E2423
:10FEB00010400006240200013C010001AC225CCC91
:10FEC0003C01000108005083AC207DF83C02000199
:10FED0008C427DF03C0300018C637DDC2C420001F0
:10FEE000000210C0306300083C010001AC227DF02C
:10FEF0003C010001AC237DEC8F83005424020009F7
:10FF00003C010001AC227DD03C010001080050837F
:10FF1000AC237DF48F8300543C0200018C427DF4BD
:10FF20002463D8F0004310232C422710144000A86B
:10FF3000000000003C0200018C427E0010400005E1
:10FF4000000000003C0200018C427DDC104000A952
:10FF5000240200023C03000124637DE08C62000067
:10FF60002C424E21104000A3240200023C0200015A
:10FF70008C427E0C1040000E000000003C0200018C
:10FF80008C427DDC3C010001AC207E0C30420080C4
:10FF90001040002F2402000C8F82020430420080A7
:10FFA0001440000C24020003080050112402000C2D
:10FFB0003C0200018C427DDC304200801440000590
:10FFC000240200038F820204304200801040001F90
:10FFD00024020003AC6200002402000A3C0100017C
:10FFE000AC227DD03C04000124847E188C82000069
:10FFF0003C0300018C637DF000431025AF820204B6
:020000021000EC
:100000008C8300003C0400018C847DF02402000BF2
:100010003C010001AC227DD0006418253C010001A8
:10002000AC237E203C05000124A57DE08CA20000CD
:100030002C424E211040006F240200023C020001BD
:100040008C427E1010400005000000002402000CCD
:100050003C01000108005083AC227DD03C0200012D
:100060008C427E001040006C000000003C04000147
:100070008C847DDC1080005E308200083C0300012F
:100080008C637DEC10620064240200033C010001DB
:10009000AC247E08ACA20000240200063C01000152
:1000A00008005083AC227DD08F82020034420002CF
:1000B000AF8202008F8300542402000D3C01000136
:1000C000AC227DD03C010001AC237DF48F83005431
:1000D0003C0200018C427DF42463D8F000431023DD
:1000E0002C4227101440003A000000003C0200019E
:1000F0008C427E10104000292402000E3C030001B7
:100100008C637E243C01000114600015AC227DD07C
:100110000C0043DD000000003C0500018CA55CC81C
:100120000C0052A2000020213C0300018C635CC83B
:1001300024020004146200052403FFFB3C020001BA
:100140008C425CC4080050522403FFF73C020001BB
:100150008C425CC4004310243C010001AC225CC40E
:100160008EE200003C03020000431025AEE20000D6
:100170008F8202243C010001AC227E2C8F8202205F
:100180002403FFFB00431024AF8202208F82022051
:100190003442000208005083AF8202203C0200017A
:1001A0008C427E0010400005000000003C0200016F
:1001B0008C427DDC1040000F240200023C02000152
:1001C0008C427DE02C424E211040000A24020002A5
:1001D0003C0200018C427E001040000F0000000035
:1001E0003C0200018C427DDC1440000B000000004A
:1001F000240200023C01000108005083AC227DD0A3
:100200003C0200018C427E00104000030000000010
:100210000C00429B000000008F8202203C03F7008C
:1002200000431025AF8202208FBF001003E00008BA
:1002300027BD00183C03000124637E288C62000067
:1002400010400005344220003C010001AC227E1C1D
:1002500008005095AC6000003C010001AC247E1CFD
:1002600003E000080000000027BDFFE030820030FE
:10027000AFBF00183C010001AC227E24144000678F
:100280003C02FFFF34421F0E008210241440006124
:1002900024020030308220001040005D3083800056
:1002A00000031A0230820001000212003C04000127
:1002B0008C845D9C00621825000331C23C03000160
:1002C00024635D78308280000002120230840001D5
:1002D0000004220000441025000239C200061080EC
:1002E0000043102100471021904300002402000128
:1002F00010620025000000001060000724020002C8
:1003000010620013240200031062002C3C05000F51
:10031000080050F9000000008F8202002403FEFF55
:1003200000431024AF8202008F8202203C03FFFEB4
:100330003463FFFF00431024AF8202203C01000120
:10034000AC207E443C01000108005104AC207E4CEE
:100350008F82020034420100AF8202008F820220AD
:100360003C03FFFE3463FFFF00431024AF820220F2
:10037000240201003C010001AC227E443C0100014A
:1003800008005104AC207E4C8F8202002403FEFF43
:1003900000431024AF8202008F8202203C03000140
:1003A00000431025AF8202203C010001AC207E44B6
:1003B0003C01000108005104AC237E4C8F820200F6
:1003C00034420100AF8202008F8202203C03000110
:1003D00000431025AF820220240201003C010001ED
:1003E000AC227E443C01000108005104AC237E4C49
:1003F00034A5FFFF3C04000124845BB8AFA30010C8
:100400000C002403AFA000140800510400000000F9
:10041000240200303C010001AC227E288FBF00186E
:1004200003E0000827BD00200000000027BDFFC832
:10043000AFB2002800809021AFB3002C00A098211B
:10044000AFB0002000C080213C04000124845BD0B8
:100450003C0500093C0200018C425CC834A59001B7
:100460000240302102603821AFBF0030AFB100241C
:10047000A7A0001AAFB000140C002403AFA2001014
:1004800024020002126200832E6200031040000565
:10049000240200011262000A000000000800529BC2
:1004A0000000000024020004126200FA2402000886
:1004B000126200F93C02FFEC0800529B00000000B1
:1004C0003C0200018C425CC4304200021440000433
:1004D000001289403C02FFFB3442FFFF02028024ED
:1004E0003C01000100310821AC307E3C3C02400060
:1004F000020210241040004E001023C2308400304D
:10050000001013823042001C3C03000124635D088C
:1005100000431021008238213C02002002021024F6
:1005200010400006240201003C01000100310821B6
:10053000AC227E40080051503C0200803C0100018A
:1005400000310821AC207E403C02008002021024D1
:1005500010400006001219403C0200013C0100015D
:10056000002308210800515CAC227E480012114093
:100570003C01000100220821AC207E4894E40000E8
:100580003C0300018C635DBC240200051062001076
:10059000A7A400183202400010400002348240003C
:1005A000A7A200182404000194E20002240500041C
:1005B00024E60002344200010C00498EA4E200024D
:1005C00024040001000028210C00498E27A60018F1
:1005D0003C0200018C425CC8241100013C01000176
:1005E000AC315CD414530004320280000C00429BF6
:1005F00000000000320280001040011F00000000D7
:100600000C00429B000000003C0300018C635DBCB9
:100610002402000510620118240200023C010001BE
:10062000AC315CCC3C0100010800529BAC225CC8A0
:10063000240400012405000427B0001A0C00498E90
:100640000200302124040001000028210C00498E02
:10065000020030213C020001005110218C427E3406
:100660003C0400018C845CC83C03BFFF3463FFFF83
:100670003C010001AC335CD4004310243C01000178
:1006800000310821109300FAAC227E340800529BFE
:10069000000000003C02200002021024104000056F
:1006A000240200013C010001AC225D98080051AD1C
:1006B000001289403C010001AC205D980012894085
:1006C0003C01000100310821AC307E383C02400082
:1006D0000202102414400016000000003C02000139
:1006E0008C425D9810400008240400042405000199
:1006F0000C004D9324062000240200013C0100015F
:1007000000370821AC2283AC3C02000100511021CB
:100710008C427E303C03BFFF3463FFFF0043102454
:100720003C0100010031082108005299AC227E30C2
:100730003C0200018C425D98104000283C0300A060
:10074000020310245443000D3C0200203C0200012F
:100750008C425D9C240301003C0100010031082112
:10076000AC237E443C0300013C0100010031082120
:10077000AC237E4C080051F03442040002021024E5
:1007800010400008240301003C0200018C425D9CE3
:100790003C01000100310821AC237E44080051F0E7
:1007A000344208003C020080020210241040002E57
:1007B0003C0300013C0200018C425D9C3C010001B5
:1007C00000310821AC237E4C34420C003C01000176
:1007D000AC225D9C08005218240400013C02002059
:1007E0000202102410400006240201003C01000116
:1007F00000310821AC227E44080052013C020080F6
:100800003C01000100310821AC207E443C02008004
:100810000202102410400007001219403C0200019F
:100820003C01000100230821AC227E4C0800520F3D
:1008300024040001001211403C01000100220821A3
:10084000AC207E4C240400010000282127B0001EAB
:100850000C00494C02003021240400010000282132
:100860000C00494C02003021240400012405000141
:1008700027B0001C0C00494C020030212404000168
:10088000240500010C00494C020030210800529957
:10089000000000003C02FFEC3442FFFF0202802413
:1008A0003C02000802028025001211403C010001B8
:1008B00000220821AC307E383C02200002021024C5
:1008C00010400009000000003C0200018C425D74F1
:1008D00014400005240200013C010001AC225D9897
:1008E0000800523A3C0240003C010001AC205D98F7
:1008F0003C024000020210241440001E00000000D0
:100900003C0200018C425D983C010001AC205CE09F
:1009100010400007240220203C010001AC225D9C15
:10092000240200013C01000100370821AC2283AC05
:100930003C04BFFF001219403C020001004310219B
:100940008C427E303C0500018CA55CC83484FFFFDE
:10095000004410243C01000100230821AC227E3019
:100960002402000110A20044000000000800529977
:10097000000000003C0200018C425D981040001C09
:10098000240220003C010001AC225D9C3C0300A03D
:100990000203102414430005001211403402A00089
:1009A0003C01000108005294AC225D9C3C03000114
:1009B000006218218C637E383C0200200062102403
:1009C00010400004240220013C0100010800529460
:1009D000AC225D9C3C020080006210241040001F8D
:1009E0003402A0013C01000108005294AC225D9C3D
:1009F0003C0200200202102410400007001219409F
:100A0000240201003C01000100230821AC227E44A5
:100A1000080052883C020080001211403C01000195
:100A200000220821AC207E443C02008002021024F7
:100A300010400006001219403C0200013C01000178
:100A40000023082108005294AC227E4C0012114071
:100A50003C01000100220821AC207E4C3C03000137
:100A60008C635CC8240200011062000300000000D7
:100A70000C00429B000000008FBF00308FB3002CA1
:100A80008FB200288FB100248FB0002003E000084F
:100A900027BD003827BDFFD8AFB2002000809021CD
:100AA000AFB1001C0000882124020002AFBF002467
:100AB000AFB00018A7A0001210A200D3A7A000108A
:100AC0002CA20003104000052402000110A2000A1D
:100AD00000128140080053800220102124020004EB
:100AE00010A2007D2402000810A2007C0012294000
:100AF00008005380022010213C03000100701821DF
:100B00008C637E3C3C0240000062102414400009CB
:100B1000240400013C027FFF3442FFFF006288246E
:100B20003C01000100300821AC317E3408005380C4
:100B300002201021240500010C00494C27A60010BA
:100B400024040001240500010C00494C27A60010D4
:100B500097A2001030420004104000343C114000C5
:100B60003C0200018C425DBC2443FFFF2C62000666
:100B700010400034000310803C01000100220821D5
:100B80008C225BE00040000800000000240400010B
:100B90002405001127B000120C00494C020030213E
:100BA00024040001240500110C00494C02003021EE
:100BB00097A5001230A24000104000023C04001033
:100BC0003C0400083C0300010800530130A28000EF
:100BD000240400012405001427B000120C00494C25
:100BE0000200302124040001240500140C00494CAB
:100BF0000200302197A5001230A210001040000220
:100C00003C0400103C0400083C03000130A2080032
:100C1000544000013C0300023C02800002221025E7
:100C2000006418250800530E004388253C1100017C
:100C3000023088218E317E3C3C027FFF3442FFFF30
:100C4000022288243C0200018C425CD81040001D26
:100C5000001211403C0200018C425D9810400002DD
:100C60003C02200002228825001211403C010001B4
:100C7000002208218C227E40104000033C0200200C
:100C800008005322022288253C02FFDF3442FFFF86
:100C900002228824001211403C0100010022082198
:100CA0008C227E48104000033C0200800800532D37
:100CB000022288253C02FF7F3442FFFF0222882463
:100CC000001211403C01000100220821AC317E34A9
:100CD0000800538002201021001229403C0300012B
:100CE000006518218C637E383C02400000621024AD
:100CF000144000083C027FFF3442FFFF006288245A
:100D00003C01000100250821AC317E3008005380F1
:100D1000022010213C0200018C425CD810400033BC
:100D20003C11C00C3C0200018C425D743C04C00CC0
:100D3000348420003C0300018C635D980002102B7A
:100D40000002102300441024106000030051882585
:100D50003C022000022288253C02000100451021AF
:100D60008C427E44104000033C0200200800535D8A
:100D7000022288253C02FFDF3442FFFF0222882442
:100D8000001211403C010001002208218C227E4CFF
:100D9000104000033C0200800800536802228825AE
:100DA0003C02FF7F3442FFFF022288243C02000104
:100DB0008C425D60104000023C020800022288253F
:100DC0003C0200018C425D64104000023C020400C1
:100DD000022288253C0200018C425D68104000061A
:100DE0003C0201000800537B022288253C027FFF61
:100DF0003442FFFF00628824001211403C010001D0
:100E000000220821AC317E30022010218FBF002447
:100E10008FB200208FB1001C8FB0001803E00008D3
:100E200027BD002827BDFFD8AFB400200080A02137
:100E3000AFBF0024AFB3001CAFB20018AFB10014B5
:100E4000AFB000108F9002003C0300018C635CC8BF
:100E50008F93022024020002106200632C620003C0
:100E600010400005240200011062000A001419401D
:100E70000800544800000000240200041062005AD8
:100E800024020008106200590014914008005448E0
:100E9000000000003C040001008320218C847E3C83
:100EA0003C110001022388218E317E343C02400037
:100EB000008210241040003E3C0200080222102450
:100EC00010400020361000023C02000100431021B7
:100ED0008C427E4010400005361000203610010084
:100EE0003C020020080053BD022288252402FEFF98
:100EF000020280243C02FFDF3442FFFF02228824EA
:100F0000001411403C010001002208218C227E487F
:100F1000104000053C020001026298253C0200805E
:100F2000080053DC022288253C02FFFE3442FFFF0A
:100F3000026298243C02FF7F3442FFFF080053DC2A
:100F4000022288242402FEDF020280243C02FFFEEB
:100F50003442FFFF026298243C02FF5F3442FFFFED
:100F6000022288243C01000100230821AC207E409D
:100F70003C01000100230821AC207E480C00486A97
:100F800000000000AF900200AF9302208F82022089
:100F90002403FFFB00431024AF8202208F82022033
:100FA00034420002AF820220080053F300141140C3
:100FB0008F8202002403FFFD004310240C00486AC6
:100FC000AF8202003C02BFFF3442FFFF0C00429B95
:100FD00002228824001411403C0100010022082153
:100FE00008005448AC317E34001491403C040001A8
:100FF000009220218C847E383C110001023288212D
:101000008E317E303C0240000082102414400011DA
:10101000000000003C0200018C425D981440000674
:101020003C02BFFF8F820200344200020C00486A7B
:10103000AF8202003C02BFFF3442FFFF0C00429B24
:10104000022288243C010001003208210800544893
:10105000AC317E303C0200018C425D9810400005AE
:101060003C0200203C0200018C425D741040002BC9
:101070003C0200200082102410400007361000209F
:10108000240201003C01000100320821AC227E4410
:1010900008005428361001003C01000100320821EC
:1010A000AC207E442402FEFF020280243C02008029
:1010B0000082102410400007001419403C02000177
:1010C0003C01000100230821AC227E4C0800543969
:1010D00002629825001411403C0100010022082101
:1010E000AC207E4C3C02FFFE3442FFFF026298249B
:1010F0000C00486A00000000AF900200AF9302208D
:101100008F8202202403FFFB00431024AF820220C1
:101110008F82022034420002AF820220001411406C
:101120003C01000100220821AC317E308FBF002439
:101130008FB400208FB3001C8FB200188FB1001441
:101140008FB0001003E0000827BD00282448656127
:101150006465723A202F70726F6A656374732F72C0
:1011600063732F73772F67652F2E2F6E69632F663A
:10117000772F636F6D6D6F6E2F66776D61696E2E61
:10118000632C7620312E312E322E313120313939F7
:10119000382F30342F32372032323A31333A34322A
:1011A00020736875616E6720457870202400000008
:1011B0007468655F4441574E00000000535441433A
:1011C0004B5F312000000000426164536E64526E38
:1011D000670000003F456E71457674003F6E6F51A9
:1011E00064457650000000006576526E6746756C67
:1011F0006C000000496C6C436F6E66527800000012
:1012000053656E64436B53756D00000052656376E1
:10121000566C616E0000000000000000244865610B
:101220006465723A202F70726F6A656374732F72EF
:1012300063732F73772F67652F2E2F6E69632F6669
:10124000772F636F6D6D6F6E2F74696D65722E638E
:101250002C7620312E312E322E3820313939382F4C
:1012600030372F33312031373A35383A343520731F
:101270006875616E6720457870202400542D446D98
:101280006152643100000000542D446D61424200FF
:10129000542D446D613200003F6E6F5164547845A7
:1012A000000000003F6E6F5164527845000000005E
:1012B000656E714D4576504661696C00656E714D85
:1012C00045764661696C00006661696C456E454D06
:1012D000000000003F456E71457674003F6E6F510F
:1012E00064457650000000006576526E6746756C66
:1012F0006C00000000000000000000002448656150
:101300006465723A202F70726F6A656374732F720E
:1013100063732F73772F67652F2E2F6E69632F6688
:10132000772F636F6D6D6F6E2F636F6D6D616E6480
:101330002E632C7620312E312E322E313020313951
:1013400039382F31312F31382031373A31313A3174
:101350003820736875616E6720457870202400001E
:101360003F4D626F78457674000000004E4F636F0A
:101370006D616E6400000000687374655F455252D1
:1013800000000000412D45727242756300000000AC
:101390004552524F522D416464000000656E714DFC
:1013A0004576504661696C00656E714D45764661C3
:1013B000696C00006661696C456E454D0000000077
:1013C000442D4572724C617374000000442D4572C7
:1013D000723200006D4373744D6445525200000038
:1013E00070726F6D4D6445525200000046696C7416
:1013F0004D64455252000000636D645F45525200D7
:101400003F456E71457674003F6E6F51644576506E
:10141000000000006576526E6746756C6C00000037
:101420000000000000006EA000007FBC00006E38CD
:1014300000008734000082B00000878000008780B1
:1014400000006F540000769400007F0C000080A81C
:10145000000080740000878000007E70000080CC57
:1014600000006E64000081CC00000000244865612B
:101470006465723A202F70726F6A656374732F729D
:1014800063732F73772F67652F2E2F6E69632F6617
:10149000772F636F6D6D6F6E2F646D612E632C7689
:1014A00020312E312E322E3320313939382F30343D
:1014B0002F32372032323A31333A34312073687563
:1014C000616E67204578702024000000646D6172B1
:1014D0006441544E00000000646D61777241544EC7
:1014E00000000000000000000000000024486561CA
:1014F0006465723A202F70726F6A656374732F721D
:1015000063732F73772F67652F2E2F6E69632F6696
:10151000772F636F6D6D6F6E2F74726163652E63CD
:101520002C7620312E312E322E3220313939382F7F
:1015300030342F32372032323A31333A353020735B
:101540006875616E672045787020240024486561C5
:101550006465723A202F70726F6A656374732F72BC
:1015600063732F73772F67652F2E2F6E69632F6636
:10157000772F636F6D6D6F6E2F646174612E632CB6
:101580007620312E312E322E3220313939382F301B
:10159000342F32372032323A31333A3430207368C4
:1015A00075616E67204578702024000046575F56AD
:1015B000455253494F4E3A2023312046726920410B
:1015C000707220372031373A35353A34382050445C
:1015D000542032303030000046575F434F4D504961
:1015E0004C455F54494D453A2031373A35353A3408
:1015F0003800000046575F434F4D50494C455F420D
:10160000593A2064657672637300000046575F4361
:101610004F4D50494C455F484F53543A20636F6DCE
:10162000707574650000000046575F434F4D504988
:101630004C455F444F4D41494E3A20656E672E61DF
:101640006374656F6E2E636F6D00000046575F43D5
:101650004F4D50494C45523A20676363207665727E
:1016600073696F6E20322E372E32000000000000AA
:101670000000000000000000000000002448656138
:101680006465723A202F70726F6A656374732F728B
:1016900063732F73772F67652F2E2F6E69632F6605
:1016A000772F636F6D6D6F6E2F6D656D2E632C766A
:1016B00020312E312E322E3220313939382F30342C
:1016C0002F32372032323A31333A3434207368754E
:1016D000616E672045787020240000002448656111
:1016E0006465723A202F70726F6A656374732F722B
:1016F00063732F73772F67652F2E2F6E69632F66A5
:10170000772F636F6D6D6F6E2F73656E642E632C14
:101710007620312E312E322E313120313939382F89
:1017200031322F32322031373A31373A3535207362
:101730006875616E6720457870202400736E64645C
:10174000654E6F51200000006E6F454E515F54583A
:1017500000000000736E6464744E6F51200000003E
:101760003F6E6F516454784500000000756E6B72D7
:101770006474797065000000000000000000ACCCCB
:101780000000ACCC0000AD9C0000AAB00000AAB0E4
:101790000000AD9C0000AD9C0000AD9C0000AD9C25
:1017A0000000AD9C0000AD9C0000AD9C0000AD9C15
:1017B0000000AD9C0000AD9C0000AD9C0000AD9C05
:1017C0000000AD9C0000AD7C000000000000BCA843
:1017D0000000BCA80000BD700000AE4C0000B05876
:1017E0000000BD700000BD700000BD700000BD7045
:1017F0000000BD700000BD700000BD700000BD7035
:101800000000BD700000BD700000BD700000BD7024
:101810000000BD700000BD540000B0402448656168
:101820006465723A202F70726F6A656374732F72E9
:1018300063732F73772F67652F2E2F6E69632F6663
:10184000772F636F6D6D6F6E2F726563762E632CCD
:101850007620312E312E322E313920313939382F40
:1018600030372F32342032313A33303A303520732A
:101870006875616E6720457870202400706B52781F
:101880004552520066726D324C617267650000000D
:1018900072784E6F527842640000000072785144B2
:1018A0006D61444600000000727851446D6142460B
:1018B000000000003F6E6F51645278450000000048
:1018C000706B5278455252730000000066726D32A0
:1018D0004C7267530000000072784E6F42645300F0
:1018E0003F724264446D6146000000003F724A420C
:1018F00064446D4600000000000000000000F6781F
:101900000000F6780000F6780000F6780000F6781F
:101910000000F6780000F6780000F6780000F6780F
:101920000000F6780000F6780000F6780000F678FF
:101930000000F6780000F6780000F6700000F670FF
:101940000000F670572D444D41456E4600000000E2
:10195000000000000000FDC00001015C0000FDDC93
:101960000001015C0001015C0001015C0001015CFF
:101970000001015C0001015C0000F7040001015C52
:101980000001015C0001015C0001015C0001015CDF
:101990000001015400010154000101542448656113
:1019A0006465723A202F70726F6A656374732F7268
:1019B00063732F73772F67652F2E2F6E69632F66E2
:1019C000772F636F6D6D6F6E2F6D61632E632C7655
:1019D00020312E312E322E313220313939382F300C
:1019E000342F32372032323A31333A34322073686E
:1019F00075616E6720457870202400006D61637406
:101A00007841544E000000004E7453796E264C6BA2
:101A10000000000072656D61737372740000000055
:101A20006C696E6B444F574E00000000656E714D3F
:101A30004576504661696C00656E714D457646612C
:101A4000696C00006661696C456E454D00000000E0
:101A50006C696E6B55500000000000002448656101
:101A60006465723A202F70726F6A656374732F72A7
:101A700063732F73772F67652F2E2F6E69632F6621
:101A8000772F636F6D6D6F6E2F636B73756D2E6344
:101A90002C7620312E312E322E3220313939382F0A
:101AA00030342F32372032323A31333A33392073DF
:101AB0006875616E672045787020240050726F62EF
:101AC00065506879000000006C6E6B4153535254AE
:101AD0000000000000011B2C00011BC400011BF8CA
:101AE00000011C2C00011C5800011C6C00011CA8EA
:101AF0000001207C00011DE400011E2400011E5095
:101B000000011E9000011EC000011EFC00011F30DC
:101B10000001207C000122C0000122D80001230026
:101B2000000123200001234800012478000124A0A3
:101B3000000124F40001251C000000000001278C96
:101B40000001285C0001293400012A0400012A60F8
:101B500000012B3C00012B6400012C4000012C688B
:101B600000012E1000012E3800012FE0000131D8B5
:101B70000001346C000133800001346C00013498A2
:101B800000013008000131B00000000000013B847A
:101B900000013BC800013C6000013CAC00013D1C61
:101BA00000013DB400013DE800013E7000013F0826
:101BB00000013FD8000140180001409C000140C0D6
:101BC000000141F4646F42617365506700000000DA
:101BD00000000000000000000000000073746D6150
:101BE000634C4E4B000000000000000000014C3828
:101BF00000014C3800014B8000014BC400014C38FF
:101C000000014C380000000000000000000000004F
:101C100000000000000000000000000000000000C4
:101C2000000000000000000000000000416C74652E
:101C30006F6E204163654E4943205600416C7465C8
:101C40006F6E204163654E49432056004242424236
:101C50000000000000000000000000000013541805
:101C60000013E7FC0000000000000000000000007E
:101C70000000000000000000000000000060CF0035
:101C800000000060CF000000000000000000000025
:101C90000000000000000000000000000000000044
:101CA0000000000000000000000000000000000034
:101CB0000000000000000000000000000000000024
:101CC0000000000000000000000000000000000014
:101CD0000000000000000000000000030000000001
:101CE00000000001000000000000000000000000F3
:101CF00000000001000000000000000100000000E2
:101D000000000000000000000000000000000001D2
:101D100000000001000000000000000000000000C2
:101D20000000000000000000010000002100000091
:101D30001200014000000000000000002000000030
:101D4000120000A0000000001200006012000180DC
:101D5000120001E000000000000000000000000090
:101D60000000000100000000000000000000000072
:101D70000000000000000000000000000000000261
:101D8000000000000000000000030001000000014E
:0C1D900000030201000000000000000041
:00000001FF
/* tg1 firmware v12.4.11 */
